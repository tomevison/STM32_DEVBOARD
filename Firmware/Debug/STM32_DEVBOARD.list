
STM32_DEVBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009024  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800921c  0800921c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009224  08009224  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800922c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200000fc  08009328  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001628  08009328  00021628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014adf  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003313  00000000  00000000  00034c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00037f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00039040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a385  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016945  00000000  00000000  00054385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096589  00000000  00000000  0006acca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  001012a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080091a4 	.word	0x080091a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080091a4 	.word	0x080091a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b974 	b.w	8000c74 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9d08      	ldr	r5, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	468e      	mov	lr, r1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d14d      	bne.n	8000a4e <__udivmoddi4+0xaa>
 80009b2:	428a      	cmp	r2, r1
 80009b4:	4694      	mov	ip, r2
 80009b6:	d969      	bls.n	8000a8c <__udivmoddi4+0xe8>
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b152      	cbz	r2, 80009d4 <__udivmoddi4+0x30>
 80009be:	fa01 f302 	lsl.w	r3, r1, r2
 80009c2:	f1c2 0120 	rsb	r1, r2, #32
 80009c6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ce:	ea41 0e03 	orr.w	lr, r1, r3
 80009d2:	4094      	lsls	r4, r2
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	0c21      	lsrs	r1, r4, #16
 80009da:	fbbe f6f8 	udiv	r6, lr, r8
 80009de:	fa1f f78c 	uxth.w	r7, ip
 80009e2:	fb08 e316 	mls	r3, r8, r6, lr
 80009e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ea:	fb06 f107 	mul.w	r1, r6, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x64>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009fa:	f080 811f 	bcs.w	8000c3c <__udivmoddi4+0x298>
 80009fe:	4299      	cmp	r1, r3
 8000a00:	f240 811c 	bls.w	8000c3c <__udivmoddi4+0x298>
 8000a04:	3e02      	subs	r6, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a10:	fb08 3310 	mls	r3, r8, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x92>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 810a 	bcs.w	8000c40 <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8107 	bls.w	8000c40 <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	b11d      	cbz	r5, 8000a48 <__udivmoddi4+0xa4>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c5 4300 	strd	r4, r3, [r5]
 8000a48:	4631      	mov	r1, r6
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d909      	bls.n	8000a66 <__udivmoddi4+0xc2>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	f000 80ef 	beq.w	8000c36 <__udivmoddi4+0x292>
 8000a58:	2600      	movs	r6, #0
 8000a5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5e:	4630      	mov	r0, r6
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	fab3 f683 	clz	r6, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d14a      	bne.n	8000b04 <__udivmoddi4+0x160>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d302      	bcc.n	8000a78 <__udivmoddi4+0xd4>
 8000a72:	4282      	cmp	r2, r0
 8000a74:	f200 80f9 	bhi.w	8000c6a <__udivmoddi4+0x2c6>
 8000a78:	1a84      	subs	r4, r0, r2
 8000a7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a7e:	2001      	movs	r0, #1
 8000a80:	469e      	mov	lr, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d0e0      	beq.n	8000a48 <__udivmoddi4+0xa4>
 8000a86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a8a:	e7dd      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000a8c:	b902      	cbnz	r2, 8000a90 <__udivmoddi4+0xec>
 8000a8e:	deff      	udf	#255	; 0xff
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	f040 8092 	bne.w	8000bbe <__udivmoddi4+0x21a>
 8000a9a:	eba1 010c 	sub.w	r1, r1, ip
 8000a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa2:	fa1f fe8c 	uxth.w	lr, ip
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	0c20      	lsrs	r0, r4, #16
 8000aaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aae:	fb07 1113 	mls	r1, r7, r3, r1
 8000ab2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab6:	fb0e f003 	mul.w	r0, lr, r3
 8000aba:	4288      	cmp	r0, r1
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x12c>
 8000abe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x12a>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f200 80cb 	bhi.w	8000c64 <__udivmoddi4+0x2c0>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	1a09      	subs	r1, r1, r0
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad8:	fb07 1110 	mls	r1, r7, r0, r1
 8000adc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ae0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae4:	45a6      	cmp	lr, r4
 8000ae6:	d908      	bls.n	8000afa <__udivmoddi4+0x156>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x154>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f200 80bb 	bhi.w	8000c6e <__udivmoddi4+0x2ca>
 8000af8:	4608      	mov	r0, r1
 8000afa:	eba4 040e 	sub.w	r4, r4, lr
 8000afe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x9a>
 8000b04:	f1c6 0720 	rsb	r7, r6, #32
 8000b08:	40b3      	lsls	r3, r6
 8000b0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b12:	fa20 f407 	lsr.w	r4, r0, r7
 8000b16:	fa01 f306 	lsl.w	r3, r1, r6
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	40f9      	lsrs	r1, r7
 8000b1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b22:	fa00 f306 	lsl.w	r3, r0, r6
 8000b26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b2a:	0c20      	lsrs	r0, r4, #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fb09 1118 	mls	r1, r9, r8, r1
 8000b34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b38:	fb08 f00e 	mul.w	r0, r8, lr
 8000b3c:	4288      	cmp	r0, r1
 8000b3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b8>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b4c:	f080 8088 	bcs.w	8000c60 <__udivmoddi4+0x2bc>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f240 8085 	bls.w	8000c60 <__udivmoddi4+0x2bc>
 8000b56:	f1a8 0802 	sub.w	r8, r8, #2
 8000b5a:	4461      	add	r1, ip
 8000b5c:	1a09      	subs	r1, r1, r0
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b64:	fb09 1110 	mls	r1, r9, r0, r1
 8000b68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	458e      	cmp	lr, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1e2>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7c:	d26c      	bcs.n	8000c58 <__udivmoddi4+0x2b4>
 8000b7e:	458e      	cmp	lr, r1
 8000b80:	d96a      	bls.n	8000c58 <__udivmoddi4+0x2b4>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8e:	eba1 010e 	sub.w	r1, r1, lr
 8000b92:	42a1      	cmp	r1, r4
 8000b94:	46c8      	mov	r8, r9
 8000b96:	46a6      	mov	lr, r4
 8000b98:	d356      	bcc.n	8000c48 <__udivmoddi4+0x2a4>
 8000b9a:	d053      	beq.n	8000c44 <__udivmoddi4+0x2a0>
 8000b9c:	b15d      	cbz	r5, 8000bb6 <__udivmoddi4+0x212>
 8000b9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ba2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ba6:	fa01 f707 	lsl.w	r7, r1, r7
 8000baa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bae:	40f1      	lsrs	r1, r6
 8000bb0:	431f      	orrs	r7, r3
 8000bb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	40d8      	lsrs	r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4301      	orrs	r1, r0
 8000bd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000be0:	0c0b      	lsrs	r3, r1, #16
 8000be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000be6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bea:	429e      	cmp	r6, r3
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x260>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bfa:	d22f      	bcs.n	8000c5c <__udivmoddi4+0x2b8>
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	d92d      	bls.n	8000c5c <__udivmoddi4+0x2b8>
 8000c00:	3802      	subs	r0, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	b289      	uxth	r1, r1
 8000c08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb06 f30e 	mul.w	r3, r6, lr
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x28a>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c24:	d216      	bcs.n	8000c54 <__udivmoddi4+0x2b0>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d914      	bls.n	8000c54 <__udivmoddi4+0x2b0>
 8000c2a:	3e02      	subs	r6, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c34:	e738      	b.n	8000aa8 <__udivmoddi4+0x104>
 8000c36:	462e      	mov	r6, r5
 8000c38:	4628      	mov	r0, r5
 8000c3a:	e705      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	e6e3      	b.n	8000a08 <__udivmoddi4+0x64>
 8000c40:	4618      	mov	r0, r3
 8000c42:	e6f8      	b.n	8000a36 <__udivmoddi4+0x92>
 8000c44:	454b      	cmp	r3, r9
 8000c46:	d2a9      	bcs.n	8000b9c <__udivmoddi4+0x1f8>
 8000c48:	ebb9 0802 	subs.w	r8, r9, r2
 8000c4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c50:	3801      	subs	r0, #1
 8000c52:	e7a3      	b.n	8000b9c <__udivmoddi4+0x1f8>
 8000c54:	4646      	mov	r6, r8
 8000c56:	e7ea      	b.n	8000c2e <__udivmoddi4+0x28a>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e794      	b.n	8000b86 <__udivmoddi4+0x1e2>
 8000c5c:	4640      	mov	r0, r8
 8000c5e:	e7d1      	b.n	8000c04 <__udivmoddi4+0x260>
 8000c60:	46d0      	mov	r8, sl
 8000c62:	e77b      	b.n	8000b5c <__udivmoddi4+0x1b8>
 8000c64:	3b02      	subs	r3, #2
 8000c66:	4461      	add	r1, ip
 8000c68:	e732      	b.n	8000ad0 <__udivmoddi4+0x12c>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	e709      	b.n	8000a82 <__udivmoddi4+0xde>
 8000c6e:	4464      	add	r4, ip
 8000c70:	3802      	subs	r0, #2
 8000c72:	e742      	b.n	8000afa <__udivmoddi4+0x156>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <BME280_Init>:
	SPI_HandleTypeDef* spi;
};

struct BME280 bm;

uint32_t BME280_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, SPI_HandleTypeDef* hspi1){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	817b      	strh	r3, [r7, #10]

	bm.port = GPIOx;
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <BME280_Init+0x94>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6013      	str	r3, [r2, #0]
	bm.pin = GPIO_Pin;
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <BME280_Init+0x94>)
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	8093      	strh	r3, [r2, #4]
	bm.spi = hspi1;
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <BME280_Init+0x94>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6093      	str	r3, [r2, #8]

	uint8_t address = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
	address |= 0x80;  // read operation
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	75fb      	strb	r3, [r7, #23]
	address |= 0xD0;  // "id" register
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	75fb      	strb	r3, [r7, #23]
	uint8_t data_rec[1] = {0};
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	753b      	strb	r3, [r7, #20]

	// read temp data from BME280 via SPI
	HAL_GPIO_WritePin(bm.port, bm.pin, RESET); // chip select is active low
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <BME280_Init+0x94>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <BME280_Init+0x94>)
 8000cba:	8891      	ldrh	r1, [r2, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fb84 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (bm.spi, &address, 1, 100);  // send address
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <BME280_Init+0x94>)
 8000cc6:	6898      	ldr	r0, [r3, #8]
 8000cc8:	f107 0117 	add.w	r1, r7, #23
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f003 fc63 	bl	800459a <HAL_SPI_Transmit>
	HAL_SPI_Receive (bm.spi, data_rec, 1, 100);  // receive 6 bytes data
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <BME280_Init+0x94>)
 8000cd6:	6898      	ldr	r0, [r3, #8]
 8000cd8:	f107 0114 	add.w	r1, r7, #20
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f003 fd97 	bl	8004812 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(bm.port, bm.pin, SET); // end transaction by pulling CSB high
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <BME280_Init+0x94>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <BME280_Init+0x94>)
 8000cea:	8891      	ldrh	r1, [r2, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fb6c 	bl	80023cc <HAL_GPIO_WritePin>

	// check sensor is valid
	if(data_rec[0]==0x60){
 8000cf4:	7d3b      	ldrb	r3, [r7, #20]
 8000cf6:	2b60      	cmp	r3, #96	; 0x60
 8000cf8:	d101      	bne.n	8000cfe <BME280_Init+0x86>
		return 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e001      	b.n	8000d02 <BME280_Init+0x8a>
	}else{
		return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000118 	.word	0x20000118

08000d10 <BME280_setMode>:

BME280_setMode(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

	// first we must get mode.
	uint8_t address = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;  // read operation
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	71fb      	strb	r3, [r7, #7]
	address |= 0xF4;  // "id" register
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f063 030b 	orn	r3, r3, #11
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_rec[1] = {0};
 8000d2e:	2300      	movs	r3, #0
 8000d30:	713b      	strb	r3, [r7, #4]
	uint8_t data_snd[2] = {0};
 8000d32:	2300      	movs	r3, #0
 8000d34:	803b      	strh	r3, [r7, #0]

	// read mode data from BME280 via SPI
	HAL_GPIO_WritePin(bm.port, bm.pin, RESET); // chip select is active low
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d3c:	8891      	ldrh	r1, [r2, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fb43 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (bm.spi, &address, 1, 100);  // send address
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d48:	6898      	ldr	r0, [r3, #8]
 8000d4a:	1df9      	adds	r1, r7, #7
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f003 fc23 	bl	800459a <HAL_SPI_Transmit>
	HAL_SPI_Receive (bm.spi, data_rec, 1, 100);  // receive 6 bytes data
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	1d39      	adds	r1, r7, #4
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f003 fd58 	bl	8004812 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(bm.port, bm.pin, SET); // end transaction by pulling CSB high
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d68:	8891      	ldrh	r1, [r2, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fb2d 	bl	80023cc <HAL_GPIO_WritePin>

	data_snd[0] = address & ~(1 << 7);  // write address
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	703b      	strb	r3, [r7, #0]
	data_snd[1] = data_rec[0] | 1 << 0; // mode[1:0] 10 - normal mode
 8000d7c:	793b      	ldrb	r3, [r7, #4]
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	707b      	strb	r3, [r7, #1]

	// read mode data from BME280 via SPI
	HAL_GPIO_WritePin(bm.port, bm.pin, RESET); // chip select is active low
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d8c:	8891      	ldrh	r1, [r2, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fb1b 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (bm.spi, data_snd, 2, 1000);  // send address
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <BME280_setMode+0xb0>)
 8000d98:	6898      	ldr	r0, [r3, #8]
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	2202      	movs	r2, #2
 8000da2:	f003 fbfa 	bl	800459a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(bm.port, bm.pin, SET); // end transaction by pulling CSB high
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <BME280_setMode+0xb0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <BME280_setMode+0xb0>)
 8000dac:	8891      	ldrh	r1, [r2, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fb0b 	bl	80023cc <HAL_GPIO_WritePin>

	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000118 	.word	0x20000118

08000dc4 <BME280_setHumdOS>:

}
BME280_setPresOS(){

}
BME280_setHumdOS(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

	uint8_t data_snd[2] = {0};
 8000dca:	2300      	movs	r3, #0
 8000dcc:	80bb      	strh	r3, [r7, #4]
	uint8_t data_rec[2] = {0};
 8000dce:	2300      	movs	r3, #0
 8000dd0:	803b      	strh	r3, [r7, #0]
	data_snd[0] = 0xF2 & ~(1 << 7);  // write address
 8000dd2:	2372      	movs	r3, #114	; 0x72
 8000dd4:	713b      	strb	r3, [r7, #4]
	data_snd[1] = 0b0001;  // oversampling x1
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	717b      	strb	r3, [r7, #5]


	// read mode data from BME280 via SPI
	HAL_GPIO_WritePin(bm.port, bm.pin, RESET); // chip select is active low
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <BME280_setHumdOS+0x50>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <BME280_setHumdOS+0x50>)
 8000de0:	8891      	ldrh	r1, [r2, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 faf1 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (bm.spi, data_snd, 2, 1000);  // send address
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <BME280_setHumdOS+0x50>)
 8000dec:	6898      	ldr	r0, [r3, #8]
 8000dee:	1d39      	adds	r1, r7, #4
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	2202      	movs	r2, #2
 8000df6:	f003 fbd0 	bl	800459a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(bm.port, bm.pin, SET); // end transaction by pulling CSB high
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <BME280_setHumdOS+0x50>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <BME280_setHumdOS+0x50>)
 8000e00:	8891      	ldrh	r1, [r2, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fae1 	bl	80023cc <HAL_GPIO_WritePin>

}
 8000e0a:	bf00      	nop
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000118 	.word	0x20000118

08000e18 <BME280_getHumd>:

uint32_t BME280_getHumd(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t address = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;  // read operation
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	71fb      	strb	r3, [r7, #7]
	address |= 0xFE;  // "humidity" register
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f063 0301 	orn	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t data_rec[2] = {0};
 8000e36:	2300      	movs	r3, #0
 8000e38:	80bb      	strh	r3, [r7, #4]

	// read temp data from BME280 via SPI
	HAL_GPIO_WritePin(bm.port, bm.pin, RESET); // chip select is active low
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e40:	8891      	ldrh	r1, [r2, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fac1 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (bm.spi, &address, 1, 1000);  // send address
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e4c:	6898      	ldr	r0, [r3, #8]
 8000e4e:	1df9      	adds	r1, r7, #7
 8000e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e54:	2201      	movs	r2, #1
 8000e56:	f003 fba0 	bl	800459a <HAL_SPI_Transmit>
	HAL_SPI_Receive (bm.spi, data_rec, 2, 1000);  // receive 6 bytes data
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e5c:	6898      	ldr	r0, [r3, #8]
 8000e5e:	1d39      	adds	r1, r7, #4
 8000e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e64:	2202      	movs	r2, #2
 8000e66:	f003 fcd4 	bl	8004812 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(bm.port, bm.pin, SET); // end transaction by pulling CSB high
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <BME280_getHumd+0x6c>)
 8000e70:	8891      	ldrh	r1, [r2, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 faa9 	bl	80023cc <HAL_GPIO_WritePin>
	return data_rec[0];
 8000e7a:	793b      	ldrb	r3, [r7, #4]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000118 	.word	0x20000118

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fb8f 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f861 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 f983 	bl	80011a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e9a:	f000 f8cb 	bl	8001034 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e9e:	f000 f91b 	bl	80010d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ea2:	f000 f947 	bl	8001134 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000ea6:	f007 fc67 	bl	8008778 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read input voltage
	  HAL_ADC_Start(&hadc1); // start the adc
 8000eaa:	4825      	ldr	r0, [pc, #148]	; (8000f40 <main+0xb8>)
 8000eac:	f000 fc5a 	bl	8001764 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000eb0:	2164      	movs	r1, #100	; 0x64
 8000eb2:	4823      	ldr	r0, [pc, #140]	; (8000f40 <main+0xb8>)
 8000eb4:	f000 fd3d 	bl	8001932 <HAL_ADC_PollForConversion>

	  adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000eb8:	4821      	ldr	r0, [pc, #132]	; (8000f40 <main+0xb8>)
 8000eba:	f000 fdc5 	bl	8001a48 <HAL_ADC_GetValue>
 8000ebe:	6178      	str	r0, [r7, #20]
	  VMEAS = (adc_val/4096.0)*3.2;
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff facb 	bl	800045c <__aeabi_ui2d>
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <main+0xbc>)
 8000ecc:	f7ff fc6a 	bl	80007a4 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	a317      	add	r3, pc, #92	; (adr r3, 8000f38 <main+0xb0>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fb37 	bl	8000550 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  VIN = (252.0*VMEAS)/32.0;
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <main+0xc0>)
 8000ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ef4:	f7ff fb2c 	bl	8000550 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <main+0xc4>)
 8000f06:	f7ff fc4d 	bl	80007a4 <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	e9c7 2300 	strd	r2, r3, [r7]

	  HAL_ADC_Stop(&hadc1); // stop adc
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <main+0xb8>)
 8000f14:	f000 fcda 	bl	80018cc <HAL_ADC_Stop>

	  BME280_Init(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, &hspi1);
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <main+0xc8>)
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <main+0xcc>)
 8000f1e:	f7ff feab 	bl	8000c78 <BME280_Init>
	  BME280_setMode();
 8000f22:	f7ff fef5 	bl	8000d10 <BME280_setMode>
	  BME280_setHumdOS();
 8000f26:	f7ff ff4d 	bl	8000dc4 <BME280_setHumdOS>
	  BME280_getHumd();
 8000f2a:	f7ff ff75 	bl	8000e18 <BME280_getHumd>



	  HAL_Delay (500); // wait for 500ms
 8000f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f32:	f000 fbaf 	bl	8001694 <HAL_Delay>
	  HAL_ADC_Start(&hadc1); // start the adc
 8000f36:	e7b8      	b.n	8000eaa <main+0x22>
 8000f38:	9999999a 	.word	0x9999999a
 8000f3c:	40099999 	.word	0x40099999
 8000f40:	20000124 	.word	0x20000124
 8000f44:	40b00000 	.word	0x40b00000
 8000f48:	406f8000 	.word	0x406f8000
 8000f4c:	40400000 	.word	0x40400000
 8000f50:	200001c0 	.word	0x200001c0
 8000f54:	40020000 	.word	0x40020000

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 f914 	bl	8009194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <SystemClock_Config+0xd4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <SystemClock_Config+0xd4>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <SystemClock_Config+0xd4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <SystemClock_Config+0xd8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <SystemClock_Config+0xd8>)
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SystemClock_Config+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd8:	2348      	movs	r3, #72	; 0x48
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fdcb 	bl	8003b84 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ff4:	f000 f96a 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 f82e 	bl	8004074 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800101e:	f000 f955 	bl	80012cc <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_ADC1_Init+0x98>)
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xa0>)
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_ADC1_Init+0x98>)
 8001080:	2201      	movs	r2, #1
 8001082:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC1_Init+0x98>)
 800108e:	2201      	movs	r2, #1
 8001090:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_ADC1_Init+0x98>)
 8001094:	f000 fb22 	bl	80016dc <HAL_ADC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 f915 	bl	80012cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_ADC1_Init+0x98>)
 80010b4:	f000 fcd6 	bl	8001a64 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010be:	f000 f905 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000124 	.word	0x20000124
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x50>)
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <MX_I2C1_Init+0x54>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x50>)
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_I2C1_Init+0x58>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_I2C1_Init+0x50>)
 8001116:	f001 f973 	bl	8002400 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 f8d4 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000016c 	.word	0x2000016c
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI1_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI1_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI1_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI1_Init+0x64>)
 8001168:	2218      	movs	r2, #24
 800116a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI1_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI1_Init+0x64>)
 8001186:	f003 f97f 	bl	8004488 <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001190:	f000 f89c 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001c0 	.word	0x200001c0
 800119c:	40013000 	.word	0x40013000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a31      	ldr	r2, [pc, #196]	; (80012bc <MX_GPIO_Init+0x11c>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <MX_GPIO_Init+0x11c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <MX_GPIO_Init+0x11c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <MX_GPIO_Init+0x11c>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <MX_GPIO_Init+0x11c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2110      	movs	r1, #16
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x120>)
 800122c:	f001 f8ce 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_GPIO_Init+0x124>)
 8001238:	f001 f8c8 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USRLED_GPIO_Port, USRLED_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <MX_GPIO_Init+0x128>)
 8001242:	f001 f8c3 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124e:	2301      	movs	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4819      	ldr	r0, [pc, #100]	; (80012c0 <MX_GPIO_Init+0x120>)
 800125a:	f000 ff33 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 800125e:	2310      	movs	r3, #16
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <MX_GPIO_Init+0x120>)
 8001276:	f000 ff25 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 800127a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_GPIO_Init+0x124>)
 8001294:	f000 ff16 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRLED_Pin */
  GPIO_InitStruct.Pin = USRLED_Pin;
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USRLED_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <MX_GPIO_Init+0x128>)
 80012b0:	f000 ff08 	bl	80020c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_ADC_MspInit+0x7c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d127      	bne.n	800139a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_ADC_MspInit+0x80>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VMEAS_Pin;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VMEAS_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_ADC_MspInit+0x84>)
 8001396:	f000 fe95 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_I2C_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12c      	bne.n	800142c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001400:	2304      	movs	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <HAL_I2C_MspInit+0x8c>)
 800140c:	f000 fe5a 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_I2C_MspInit+0x88>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_I2C_MspInit+0x88>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_I2C_MspInit+0x88>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400

08001440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_SPI_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 800146c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23e0      	movs	r3, #224	; 0xe0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014aa:	2305      	movs	r3, #5
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_SPI_MspInit+0x8c>)
 80014b6:	f000 fe05 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40013000 	.word	0x40013000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f89a 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <OTG_FS_IRQHandler+0x10>)
 800152a:	f001 f9fd 	bl	8002928 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000efc 	.word	0x20000efc

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001586:	f7ff ffd7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f007 fddf 	bl	800914c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff fc7b 	bl	8000e88 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80015a0:	0800922c 	.word	0x0800922c
  ldr r2, =_sbss
 80015a4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80015a8:	20001628 	.word	0x20001628

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 fd31 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fe78 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fd49 	bl	80020aa <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 fd11 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000218 	.word	0x20000218

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000218 	.word	0x20000218

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e033      	b.n	800175a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe14 	bl	8001328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001722:	f023 0302 	bic.w	r3, r3, #2
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 faba 	bl	8001ca8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
 800174a:	e001      	b.n	8001750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Start+0x1a>
 800177a:	2302      	movs	r3, #2
 800177c:	e097      	b.n	80018ae <HAL_ADC_Start+0x14a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d018      	beq.n	80017c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <HAL_ADC_Start+0x158>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <HAL_ADC_Start+0x15c>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9a      	lsrs	r2, r3, #18
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d15f      	bne.n	8001894 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d106      	bne.n	8001822 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f023 0206 	bic.w	r2, r3, #6
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
 8001820:	e002      	b.n	8001828 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_ADC_Start+0x160>)
 8001832:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d129      	bne.n	80018ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e020      	b.n	80018ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_ADC_Start+0x164>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d11b      	bne.n	80018ac <HAL_ADC_Start+0x148>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d114      	bne.n	80018ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	e00b      	b.n	80018ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f043 0210 	orr.w	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83
 80018c4:	40012300 	.word	0x40012300
 80018c8:	40012000 	.word	0x40012000

080018cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_Stop+0x16>
 80018de:	2302      	movs	r3, #2
 80018e0:	e021      	b.n	8001926 <HAL_ADC_Stop+0x5a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194e:	d113      	bne.n	8001978 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800195a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e063      	b.n	8001a40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001978:	f7ff fe80 	bl	800167c <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800197e:	e021      	b.n	80019c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d01d      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADC_PollForConversion+0x6c>
 800198e:	f7ff fe75 	bl	800167c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d212      	bcs.n	80019c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d00b      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e03d      	b.n	8001a40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d1d6      	bne.n	8001980 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f06f 0212 	mvn.w	r2, #18
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d123      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11f      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d111      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1c>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e105      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x228>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d925      	bls.n	8001adc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68d9      	ldr	r1, [r3, #12]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b1e      	subs	r3, #30
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4403      	add	r3, r0
 8001ace:	3b1e      	subs	r3, #30
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	e022      	b.n	8001b22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	2207      	movs	r2, #7
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4403      	add	r3, r0
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d824      	bhi.n	8001b74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b05      	subs	r3, #5
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	3b05      	subs	r3, #5
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
 8001b72:	e04c      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d824      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b23      	subs	r3, #35	; 0x23
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b23      	subs	r3, #35	; 0x23
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	e023      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b41      	subs	r3, #65	; 0x41
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b41      	subs	r3, #65	; 0x41
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_ADC_ConfigChannel+0x234>)
 8001c10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_ADC_ConfigChannel+0x238>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1cc>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_ADC_ConfigChannel+0x238>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d123      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d003      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x1e6>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b11      	cmp	r3, #17
 8001c48:	d11b      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d111      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_ADC_ConfigChannel+0x23c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <HAL_ADC_ConfigChannel+0x240>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9a      	lsrs	r2, r3, #18
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40012300 	.word	0x40012300
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb0:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <ADC_Init+0x1f0>)
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	021a      	lsls	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <ADC_Init+0x1f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6899      	ldr	r1, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00f      	b.n	8001da6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
 8001dc0:	005a      	lsls	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	035a      	lsls	r2, r3, #13
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e007      	b.n	8001e1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	051a      	lsls	r2, r3, #20
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5e:	025a      	lsls	r2, r3, #9
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	029a      	lsls	r2, r3, #10
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40012300 	.word	0x40012300
 8001e9c:	0f000001 	.word	0x0f000001

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e159      	b.n	8002394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8148 	bne.w	800238e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a2 	beq.w	800238e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x2ec>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <HAL_GPIO_Init+0x2f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x202>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <HAL_GPIO_Init+0x2f4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x1fe>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_GPIO_Init+0x2f8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x1fa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a46      	ldr	r2, [pc, #280]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x1f6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <HAL_GPIO_Init+0x300>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x1f2>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x2ec>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_GPIO_Init+0x304>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f aea2 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e12b      	b.n	800266a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe ffc2 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002464:	f001 fffc 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a81      	ldr	r2, [pc, #516]	; (8002674 <HAL_I2C_Init+0x274>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d807      	bhi.n	8002484 <HAL_I2C_Init+0x84>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_I2C_Init+0x278>)
 8002478:	4293      	cmp	r3, r2
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e006      	b.n	8002492 <HAL_I2C_Init+0x92>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a7d      	ldr	r2, [pc, #500]	; (800267c <HAL_I2C_Init+0x27c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0e7      	b.n	800266a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a78      	ldr	r2, [pc, #480]	; (8002680 <HAL_I2C_Init+0x280>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <HAL_I2C_Init+0x274>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d802      	bhi.n	80024d4 <HAL_I2C_Init+0xd4>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3301      	adds	r3, #1
 80024d2:	e009      	b.n	80024e8 <HAL_I2C_Init+0xe8>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_I2C_Init+0x284>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	3301      	adds	r3, #1
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	495c      	ldr	r1, [pc, #368]	; (8002674 <HAL_I2C_Init+0x274>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d819      	bhi.n	800253c <HAL_I2C_Init+0x13c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e59      	subs	r1, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fbb1 f3f3 	udiv	r3, r1, r3
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800251c:	400b      	ands	r3, r1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_I2C_Init+0x138>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e59      	subs	r1, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002536:	e051      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002538:	2304      	movs	r3, #4
 800253a:	e04f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_I2C_Init+0x168>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e012      	b.n	800258e <HAL_I2C_Init+0x18e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x196>
 8002592:	2301      	movs	r3, #1
 8002594:	e022      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_I2C_Init+0x1bc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e58      	subs	r0, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	440b      	add	r3, r1
 80025ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	0099      	lsls	r1, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6809      	ldr	r1, [r1, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6911      	ldr	r1, [r2, #16]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	000186a0 	.word	0x000186a0
 8002678:	001e847f 	.word	0x001e847f
 800267c:	003d08ff 	.word	0x003d08ff
 8002680:	431bde83 	.word	0x431bde83
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b08f      	sub	sp, #60	; 0x3c
 800268c:	af0a      	add	r7, sp, #40	; 0x28
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e10f      	b.n	80028ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 fa3f 	bl	8008b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fd92 	bl	8005202 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	687e      	ldr	r6, [r7, #4]
 80026e6:	466d      	mov	r5, sp
 80026e8:	f106 0410 	add.w	r4, r6, #16
 80026ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fc:	1d33      	adds	r3, r6, #4
 80026fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f002 fc69 	bl	8004fd8 <USB_CoreInit>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0d0      	b.n	80028ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fd80 	bl	8005224 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e04a      	b.n	80027c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	333d      	adds	r3, #61	; 0x3d
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	333c      	adds	r3, #60	; 0x3c
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	b298      	uxth	r0, r3
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3344      	adds	r3, #68	; 0x44
 8002766:	4602      	mov	r2, r0
 8002768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3340      	adds	r3, #64	; 0x40
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	3348      	adds	r3, #72	; 0x48
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	334c      	adds	r3, #76	; 0x4c
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3354      	adds	r3, #84	; 0x54
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	3301      	adds	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d3af      	bcc.n	800272a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e044      	b.n	800285a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	3301      	adds	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3b5      	bcc.n	80027d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	687e      	ldr	r6, [r7, #4]
 800286c:	466d      	mov	r5, sp
 800286e:	f106 0410 	add.w	r4, r6, #16
 8002872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800287e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002882:	1d33      	adds	r3, r6, #4
 8002884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f002 fd18 	bl	80052bc <USB_DevInit>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00d      	b.n	80028ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fe67 	bl	8006586 <USB_DevDisconnect>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_PCD_Start+0x1c>
 80028da:	2302      	movs	r3, #2
 80028dc:	e020      	b.n	8002920 <HAL_PCD_Start+0x5e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d109      	bne.n	8002902 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d005      	beq.n	8002902 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f002 fc6a 	bl	80051e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fe17 	bl	8006544 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b08d      	sub	sp, #52	; 0x34
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fed5 	bl	80066ee <USB_GetMode>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 848a 	bne.w	8003260 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fe39 	bl	80065c8 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8480 	beq.w	800325e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fe26 	bl	80065c8 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d107      	bne.n	8002996 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 0202 	and.w	r2, r2, #2
 8002994:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fe14 	bl	80065c8 <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d161      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d124      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d035      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a38      	ldr	r0, [r7, #32]
 8002a06:	f003 fc4b 	bl	80062a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a16:	441a      	add	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	441a      	add	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
 8002a2e:	e016      	b.n	8002a5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d110      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a42:	2208      	movs	r2, #8
 8002a44:	4619      	mov	r1, r3
 8002a46:	6a38      	ldr	r0, [r7, #32]
 8002a48:	f003 fc2a 	bl	80062a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a58:	441a      	add	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fda8 	bl	80065c8 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a82:	f040 80a7 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fdad 	bl	80065ee <USB_ReadDevAllOutEpInterrupt>
 8002a94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a96:	e099      	b.n	8002bcc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 808e 	beq.w	8002bc0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fdd1 	bl	8006656 <USB_ReadDevOutEPInterrupt>
 8002ab4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fec3 	bl	8003860 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af0:	461a      	mov	r2, r3
 8002af2:	2308      	movs	r3, #8
 8002af4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 ff99 	bl	8003a30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	2310      	movs	r3, #16
 8002b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d030      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d109      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	78db      	ldrb	r3, [r3, #3]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f006 f8de 	bl	8008d30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	2302      	movs	r3, #2
 8002b84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bbe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f af62 	bne.w	8002a98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fcf5 	bl	80065c8 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be8:	f040 80db 	bne.w	8002da2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fd16 	bl	8006622 <USB_ReadDevAllInEpInterrupt>
 8002bf6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bfc:	e0cd      	b.n	8002d9a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80c2 	beq.w	8002d8e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd3c 	bl	8006692 <USB_ReadDevInEPInterrupt>
 8002c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d057      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c46:	4013      	ands	r3, r2
 8002c48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d132      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334c      	adds	r3, #76	; 0x4c
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4403      	add	r3, r0
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4419      	add	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4403      	add	r3, r0
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3354      	adds	r3, #84	; 0x54
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	f003 fd43 	bl	8006750 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f005 ffb2 	bl	8008c3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cec:	461a      	mov	r2, r3
 8002cee:	2308      	movs	r3, #8
 8002cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d24:	461a      	mov	r2, r3
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d36:	6a38      	ldr	r0, [r7, #32]
 8002d38:	f002 fc24 	bl	8005584 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3338      	adds	r3, #56	; 0x38
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	78db      	ldrb	r3, [r3, #3]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f005 fff5 	bl	8008d54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d76:	461a      	mov	r2, r3
 8002d78:	2302      	movs	r3, #2
 8002d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fcdb 	bl	8003744 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	3301      	adds	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f af2e 	bne.w	8002bfe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fc0e 	bl	80065c8 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db6:	d122      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fec3 	bl	8003b6c <HAL_PCDEx_LPM_Callback>
 8002de6:	e002      	b.n	8002dee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f005 ff93 	bl	8008d14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fbe0 	bl	80065c8 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e12:	d112      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f005 ff4f 	bl	8008cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fbc2 	bl	80065c8 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	f040 80b7 	bne.w	8002fc0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fb89 	bl	8005584 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e76:	e046      	b.n	8002f06 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e84:	461a      	mov	r2, r3
 8002e86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9c:	0151      	lsls	r1, r2, #5
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	440a      	add	r2, r1
 8002ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eaa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ebe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed0:	0151      	lsls	r1, r2, #5
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ede:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef0:	0151      	lsls	r1, r2, #5
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002efa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002efe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	3301      	adds	r3, #1
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3b3      	bcc.n	8002e78 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3c:	f043 030b 	orr.w	r3, r3, #11
 8002f40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f52:	f043 030b 	orr.w	r3, r3, #11
 8002f56:	6453      	str	r3, [r2, #68]	; 0x44
 8002f58:	e015      	b.n	8002f86 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f80:	f043 030b 	orr.w	r3, r3, #11
 8002f84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f003 fbd0 	bl	8006750 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 faff 	bl	80065c8 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd4:	d124      	bne.n	8003020 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fb95 	bl	800670a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fb4a 	bl	800567e <USB_GetDevSpeed>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681c      	ldr	r4, [r3, #0]
 8002ff6:	f001 fa27 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8002ffa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	4620      	mov	r0, r4
 8003006:	f002 f849 	bl	800509c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f005 fe3d 	bl	8008c8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800301e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 facf 	bl	80065c8 <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d10a      	bne.n	800304a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f005 fe1a 	bl	8008c6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f002 0208 	and.w	r2, r2, #8
 8003048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 faba 	bl	80065c8 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d122      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800306a:	2301      	movs	r3, #1
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e014      	b.n	800309a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fb27 	bl	80036e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	3301      	adds	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3e5      	bcc.n	8003070 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fa8d 	bl	80065c8 <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b8:	d13b      	bne.n	8003132 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ba:	2301      	movs	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	e02b      	b.n	8003118 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3340      	adds	r3, #64	; 0x40
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da12      	bge.n	8003112 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	333f      	adds	r3, #63	; 0x3f
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fae8 	bl	80036e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	3301      	adds	r3, #1
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	429a      	cmp	r2, r3
 8003120:	d3ce      	bcc.n	80030c0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fa46 	bl	80065c8 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003146:	d155      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e045      	b.n	80031da <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d12e      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003176:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	da2b      	bge.n	80031d4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003188:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318c:	429a      	cmp	r2, r3
 800318e:	d121      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d0:	6053      	str	r3, [r2, #4]
            break;
 80031d2:	e007      	b.n	80031e4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	3301      	adds	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3b4      	bcc.n	800314e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f9e5 	bl	80065c8 <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d10a      	bne.n	8003220 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f005 fdb4 	bl	8008d78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800321e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 f9cf 	bl	80065c8 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d115      	bne.n	8003260 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 fda4 	bl	8008d94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	e000      	b.n	8003260 <HAL_PCD_IRQHandler+0x938>
      return;
 800325e:	bf00      	nop
    }
  }
}
 8003260:	3734      	adds	r7, #52	; 0x34
 8003262:	46bd      	mov	sp, r7
 8003264:	bd90      	pop	{r4, r7, pc}

08003266 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_PCD_SetAddress+0x1a>
 800327c:	2302      	movs	r3, #2
 800327e:	e013      	b.n	80032a8 <HAL_PCD_SetAddress+0x42>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 f92d 	bl	80064f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	460b      	mov	r3, r1
 80032c4:	803b      	strh	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da0f      	bge.n	80032f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	705a      	strb	r2, [r3, #1]
 80032f4:	e00f      	b.n	8003316 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003322:	883a      	ldrh	r2, [r7, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	78ba      	ldrb	r2, [r7, #2]
 800332c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003340:	78bb      	ldrb	r3, [r7, #2]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d102      	bne.n	800334c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_Open+0xaa>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_Open+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 f9ad 	bl	80056c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003376:	7afb      	ldrb	r3, [r7, #11]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800338c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	da0f      	bge.n	80033b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 020f 	and.w	r2, r3, #15
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	705a      	strb	r2, [r3, #1]
 80033b2:	e00f      	b.n	80033d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_PCD_EP_Close+0x6e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e00e      	b.n	800340c <HAL_PCD_EP_Close+0x8c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68f9      	ldr	r1, [r7, #12]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 f9eb 	bl	80057d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	460b      	mov	r3, r1
 8003422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003470:	7afb      	ldrb	r3, [r7, #11]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	f002 fcca 	bl	8005e20 <USB_EP0StartXfer>
 800348c:	e008      	b.n	80034a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6979      	ldr	r1, [r7, #20]
 800349c:	f002 fa78 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034cc:	681b      	ldr	r3, [r3, #0]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	460b      	mov	r3, r1
 80034e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	3338      	adds	r3, #56	; 0x38
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2201      	movs	r2, #1
 8003518:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	f002 fc68 	bl	8005e20 <USB_EP0StartXfer>
 8003550:	e008      	b.n	8003564 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	f002 fa16 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 020f 	and.w	r2, r3, #15
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d901      	bls.n	800358c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e050      	b.n	800362e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800358c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da0f      	bge.n	80035b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	3338      	adds	r3, #56	; 0x38
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	705a      	strb	r2, [r3, #1]
 80035b2:	e00d      	b.n	80035d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_EP_SetStall+0x82>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e01e      	b.n	800362e <HAL_PCD_EP_SetStall+0xc0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fea6 	bl	8006350 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	b2d9      	uxtb	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800361e:	461a      	mov	r2, r3
 8003620:	f003 f896 	bl	8006750 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d901      	bls.n	8003654 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e042      	b.n	80036da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da0f      	bge.n	800367c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3338      	adds	r3, #56	; 0x38
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	705a      	strb	r2, [r3, #1]
 800367a:	e00f      	b.n	800369c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_EP_ClrStall+0x86>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e00e      	b.n	80036da <HAL_PCD_EP_ClrStall+0xa4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 feae 	bl	800642c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da0c      	bge.n	8003710 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3338      	adds	r3, #56	; 0x38
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	3304      	adds	r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e00c      	b.n	800372a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fccd 	bl	80060d0 <USB_EPStopXfer>
 8003736:	4603      	mov	r3, r0
 8003738:	72fb      	strb	r3, [r7, #11]

  return ret;
 800373a:	7afb      	ldrb	r3, [r7, #11]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	3338      	adds	r3, #56	; 0x38
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d901      	bls.n	800377c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e06c      	b.n	8003856 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	429a      	cmp	r2, r3
 8003790:	d902      	bls.n	8003798 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3303      	adds	r3, #3
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037a0:	e02b      	b.n	80037fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d902      	bls.n	80037be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3303      	adds	r3, #3
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6919      	ldr	r1, [r3, #16]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4603      	mov	r3, r0
 80037dc:	6978      	ldr	r0, [r7, #20]
 80037de:	f002 fd21 	bl	8006224 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	b29b      	uxth	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	429a      	cmp	r2, r3
 800380e:	d809      	bhi.n	8003824 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003818:	429a      	cmp	r2, r3
 800381a:	d203      	bcs.n	8003824 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1be      	bne.n	80037a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d811      	bhi.n	8003854 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	2201      	movs	r2, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	43db      	mvns	r3, r3
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003850:	4013      	ands	r3, r2
 8003852:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	333c      	adds	r3, #60	; 0x3c
 8003878:	3304      	adds	r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d17b      	bne.n	800398e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	f240 80b9 	bls.w	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80b3 	beq.w	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c8:	6093      	str	r3, [r2, #8]
 80038ca:	e0a7      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2320      	movs	r3, #32
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	e098      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 8093 	bne.w	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	4a4b      	ldr	r2, [pc, #300]	; (8003a28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d90f      	bls.n	800391e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	e07e      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	440b      	add	r3, r1
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d114      	bne.n	8003980 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003968:	461a      	mov	r2, r3
 800396a:	2101      	movs	r1, #1
 800396c:	f002 fef0 	bl	8006750 <USB_EP0_OutStart>
 8003970:	e006      	b.n	8003980 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f005 f93c 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
 800398c:	e046      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d124      	bne.n	80039e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	e032      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	2320      	movs	r3, #32
 80039d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f005 f913 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
 80039de:	e01d      	b.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d114      	bne.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f002 fea0 	bl	8006750 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f005 f8f4 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	4f54300a 	.word	0x4f54300a
 8003a2c:	4f54310a 	.word	0x4f54310a

08003a30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	333c      	adds	r3, #60	; 0x3c
 8003a48:	3304      	adds	r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d90e      	bls.n	8003a84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f005 f8ab 	bl	8008be0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d90c      	bls.n	8003aac <PCD_EP_OutSetupPacket_int+0x7c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f002 fe52 	bl	8006750 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	4f54300a 	.word	0x4f54300a

08003abc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ada:	883b      	ldrh	r3, [r7, #0]
 8003adc:	0419      	lsls	r1, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae8:	e028      	b.n	8003b3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4413      	add	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e00d      	b.n	8003b1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	3340      	adds	r3, #64	; 0x40
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4413      	add	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	3301      	adds	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3ec      	bcc.n	8003afe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b24:	883b      	ldrh	r3, [r7, #0]
 8003b26:	0418      	lsls	r0, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6819      	ldr	r1, [r3, #0]
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4302      	orrs	r2, r0
 8003b34:	3340      	adds	r3, #64	; 0x40
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e267      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b85      	ldr	r3, [pc, #532]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b82      	ldr	r3, [pc, #520]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d157      	bne.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e242      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x74>
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x98>
 8003c02:	4b70      	ldr	r3, [pc, #448]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6f      	ldr	r2, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6c      	ldr	r2, [pc, #432]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a68      	ldr	r2, [pc, #416]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a65      	ldr	r2, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fd1e 	bl	800167c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd fd1a 	bl	800167c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e207      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd fd0a 	bl	800167c <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd fd06 	bl	800167c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1f3      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c7      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCC_OscConfig+0x244>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd fcbf 	bl	800167c <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fd fcbb 	bl	800167c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a8      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4925      	ldr	r1, [pc, #148]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x244>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fc9e 	bl	800167c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fd fc9a 	bl	800167c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e187      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d036      	beq.n	8003ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_RCC_OscConfig+0x248>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fd fc7e 	bl	800167c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fd fc7a 	bl	800167c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e167      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x200>
 8003da2:	e01b      	b.n	8003ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_OscConfig+0x248>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fd fc67 	bl	800167c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fd fc63 	bl	800167c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d907      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e150      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470000 	.word	0x42470000
 8003dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ea      	bne.n	8003db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8097 	beq.w	8003f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b81      	ldr	r3, [pc, #516]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b77      	ldr	r3, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b74      	ldr	r3, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fc23 	bl	800167c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fd fc1f 	bl	800167c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e10c      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
 8003e60:	4b64      	ldr	r3, [pc, #400]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a63      	ldr	r2, [pc, #396]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x324>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x30c>
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5e      	ldr	r2, [pc, #376]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	4b5c      	ldr	r3, [pc, #368]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5b      	ldr	r2, [pc, #364]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x324>
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a54      	ldr	r2, [pc, #336]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0304 	bic.w	r3, r3, #4
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fd fbe4 	bl	800167c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fbe0 	bl	800167c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0cb      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0ee      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x334>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fd fbce 	bl	800167c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fd fbca 	bl	800167c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0b5      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efa:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a38      	ldr	r2, [pc, #224]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80a1 	beq.w	8004064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d05c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d141      	bne.n	8003fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fb9e 	bl	800167c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd fb9a 	bl	800167c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e087      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	491b      	ldr	r1, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fd fb73 	bl	800167c <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fd fb6f 	bl	800167c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e05c      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x416>
 8003fb8:	e054      	b.n	8004064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fb5c 	bl	800167c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd fb58 	bl	800167c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e045      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x444>
 8003fe6:	e03d      	b.n	8004064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e038      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x4ec>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d028      	beq.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d121      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d11a      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004038:	4293      	cmp	r3, r2
 800403a:	d111      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd fa8a 	bl	800167c <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fa86 	bl	800167c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	490a      	ldr	r1, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5ccb      	ldrb	r3, [r1, r3]
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f9ea 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	08009204 	.word	0x08009204
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b094      	sub	sp, #80	; 0x50
 8004246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
 800424c:	2300      	movs	r3, #0
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004250:	2300      	movs	r3, #0
 8004252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004258:	4b79      	ldr	r3, [pc, #484]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d00d      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x40>
 8004264:	2b08      	cmp	r3, #8
 8004266:	f200 80e1 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x1ec>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x34>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x3a>
 8004272:	e0db      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b73      	ldr	r3, [pc, #460]	; (8004444 <HAL_RCC_GetSysClockFreq+0x204>)
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004278:	e0db      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427a:	4b72      	ldr	r3, [pc, #456]	; (8004444 <HAL_RCC_GetSysClockFreq+0x204>)
 800427c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427e:	e0d8      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428a:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d063      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	2200      	movs	r2, #0
 800429e:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30
 80042aa:	2300      	movs	r3, #0
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	f04f 0000 	mov.w	r0, #0
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	0159      	lsls	r1, r3, #5
 80042c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c4:	0150      	lsls	r0, r2, #5
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4621      	mov	r1, r4
 80042cc:	1a51      	subs	r1, r2, r1
 80042ce:	6139      	str	r1, [r7, #16]
 80042d0:	4629      	mov	r1, r5
 80042d2:	eb63 0301 	sbc.w	r3, r3, r1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e4:	4659      	mov	r1, fp
 80042e6:	018b      	lsls	r3, r1, #6
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ee:	4651      	mov	r1, sl
 80042f0:	018a      	lsls	r2, r1, #6
 80042f2:	4651      	mov	r1, sl
 80042f4:	ebb2 0801 	subs.w	r8, r2, r1
 80042f8:	4659      	mov	r1, fp
 80042fa:	eb63 0901 	sbc.w	r9, r3, r1
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800430a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004312:	4690      	mov	r8, r2
 8004314:	4699      	mov	r9, r3
 8004316:	4623      	mov	r3, r4
 8004318:	eb18 0303 	adds.w	r3, r8, r3
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	462b      	mov	r3, r5
 8004320:	eb49 0303 	adc.w	r3, r9, r3
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004332:	4629      	mov	r1, r5
 8004334:	028b      	lsls	r3, r1, #10
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800433c:	4621      	mov	r1, r4
 800433e:	028a      	lsls	r2, r1, #10
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	2200      	movs	r2, #0
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
 800434a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800434c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004350:	f7fc fb10 	bl	8000974 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435c:	e058      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	2200      	movs	r2, #0
 8004366:	4618      	mov	r0, r3
 8004368:	4611      	mov	r1, r2
 800436a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	2300      	movs	r3, #0
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	f04f 0000 	mov.w	r0, #0
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	0159      	lsls	r1, r3, #5
 8004386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800438a:	0150      	lsls	r0, r2, #5
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4641      	mov	r1, r8
 8004392:	ebb2 0a01 	subs.w	sl, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb63 0b01 	sbc.w	fp, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043b0:	ebb2 040a 	subs.w	r4, r2, sl
 80043b4:	eb63 050b 	sbc.w	r5, r3, fp
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	00eb      	lsls	r3, r5, #3
 80043c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c6:	00e2      	lsls	r2, r4, #3
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	4643      	mov	r3, r8
 80043ce:	18e3      	adds	r3, r4, r3
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	464b      	mov	r3, r9
 80043d4:	eb45 0303 	adc.w	r3, r5, r3
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e6:	4629      	mov	r1, r5
 80043e8:	028b      	lsls	r3, r1, #10
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f0:	4621      	mov	r1, r4
 80043f2:	028a      	lsls	r2, r1, #10
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	2200      	movs	r2, #0
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	61fa      	str	r2, [r7, #28]
 8004400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004404:	f7fc fab6 	bl	8000974 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_GetSysClockFreq+0x200>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	3301      	adds	r3, #1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetSysClockFreq+0x204>)
 800442e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004434:	4618      	mov	r0, r3
 8004436:	3750      	adds	r7, #80	; 0x50
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	00f42400 	.word	0x00f42400

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff0 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	08009214 	.word	0x08009214

08004488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07b      	b.n	8004592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044aa:	d009      	beq.n	80044c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc ffb0 	bl	8001440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	ea42 0103 	orr.w	r1, r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0104 	and.w	r1, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0210 	and.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b088      	sub	sp, #32
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_SPI_Transmit+0x22>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e126      	b.n	800480a <HAL_SPI_Transmit+0x270>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c4:	f7fd f85a 	bl	800167c <HAL_GetTick>
 80045c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045de:	e10b      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Transmit+0x52>
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f0:	e102      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004638:	d10f      	bne.n	800465a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d007      	beq.n	8004678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d14b      	bne.n	800471a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_SPI_Transmit+0xf6>
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d13e      	bne.n	800470e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046b4:	e02b      	b.n	800470e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d112      	bne.n	80046ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e8:	e011      	b.n	800470e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ea:	f7fc ffc7 	bl	800167c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_Transmit+0x168>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x16e>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800470c:	e074      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ce      	bne.n	80046b6 <HAL_SPI_Transmit+0x11c>
 8004718:	e04c      	b.n	80047b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Transmit+0x18e>
 8004722:	8afb      	ldrh	r3, [r7, #22]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d140      	bne.n	80047aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800474e:	e02c      	b.n	80047aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d113      	bne.n	8004786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	86da      	strh	r2, [r3, #54]	; 0x36
 8004784:	e011      	b.n	80047aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fc ff79 	bl	800167c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Transmit+0x204>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x20a>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a8:	e026      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1cd      	bne.n	8004750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fbcb 	bl	8004f54 <SPI_EndRxTxTransaction>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e000      	b.n	80047f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004808:	7ffb      	ldrb	r3, [r7, #31]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b088      	sub	sp, #32
 8004816:	af02      	add	r7, sp, #8
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d112      	bne.n	8004856 <HAL_SPI_Receive+0x44>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10e      	bne.n	8004856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2204      	movs	r2, #4
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f8f1 	bl	8004a34 <HAL_SPI_TransmitReceive>
 8004852:	4603      	mov	r3, r0
 8004854:	e0ea      	b.n	8004a2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_SPI_Receive+0x52>
 8004860:	2302      	movs	r3, #2
 8004862:	e0e3      	b.n	8004a2c <HAL_SPI_Receive+0x21a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486c:	f7fc ff06 	bl	800167c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d002      	beq.n	8004884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800487e:	2302      	movs	r3, #2
 8004880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004882:	e0ca      	b.n	8004a1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Receive+0x7e>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004894:	e0c1      	b.n	8004a1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2204      	movs	r2, #4
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048dc:	d10f      	bne.n	80048fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d007      	beq.n	800491c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d162      	bne.n	80049ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004924:	e02e      	b.n	8004984 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d115      	bne.n	8004960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f103 020c 	add.w	r2, r3, #12
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495e:	e011      	b.n	8004984 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004960:	f7fc fe8c 	bl	800167c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d803      	bhi.n	8004978 <HAL_SPI_Receive+0x166>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d102      	bne.n	800497e <HAL_SPI_Receive+0x16c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004982:	e04a      	b.n	8004a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1cb      	bne.n	8004926 <HAL_SPI_Receive+0x114>
 800498e:	e031      	b.n	80049f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d113      	bne.n	80049c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	b292      	uxth	r2, r2
 80049aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c4:	e011      	b.n	80049ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c6:	f7fc fe59 	bl	800167c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d803      	bhi.n	80049de <HAL_SPI_Receive+0x1cc>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Receive+0x1d2>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049e8:	e017      	b.n	8004a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cd      	bne.n	8004990 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fa45 	bl	8004e88 <SPI_EndRxTransaction>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
 8004a16:	e000      	b.n	8004a1a <HAL_SPI_Receive+0x208>
  }

error :
 8004a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a42:	2301      	movs	r3, #1
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_SPI_TransmitReceive+0x26>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e18a      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x33c>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a62:	f7fc fe0b 	bl	800167c <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d00f      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x70>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8a:	d107      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x68>
 8004a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d003      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aa2:	e15b      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x82>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x82>
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004abc:	e14e      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d003      	beq.n	8004ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2205      	movs	r2, #5
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	887a      	ldrh	r2, [r7, #2]
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	887a      	ldrh	r2, [r7, #2]
 8004afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d007      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d178      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x10a>
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d166      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b62:	e053      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d11b      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x176>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x176>
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d113      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d119      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x1b8>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be8:	2301      	movs	r3, #1
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bec:	f7fc fd46 	bl	800167c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d807      	bhi.n	8004c0c <HAL_SPI_TransmitReceive+0x1d8>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d003      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c0a:	e0a7      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1a6      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x130>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1a1      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x130>
 8004c20:	e07c      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x1fc>
 8004c2a:	8b7b      	ldrh	r3, [r7, #26]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d16b      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	e057      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d11c      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x26c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x26c>
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d114      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d119      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x2ae>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d014      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ce2:	f7fc fccb 	bl	800167c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d803      	bhi.n	8004cfa <HAL_SPI_TransmitReceive+0x2c6>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d102      	bne.n	8004d00 <HAL_SPI_TransmitReceive+0x2cc>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d06:	e029      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1a2      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x224>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d19d      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f917 	bl	8004f54 <SPI_EndRxTxTransaction>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d38:	e010      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	e000      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3730      	adds	r7, #48	; 0x30
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d88:	f7fc fc78 	bl	800167c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4413      	add	r3, r2
 8004d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d98:	f7fc fc70 	bl	800167c <HAL_GetTick>
 8004d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	0d1b      	lsrs	r3, r3, #20
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dae:	e054      	b.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d050      	beq.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004db8:	f7fc fc60 	bl	800167c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d902      	bls.n	8004dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d13d      	bne.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d111      	bne.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df0:	d004      	beq.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfa:	d107      	bne.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d10f      	bne.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e017      	b.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d19b      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000000 	.word	0x20000000

08004e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9c:	d111      	bne.n	8004ec2 <SPI_EndRxTransaction+0x3a>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	d004      	beq.n	8004eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d107      	bne.n	8004ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d12a      	bne.n	8004f22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed4:	d012      	beq.n	8004efc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff ff49 	bl	8004d78 <SPI_WaitFlagStateUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02d      	beq.n	8004f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e026      	b.n	8004f4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2101      	movs	r1, #1
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff36 	bl	8004d78 <SPI_WaitFlagStateUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01a      	beq.n	8004f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e013      	b.n	8004f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff23 	bl	8004d78 <SPI_WaitFlagStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e000      	b.n	8004f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <SPI_EndRxTxTransaction+0x7c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <SPI_EndRxTxTransaction+0x80>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	0d5b      	lsrs	r3, r3, #21
 8004f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7e:	d112      	bne.n	8004fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff fef4 	bl	8004d78 <SPI_WaitFlagStateUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00f      	b.n	8004fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d0f2      	beq.n	8004fa6 <SPI_EndRxTxTransaction+0x52>
 8004fc0:	e000      	b.n	8004fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004fc2:	bf00      	nop
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000000 	.word	0x20000000
 8004fd4:	165e9f81 	.word	0x165e9f81

08004fd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd8:	b084      	sub	sp, #16
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	f107 001c 	add.w	r0, r7, #28
 8004fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d122      	bne.n	8005036 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d105      	bne.n	800502a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fbee 	bl	800680c <USB_CoreReset>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e01a      	b.n	800506c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fbe2 	bl	800680c <USB_CoreReset>
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
 800505e:	e005      	b.n	800506c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10b      	bne.n	800508a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f043 0206 	orr.w	r2, r3, #6
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005096:	b004      	add	sp, #16
 8005098:	4770      	bx	lr
	...

0800509c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d165      	bne.n	800517c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <USB_SetTurnaroundTime+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d906      	bls.n	80050c6 <USB_SetTurnaroundTime+0x2a>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a40      	ldr	r2, [pc, #256]	; (80051bc <USB_SetTurnaroundTime+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d202      	bcs.n	80050c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050c0:	230f      	movs	r3, #15
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e062      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a3c      	ldr	r2, [pc, #240]	; (80051bc <USB_SetTurnaroundTime+0x120>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d306      	bcc.n	80050dc <USB_SetTurnaroundTime+0x40>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a3b      	ldr	r2, [pc, #236]	; (80051c0 <USB_SetTurnaroundTime+0x124>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d202      	bcs.n	80050dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050d6:	230e      	movs	r3, #14
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e057      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <USB_SetTurnaroundTime+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d306      	bcc.n	80050f2 <USB_SetTurnaroundTime+0x56>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <USB_SetTurnaroundTime+0x128>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d202      	bcs.n	80050f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050ec:	230d      	movs	r3, #13
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e04c      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <USB_SetTurnaroundTime+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d306      	bcc.n	8005108 <USB_SetTurnaroundTime+0x6c>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a32      	ldr	r2, [pc, #200]	; (80051c8 <USB_SetTurnaroundTime+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d802      	bhi.n	8005108 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005102:	230c      	movs	r3, #12
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e041      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <USB_SetTurnaroundTime+0x12c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d906      	bls.n	800511e <USB_SetTurnaroundTime+0x82>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <USB_SetTurnaroundTime+0x130>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d802      	bhi.n	800511e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005118:	230b      	movs	r3, #11
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e036      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <USB_SetTurnaroundTime+0x130>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d906      	bls.n	8005134 <USB_SetTurnaroundTime+0x98>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <USB_SetTurnaroundTime+0x134>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d802      	bhi.n	8005134 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800512e:	230a      	movs	r3, #10
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e02b      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a26      	ldr	r2, [pc, #152]	; (80051d0 <USB_SetTurnaroundTime+0x134>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d906      	bls.n	800514a <USB_SetTurnaroundTime+0xae>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <USB_SetTurnaroundTime+0x138>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d202      	bcs.n	800514a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005144:	2309      	movs	r3, #9
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e020      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <USB_SetTurnaroundTime+0x138>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d306      	bcc.n	8005160 <USB_SetTurnaroundTime+0xc4>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <USB_SetTurnaroundTime+0x13c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d802      	bhi.n	8005160 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800515a:	2308      	movs	r3, #8
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e015      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <USB_SetTurnaroundTime+0x13c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d906      	bls.n	8005176 <USB_SetTurnaroundTime+0xda>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <USB_SetTurnaroundTime+0x140>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d202      	bcs.n	8005176 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005170:	2307      	movs	r3, #7
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e00a      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005176:	2306      	movs	r3, #6
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e007      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005182:	2309      	movs	r3, #9
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e001      	b.n	800518c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005188:	2309      	movs	r3, #9
 800518a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	00d8acbf 	.word	0x00d8acbf
 80051bc:	00e4e1c0 	.word	0x00e4e1c0
 80051c0:	00f42400 	.word	0x00f42400
 80051c4:	01067380 	.word	0x01067380
 80051c8:	011a499f 	.word	0x011a499f
 80051cc:	01312cff 	.word	0x01312cff
 80051d0:	014ca43f 	.word	0x014ca43f
 80051d4:	016e3600 	.word	0x016e3600
 80051d8:	01a6ab1f 	.word	0x01a6ab1f
 80051dc:	01e84800 	.word	0x01e84800

080051e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f043 0201 	orr.w	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d115      	bne.n	8005272 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005252:	2001      	movs	r0, #1
 8005254:	f7fc fa1e 	bl	8001694 <HAL_Delay>
      ms++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fa45 	bl	80066ee <USB_GetMode>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d01e      	beq.n	80052a8 <USB_SetCurrentMode+0x84>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b31      	cmp	r3, #49	; 0x31
 800526e:	d9f0      	bls.n	8005252 <USB_SetCurrentMode+0x2e>
 8005270:	e01a      	b.n	80052a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d115      	bne.n	80052a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005284:	2001      	movs	r0, #1
 8005286:	f7fc fa05 	bl	8001694 <HAL_Delay>
      ms++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fa2c 	bl	80066ee <USB_GetMode>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <USB_SetCurrentMode+0x84>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b31      	cmp	r3, #49	; 0x31
 80052a0:	d9f0      	bls.n	8005284 <USB_SetCurrentMode+0x60>
 80052a2:	e001      	b.n	80052a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e005      	b.n	80052b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b32      	cmp	r3, #50	; 0x32
 80052ac:	d101      	bne.n	80052b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052bc:	b084      	sub	sp, #16
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e009      	b.n	80052f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3340      	adds	r3, #64	; 0x40
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	3301      	adds	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0e      	cmp	r3, #14
 80052f4:	d9f2      	bls.n	80052dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d11c      	bne.n	8005336 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
 8005334:	e00b      	b.n	800534e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005354:	461a      	mov	r2, r3
 8005356:	2300      	movs	r3, #0
 8005358:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	4619      	mov	r1, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	461a      	mov	r2, r3
 800536a:	680b      	ldr	r3, [r1, #0]
 800536c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10c      	bne.n	800538e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800537a:	2100      	movs	r1, #0
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f965 	bl	800564c <USB_SetDevSpeed>
 8005382:	e008      	b.n	8005396 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005384:	2101      	movs	r1, #1
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f960 	bl	800564c <USB_SetDevSpeed>
 800538c:	e003      	b.n	8005396 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800538e:	2103      	movs	r1, #3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f95b 	bl	800564c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005396:	2110      	movs	r1, #16
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8f3 	bl	8005584 <USB_FlushTxFifo>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f91f 	bl	80055ec <USB_FlushRxFifo>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	461a      	mov	r2, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e043      	b.n	800546a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d118      	bne.n	800542c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e013      	b.n	800543e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	461a      	mov	r2, r3
 8005424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e008      	b.n	800543e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	461a      	mov	r2, r3
 800543a:	2300      	movs	r3, #0
 800543c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544a:	461a      	mov	r2, r3
 800544c:	2300      	movs	r3, #0
 800544e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005462:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3301      	adds	r3, #1
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3b7      	bcc.n	80053e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	e043      	b.n	8005500 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800548a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548e:	d118      	bne.n	80054c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	461a      	mov	r2, r3
 80054a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e013      	b.n	80054d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	461a      	mov	r2, r3
 80054ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e008      	b.n	80054d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	461a      	mov	r2, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3301      	adds	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	429a      	cmp	r2, r3
 8005506:	d3b7      	bcc.n	8005478 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005528:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f043 0210 	orr.w	r2, r3, #16
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <USB_DevInit+0x2c4>)
 8005542:	4313      	orrs	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f043 0208 	orr.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800555a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d107      	bne.n	8005570 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557c:	b004      	add	sp, #16
 800557e:	4770      	bx	lr
 8005580:	803c3800 	.word	0x803c3800

08005584 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <USB_FlushTxFifo+0x64>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e01b      	b.n	80055dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	daf2      	bge.n	8005592 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	019b      	lsls	r3, r3, #6
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <USB_FlushTxFifo+0x64>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e006      	b.n	80055dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d0f0      	beq.n	80055bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	00030d40 	.word	0x00030d40

080055ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <USB_FlushRxFifo+0x5c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e018      	b.n	800563c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	daf2      	bge.n	80055f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2210      	movs	r2, #16
 800561a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <USB_FlushRxFifo+0x5c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e006      	b.n	800563c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d0f0      	beq.n	800561c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00030d40 	.word	0x00030d40

0800564c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b087      	sub	sp, #28
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0306 	and.w	r3, r3, #6
 8005696:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
 80056a2:	e00a      	b.n	80056ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d002      	beq.n	80056b0 <USB_GetDevSpeed+0x32>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d102      	bne.n	80056b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056b0:	2302      	movs	r3, #2
 80056b2:	75fb      	strb	r3, [r7, #23]
 80056b4:	e001      	b.n	80056ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056b6:	230f      	movs	r3, #15
 80056b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13a      	bne.n	800575a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005702:	4313      	orrs	r3, r2
 8005704:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d155      	bne.n	80057c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	791b      	ldrb	r3, [r3, #4]
 8005736:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005738:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005740:	4313      	orrs	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e036      	b.n	80057c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005778:	4313      	orrs	r3, r2
 800577a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11a      	bne.n	80057c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	791b      	ldrb	r3, [r3, #4]
 80057ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ae:	430b      	orrs	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d161      	bne.n	80058b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580a:	d11f      	bne.n	800584c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800582a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800584a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800586c:	4013      	ands	r3, r2
 800586e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	2101      	movs	r1, #1
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	b29b      	uxth	r3, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005890:	4013      	ands	r3, r2
 8005892:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	0159      	lsls	r1, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	440b      	add	r3, r1
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	4619      	mov	r1, r3
 80058b0:	4b35      	ldr	r3, [pc, #212]	; (8005988 <USB_DeactivateEndpoint+0x1b0>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
 80058b6:	e060      	b.n	800597a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ce:	d11f      	bne.n	8005910 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800590e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	2101      	movs	r1, #1
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	43db      	mvns	r3, r3
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005930:	4013      	ands	r3, r2
 8005932:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	43db      	mvns	r3, r3
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4013      	ands	r3, r2
 8005956:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	0159      	lsls	r1, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	440b      	add	r3, r1
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	4619      	mov	r1, r3
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <USB_DeactivateEndpoint+0x1b4>)
 8005976:	4013      	ands	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	ec337800 	.word	0xec337800
 800598c:	eff37800 	.word	0xeff37800

08005990 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 815c 	bne.w	8005c6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d132      	bne.n	8005a20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	0cdb      	lsrs	r3, r3, #19
 8005a1a:	04db      	lsls	r3, r3, #19
 8005a1c:	6113      	str	r3, [r2, #16]
 8005a1e:	e074      	b.n	8005b0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	0cdb      	lsrs	r3, r3, #19
 8005a3c:	04db      	lsls	r3, r3, #19
 8005a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6999      	ldr	r1, [r3, #24]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	440b      	add	r3, r1
 8005a7c:	1e59      	subs	r1, r3, #1
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a88:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <USB_EPStartXfer+0x370>)
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	0148      	lsls	r0, r1, #5
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	4401      	add	r1, r0
 8005a94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	69b9      	ldr	r1, [r7, #24]
 8005ab4:	0148      	lsls	r0, r1, #5
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	4401      	add	r1, r0
 8005aba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11f      	bne.n	8005b0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ae8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d14b      	bne.n	8005ba8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	791b      	ldrb	r3, [r3, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d128      	bne.n	8005b86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d110      	bne.n	8005b66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e00f      	b.n	8005b86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e133      	b.n	8005e10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	791b      	ldrb	r3, [r3, #4]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d015      	beq.n	8005bfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 811b 	beq.w	8005e10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	2101      	movs	r1, #1
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	69f9      	ldr	r1, [r7, #28]
 8005bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	634b      	str	r3, [r1, #52]	; 0x34
 8005bfa:	e109      	b.n	8005e10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e00f      	b.n	8005c4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6919      	ldr	r1, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	b298      	uxth	r0, r3
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4603      	mov	r3, r0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fade 	bl	8006224 <USB_WritePacket>
 8005c68:	e0d2      	b.n	8005e10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c84:	0cdb      	lsrs	r3, r3, #19
 8005c86:	04db      	lsls	r3, r3, #19
 8005c88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ca8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d126      	bne.n	8005d04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	0148      	lsls	r0, r1, #5
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cfa:	6113      	str	r3, [r2, #16]
 8005cfc:	e03a      	b.n	8005d74 <USB_EPStartXfer+0x3e4>
 8005cfe:	bf00      	nop
 8005d00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	8afa      	ldrh	r2, [r7, #22]
 8005d20:	fb03 f202 	mul.w	r2, r3, r2
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	8afb      	ldrh	r3, [r7, #22]
 8005d38:	04d9      	lsls	r1, r3, #19
 8005d3a:	4b38      	ldr	r3, [pc, #224]	; (8005e1c <USB_EPStartXfer+0x48c>)
 8005d3c:	400b      	ands	r3, r1
 8005d3e:	69b9      	ldr	r1, [r7, #24]
 8005d40:	0148      	lsls	r0, r1, #5
 8005d42:	69f9      	ldr	r1, [r7, #28]
 8005d44:	4401      	add	r1, r0
 8005d46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	0148      	lsls	r0, r1, #5
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10d      	bne.n	8005d96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6919      	ldr	r1, [r3, #16]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	460a      	mov	r2, r1
 8005d94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	791b      	ldrb	r3, [r3, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d128      	bne.n	8005df0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d110      	bne.n	8005dd0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00f      	b.n	8005df0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	1ff80000 	.word	0x1ff80000

08005e20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f040 80ce 	bne.w	8005fde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	0cdb      	lsrs	r3, r3, #19
 8005eaa:	04db      	lsls	r3, r3, #19
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	e04e      	b.n	8005f4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	0cdb      	lsrs	r3, r3, #19
 8005ecc:	04db      	lsls	r3, r3, #19
 8005ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d903      	bls.n	8005f08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d11e      	bne.n	8005f92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e097      	b.n	80060c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8083 	beq.w	80060c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	6979      	ldr	r1, [r7, #20]
 8005fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	634b      	str	r3, [r1, #52]	; 0x34
 8005fdc:	e071      	b.n	80060c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	0cdb      	lsrs	r3, r3, #19
 8005ffa:	04db      	lsls	r3, r3, #19
 8005ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800601c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	0148      	lsls	r0, r1, #5
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	4401      	add	r1, r0
 8006078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800607c:	4313      	orrs	r3, r2
 800607e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10d      	bne.n	80060a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6919      	ldr	r1, [r3, #16]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	460a      	mov	r2, r1
 80060a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d14a      	bne.n	8006184 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006106:	f040 8086 	bne.w	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800612c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f242 7210 	movw	r2, #10000	; 0x2710
 800615e:	4293      	cmp	r3, r2
 8006160:	d902      	bls.n	8006168 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	e056      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800617c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006180:	d0e7      	beq.n	8006152 <USB_EPStopXfer+0x82>
 8006182:	e048      	b.n	8006216 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619c:	d13b      	bne.n	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d902      	bls.n	80061fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e00c      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d0e7      	beq.n	80061e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	460b      	mov	r3, r1
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	4613      	mov	r3, r2
 8006238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006242:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d123      	bne.n	8006292 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800624a:	88bb      	ldrh	r3, [r7, #4]
 800624c:	3303      	adds	r3, #3
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e018      	b.n	800628a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	031a      	lsls	r2, r3, #12
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006264:	461a      	mov	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3301      	adds	r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	3301      	adds	r3, #1
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d3e2      	bcc.n	8006258 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3724      	adds	r7, #36	; 0x24
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b08b      	sub	sp, #44	; 0x2c
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	089b      	lsrs	r3, r3, #2
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	e014      	b.n	80062f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	3301      	adds	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	3301      	adds	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	3301      	adds	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	3301      	adds	r3, #1
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3e6      	bcc.n	80062cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062fe:	8bfb      	ldrh	r3, [r7, #30]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01e      	beq.n	8006342 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	461a      	mov	r2, r3
 8006310:	f107 0310 	add.w	r3, r7, #16
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	701a      	strb	r2, [r3, #0]
      i++;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	3301      	adds	r3, #1
 800632e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006336:	8bfb      	ldrh	r3, [r7, #30]
 8006338:	3b01      	subs	r3, #1
 800633a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800633c:	8bfb      	ldrh	r3, [r7, #30]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ea      	bne.n	8006318 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006344:	4618      	mov	r0, r3
 8006346:	372c      	adds	r7, #44	; 0x2c
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d12c      	bne.n	80063c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	db12      	blt.n	80063a4 <USB_EPSetStall+0x54>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e02b      	b.n	800641e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db12      	blt.n	80063fe <USB_EPSetStall+0xae>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800641c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d128      	bne.n	800649a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006466:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d003      	beq.n	8006478 <USB_EPClearStall+0x4c>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d138      	bne.n	80064ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	e027      	b.n	80064ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d003      	beq.n	80064ca <USB_EPClearStall+0x9e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d10f      	bne.n	80064ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006516:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800651a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006572:	f023 0302 	bic.w	r3, r3, #2
 8006576:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	0c1b      	lsrs	r3, r3, #16
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	4013      	ands	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	b29b      	uxth	r3, r3
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4013      	ands	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006684:	68bb      	ldr	r3, [r7, #8]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4013      	ands	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e0:	68bb      	ldr	r3, [r7, #8]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f003 0301 	and.w	r3, r3, #1
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	460b      	mov	r3, r1
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	333c      	adds	r3, #60	; 0x3c
 8006766:	3304      	adds	r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4a26      	ldr	r2, [pc, #152]	; (8006808 <USB_EP0_OutStart+0xb8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d90a      	bls.n	800678a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d101      	bne.n	800678a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e037      	b.n	80067fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b8:	f043 0318 	orr.w	r3, r3, #24
 80067bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10f      	bne.n	80067f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	4f54300a 	.word	0x4f54300a

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <USB_CoreReset+0x64>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e01b      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a09      	ldr	r2, [pc, #36]	; (8006870 <USB_CoreReset+0x64>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d0f0      	beq.n	8006842 <USB_CoreReset+0x36>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	00030d40 	.word	0x00030d40

08006874 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006880:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006884:	f002 fc1e 	bl	80090c4 <USBD_static_malloc>
 8006888:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	32b0      	adds	r2, #176	; 0xb0
 800689a:	2100      	movs	r1, #0
 800689c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0d4      	b.n	8006a4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80068a8:	2100      	movs	r1, #0
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f002 fc72 	bl	8009194 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	32b0      	adds	r2, #176	; 0xb0
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32b0      	adds	r2, #176	; 0xb0
 80068ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	7c1b      	ldrb	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d138      	bne.n	800694e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068dc:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <USBD_CDC_Init+0x1e4>)
 80068de:	7819      	ldrb	r1, [r3, #0]
 80068e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e4:	2202      	movs	r2, #2
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f002 fac9 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068ec:	4b5a      	ldr	r3, [pc, #360]	; (8006a58 <USBD_CDC_Init+0x1e4>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	3324      	adds	r3, #36	; 0x24
 8006902:	2201      	movs	r2, #1
 8006904:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006906:	4b55      	ldr	r3, [pc, #340]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690e:	2202      	movs	r2, #2
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f002 fab4 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006916:	4b51      	ldr	r3, [pc, #324]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800692e:	2201      	movs	r2, #1
 8006930:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006932:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <USBD_CDC_Init+0x1ec>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	f003 020f 	and.w	r2, r3, #15
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	3326      	adds	r3, #38	; 0x26
 8006948:	2210      	movs	r2, #16
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e035      	b.n	80069ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800694e:	4b42      	ldr	r3, [pc, #264]	; (8006a58 <USBD_CDC_Init+0x1e4>)
 8006950:	7819      	ldrb	r1, [r3, #0]
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	2202      	movs	r2, #2
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f002 fa91 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800695c:	4b3e      	ldr	r3, [pc, #248]	; (8006a58 <USBD_CDC_Init+0x1e4>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	2201      	movs	r2, #1
 8006974:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006976:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	2202      	movs	r2, #2
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 fa7d 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 020f 	and.w	r2, r3, #15
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800699c:	2201      	movs	r2, #1
 800699e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069a0:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <USBD_CDC_Init+0x1ec>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3326      	adds	r3, #38	; 0x26
 80069b6:	2210      	movs	r2, #16
 80069b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <USBD_CDC_Init+0x1ec>)
 80069bc:	7819      	ldrb	r1, [r3, #0]
 80069be:	2308      	movs	r3, #8
 80069c0:	2203      	movs	r2, #3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 fa5b 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <USBD_CDC_Init+0x1ec>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 020f 	and.w	r2, r3, #15
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3324      	adds	r3, #36	; 0x24
 80069de:	2201      	movs	r2, #1
 80069e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	33b0      	adds	r3, #176	; 0xb0
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e018      	b.n	8006a4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7c1b      	ldrb	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006a26:	7819      	ldrb	r1, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f002 fb12 	bl	800905c <USBD_LL_PrepareReceive>
 8006a38:	e008      	b.n	8006a4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <USBD_CDC_Init+0x1e8>)
 8006a3c:	7819      	ldrb	r1, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f002 fb08 	bl	800905c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000093 	.word	0x20000093
 8006a5c:	20000094 	.word	0x20000094
 8006a60:	20000095 	.word	0x20000095

08006a64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a70:	4b3a      	ldr	r3, [pc, #232]	; (8006b5c <USBD_CDC_DeInit+0xf8>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f002 fa27 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a7c:	4b37      	ldr	r3, [pc, #220]	; (8006b5c <USBD_CDC_DeInit+0xf8>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3324      	adds	r3, #36	; 0x24
 8006a92:	2200      	movs	r2, #0
 8006a94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a96:	4b32      	ldr	r3, [pc, #200]	; (8006b60 <USBD_CDC_DeInit+0xfc>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 fa14 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006aa2:	4b2f      	ldr	r3, [pc, #188]	; (8006b60 <USBD_CDC_DeInit+0xfc>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 020f 	and.w	r2, r3, #15
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aba:	2200      	movs	r2, #0
 8006abc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006abe:	4b29      	ldr	r3, [pc, #164]	; (8006b64 <USBD_CDC_DeInit+0x100>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 fa00 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006aca:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <USBD_CDC_DeInit+0x100>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 020f 	and.w	r2, r3, #15
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	3324      	adds	r3, #36	; 0x24
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <USBD_CDC_DeInit+0x100>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3326      	adds	r3, #38	; 0x26
 8006afa:	2200      	movs	r2, #0
 8006afc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	32b0      	adds	r2, #176	; 0xb0
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01f      	beq.n	8006b50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	33b0      	adds	r3, #176	; 0xb0
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	32b0      	adds	r2, #176	; 0xb0
 8006b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 fad4 	bl	80090e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	; 0xb0
 8006b42:	2100      	movs	r1, #0
 8006b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000093 	.word	0x20000093
 8006b60:	20000094 	.word	0x20000094
 8006b64:	20000095 	.word	0x20000095

08006b68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	32b0      	adds	r2, #176	; 0xb0
 8006b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0bf      	b.n	8006d18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d050      	beq.n	8006c46 <USBD_CDC_Setup+0xde>
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	f040 80af 	bne.w	8006d08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88db      	ldrh	r3, [r3, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d03a      	beq.n	8006c28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da1b      	bge.n	8006bf4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	33b0      	adds	r3, #176	; 0xb0
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	88d2      	ldrh	r2, [r2, #6]
 8006bd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	bf28      	it	cs
 8006be2:	2307      	movcs	r3, #7
 8006be4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	89fa      	ldrh	r2, [r7, #14]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fd43 	bl	8008678 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bf2:	e090      	b.n	8006d16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785a      	ldrb	r2, [r3, #1]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	88db      	ldrh	r3, [r3, #6]
 8006c02:	2b3f      	cmp	r3, #63	; 0x3f
 8006c04:	d803      	bhi.n	8006c0e <USBD_CDC_Setup+0xa6>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88db      	ldrh	r3, [r3, #6]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	e000      	b.n	8006c10 <USBD_CDC_Setup+0xa8>
 8006c0e:	2240      	movs	r2, #64	; 0x40
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c16:	6939      	ldr	r1, [r7, #16]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fd55 	bl	80086d0 <USBD_CtlPrepareRx>
      break;
 8006c26:	e076      	b.n	8006d16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	33b0      	adds	r3, #176	; 0xb0
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	7850      	ldrb	r0, [r2, #1]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	4798      	blx	r3
      break;
 8006c44:	e067      	b.n	8006d16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b0b      	cmp	r3, #11
 8006c4c:	d851      	bhi.n	8006cf2 <USBD_CDC_Setup+0x18a>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBD_CDC_Setup+0xec>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c85 	.word	0x08006c85
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006cf3 	.word	0x08006cf3
 8006c60:	08006cf3 	.word	0x08006cf3
 8006c64:	08006cf3 	.word	0x08006cf3
 8006c68:	08006cf3 	.word	0x08006cf3
 8006c6c:	08006cf3 	.word	0x08006cf3
 8006c70:	08006cf3 	.word	0x08006cf3
 8006c74:	08006cf3 	.word	0x08006cf3
 8006c78:	08006cf3 	.word	0x08006cf3
 8006c7c:	08006caf 	.word	0x08006caf
 8006c80:	08006cd9 	.word	0x08006cd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d107      	bne.n	8006ca0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c90:	f107 030a 	add.w	r3, r7, #10
 8006c94:	2202      	movs	r2, #2
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fced 	bl	8008678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c9e:	e032      	b.n	8006d06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fc77 	bl	8008596 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	75fb      	strb	r3, [r7, #23]
          break;
 8006cac:	e02b      	b.n	8006d06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d107      	bne.n	8006cca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cba:	f107 030d 	add.w	r3, r7, #13
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fcd8 	bl	8008678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc8:	e01d      	b.n	8006d06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fc62 	bl	8008596 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd6:	e016      	b.n	8006d06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d00f      	beq.n	8006d04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fc55 	bl	8008596 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cf0:	e008      	b.n	8006d04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fc4e 	bl	8008596 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfe:	e002      	b.n	8006d06 <USBD_CDC_Setup+0x19e>
          break;
 8006d00:	bf00      	nop
 8006d02:	e008      	b.n	8006d16 <USBD_CDC_Setup+0x1ae>
          break;
 8006d04:	bf00      	nop
      }
      break;
 8006d06:	e006      	b.n	8006d16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fc43 	bl	8008596 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	75fb      	strb	r3, [r7, #23]
      break;
 8006d14:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	32b0      	adds	r2, #176	; 0xb0
 8006d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e065      	b.n	8006e16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	32b0      	adds	r2, #176	; 0xb0
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	f003 020f 	and.w	r2, r3, #15
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02f      	beq.n	8006dd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3318      	adds	r3, #24
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	f003 010f 	and.w	r1, r3, #15
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	460b      	mov	r3, r1
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	440b      	add	r3, r1
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4403      	add	r3, r0
 8006d9c:	3348      	adds	r3, #72	; 0x48
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d112      	bne.n	8006dd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dc6:	78f9      	ldrb	r1, [r7, #3]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f002 f924 	bl	800901a <USBD_LL_Transmit>
 8006dd2:	e01f      	b.n	8006e14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	33b0      	adds	r3, #176	; 0xb0
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d010      	beq.n	8006e14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	33b0      	adds	r3, #176	; 0xb0
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	32b0      	adds	r2, #176	; 0xb0
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	32b0      	adds	r2, #176	; 0xb0
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e01a      	b.n	8006e86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f002 f922 	bl	800909e <USBD_LL_GetRxDataSize>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	33b0      	adds	r3, #176	; 0xb0
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e80:	4611      	mov	r1, r2
 8006e82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	32b0      	adds	r2, #176	; 0xb0
 8006ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e025      	b.n	8006efc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	33b0      	adds	r3, #176	; 0xb0
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01a      	beq.n	8006efa <USBD_CDC_EP0_RxReady+0x6c>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006eca:	2bff      	cmp	r3, #255	; 0xff
 8006ecc:	d015      	beq.n	8006efa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	33b0      	adds	r3, #176	; 0xb0
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ee6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eee:	b292      	uxth	r2, r2
 8006ef0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f0c:	2182      	movs	r1, #130	; 0x82
 8006f0e:	4818      	ldr	r0, [pc, #96]	; (8006f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f10:	f000 fd09 	bl	8007926 <USBD_GetEpDesc>
 8006f14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f16:	2101      	movs	r1, #1
 8006f18:	4815      	ldr	r0, [pc, #84]	; (8006f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f1a:	f000 fd04 	bl	8007926 <USBD_GetEpDesc>
 8006f1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f20:	2181      	movs	r1, #129	; 0x81
 8006f22:	4813      	ldr	r0, [pc, #76]	; (8006f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f24:	f000 fcff 	bl	8007926 <USBD_GetEpDesc>
 8006f28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2210      	movs	r2, #16
 8006f34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d006      	beq.n	8006f4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f44:	711a      	strb	r2, [r3, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f58:	711a      	strb	r2, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2243      	movs	r2, #67	; 0x43
 8006f62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000050 	.word	0x20000050

08006f74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f7c:	2182      	movs	r1, #130	; 0x82
 8006f7e:	4818      	ldr	r0, [pc, #96]	; (8006fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f80:	f000 fcd1 	bl	8007926 <USBD_GetEpDesc>
 8006f84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f86:	2101      	movs	r1, #1
 8006f88:	4815      	ldr	r0, [pc, #84]	; (8006fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f8a:	f000 fccc 	bl	8007926 <USBD_GetEpDesc>
 8006f8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f90:	2181      	movs	r1, #129	; 0x81
 8006f92:	4813      	ldr	r0, [pc, #76]	; (8006fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f94:	f000 fcc7 	bl	8007926 <USBD_GetEpDesc>
 8006f98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	711a      	strb	r2, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f042 0202 	orr.w	r2, r2, #2
 8006fb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d006      	beq.n	8006fce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	711a      	strb	r2, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f042 0202 	orr.w	r2, r2, #2
 8006fcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2243      	movs	r2, #67	; 0x43
 8006fd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000050 	.word	0x20000050

08006fe4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fec:	2182      	movs	r1, #130	; 0x82
 8006fee:	4818      	ldr	r0, [pc, #96]	; (8007050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ff0:	f000 fc99 	bl	8007926 <USBD_GetEpDesc>
 8006ff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4815      	ldr	r0, [pc, #84]	; (8007050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ffa:	f000 fc94 	bl	8007926 <USBD_GetEpDesc>
 8006ffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007000:	2181      	movs	r1, #129	; 0x81
 8007002:	4813      	ldr	r0, [pc, #76]	; (8007050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007004:	f000 fc8f 	bl	8007926 <USBD_GetEpDesc>
 8007008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2210      	movs	r2, #16
 8007014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d006      	beq.n	800702a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2200      	movs	r2, #0
 8007020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007024:	711a      	strb	r2, [r3, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007038:	711a      	strb	r2, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2243      	movs	r2, #67	; 0x43
 8007042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007044:	4b02      	ldr	r3, [pc, #8]	; (8007050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000050 	.word	0x20000050

08007054 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	220a      	movs	r2, #10
 8007060:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007062:	4b03      	ldr	r3, [pc, #12]	; (8007070 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	2000000c 	.word	0x2000000c

08007074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	e009      	b.n	800709c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	33b0      	adds	r3, #176	; 0xb0
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	32b0      	adds	r2, #176	; 0xb0
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e008      	b.n	80070e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	32b0      	adds	r2, #176	; 0xb0
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800710c:	2303      	movs	r3, #3
 800710e:	e004      	b.n	800711a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	32b0      	adds	r2, #176	; 0xb0
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	32b0      	adds	r2, #176	; 0xb0
 800714a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	e018      	b.n	8007188 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7c1b      	ldrb	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <USBD_CDC_ReceivePacket+0x68>)
 8007160:	7819      	ldrb	r1, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 ff75 	bl	800905c <USBD_LL_PrepareReceive>
 8007172:	e008      	b.n	8007186 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <USBD_CDC_ReceivePacket+0x68>)
 8007176:	7819      	ldrb	r1, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 ff6b 	bl	800905c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000094 	.word	0x20000094

08007194 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e01f      	b.n	80071ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f001 fde5 	bl	8008db0 <USBD_LL_Init>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	e025      	b.n	8007258 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	; 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32ae      	adds	r2, #174	; 0xae
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f107 020e 	add.w	r2, r7, #14
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	4602      	mov	r2, r0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fded 	bl	8008e48 <USBD_LL_Start>
 800726e:	4603      	mov	r3, r0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	78fa      	ldrb	r2, [r7, #3]
 80072b2:	4611      	mov	r1, r2
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	4611      	mov	r1, r2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f908 	bl	8008522 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b02      	cmp	r3, #2
 8007334:	d01a      	beq.n	800736c <USBD_LL_SetupStage+0x72>
 8007336:	2b02      	cmp	r3, #2
 8007338:	d822      	bhi.n	8007380 <USBD_LL_SetupStage+0x86>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <USBD_LL_SetupStage+0x4a>
 800733e:	2b01      	cmp	r3, #1
 8007340:	d00a      	beq.n	8007358 <USBD_LL_SetupStage+0x5e>
 8007342:	e01d      	b.n	8007380 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb5f 	bl	8007a10 <USBD_StdDevReq>
 8007352:	4603      	mov	r3, r0
 8007354:	73fb      	strb	r3, [r7, #15]
      break;
 8007356:	e020      	b.n	800739a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fbc7 	bl	8007af4 <USBD_StdItfReq>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e016      	b.n	800739a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc29 	bl	8007bcc <USBD_StdEPReq>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
      break;
 800737e:	e00c      	b.n	800739a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fdba 	bl	8008f08 <USBD_LL_StallEP>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	bf00      	nop
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	460b      	mov	r3, r1
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d16e      	bne.n	800749a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	f040 8098 	bne.w	8007500 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d913      	bls.n	8007404 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bf28      	it	cs
 80073f6:	4613      	movcs	r3, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f001 f984 	bl	800870a <USBD_CtlContinueRx>
 8007402:	e07d      	b.n	8007500 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b02      	cmp	r3, #2
 8007410:	d014      	beq.n	800743c <USBD_LL_DataOutStage+0x98>
 8007412:	2b02      	cmp	r3, #2
 8007414:	d81d      	bhi.n	8007452 <USBD_LL_DataOutStage+0xae>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <USBD_LL_DataOutStage+0x7c>
 800741a:	2b01      	cmp	r3, #1
 800741c:	d003      	beq.n	8007426 <USBD_LL_DataOutStage+0x82>
 800741e:	e018      	b.n	8007452 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	75bb      	strb	r3, [r7, #22]
            break;
 8007424:	e018      	b.n	8007458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fa5e 	bl	80078f2 <USBD_CoreFindIF>
 8007436:	4603      	mov	r3, r0
 8007438:	75bb      	strb	r3, [r7, #22]
            break;
 800743a:	e00d      	b.n	8007458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa60 	bl	800790c <USBD_CoreFindEP>
 800744c:	4603      	mov	r3, r0
 800744e:	75bb      	strb	r3, [r7, #22]
            break;
 8007450:	e002      	b.n	8007458 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	75bb      	strb	r3, [r7, #22]
            break;
 8007456:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007458:	7dbb      	ldrb	r3, [r7, #22]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d119      	bne.n	8007492 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d113      	bne.n	8007492 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800746a:	7dba      	ldrb	r2, [r7, #22]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	32ae      	adds	r2, #174	; 0xae
 8007470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800747a:	7dba      	ldrb	r2, [r7, #22]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007482:	7dba      	ldrb	r2, [r7, #22]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	32ae      	adds	r2, #174	; 0xae
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f001 f94a 	bl	800872c <USBD_CtlSendStatus>
 8007498:	e032      	b.n	8007500 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800749a:	7afb      	ldrb	r3, [r7, #11]
 800749c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fa31 	bl	800790c <USBD_CoreFindEP>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074ae:	7dbb      	ldrb	r3, [r7, #22]
 80074b0:	2bff      	cmp	r3, #255	; 0xff
 80074b2:	d025      	beq.n	8007500 <USBD_LL_DataOutStage+0x15c>
 80074b4:	7dbb      	ldrb	r3, [r7, #22]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d122      	bne.n	8007500 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d117      	bne.n	80074f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074c6:	7dba      	ldrb	r2, [r7, #22]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	32ae      	adds	r2, #174	; 0xae
 80074cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00f      	beq.n	80074f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80074d6:	7dba      	ldrb	r2, [r7, #22]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074de:	7dba      	ldrb	r2, [r7, #22]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	32ae      	adds	r2, #174	; 0xae
 80074e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	7afa      	ldrb	r2, [r7, #11]
 80074ec:	4611      	mov	r1, r2
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	4798      	blx	r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	e000      	b.n	8007502 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	460b      	mov	r3, r1
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d16f      	bne.n	80075fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3314      	adds	r3, #20
 8007522:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800752a:	2b02      	cmp	r3, #2
 800752c:	d15a      	bne.n	80075e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	429a      	cmp	r2, r3
 8007538:	d914      	bls.n	8007564 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	461a      	mov	r2, r3
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f001 f8ac 	bl	80086ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007556:	2300      	movs	r3, #0
 8007558:	2200      	movs	r2, #0
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f001 fd7d 	bl	800905c <USBD_LL_PrepareReceive>
 8007562:	e03f      	b.n	80075e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d11c      	bne.n	80075aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007578:	429a      	cmp	r2, r3
 800757a:	d316      	bcc.n	80075aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007586:	429a      	cmp	r2, r3
 8007588:	d20f      	bcs.n	80075aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800758a:	2200      	movs	r2, #0
 800758c:	2100      	movs	r1, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 f88d 	bl	80086ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 fd5a 	bl	800905c <USBD_LL_PrepareReceive>
 80075a8:	e01c      	b.n	80075e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d10f      	bne.n	80075d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075d6:	2180      	movs	r1, #128	; 0x80
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 fc95 	bl	8008f08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f001 f8b7 	bl	8008752 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d03a      	beq.n	8007664 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fe42 	bl	8007278 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075fc:	e032      	b.n	8007664 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f97f 	bl	800790c <USBD_CoreFindEP>
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2bff      	cmp	r3, #255	; 0xff
 8007616:	d025      	beq.n	8007664 <USBD_LL_DataInStage+0x15a>
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d122      	bne.n	8007664 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d11c      	bne.n	8007664 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800762a:	7dfa      	ldrb	r2, [r7, #23]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d014      	beq.n	8007664 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800763a:	7dfa      	ldrb	r2, [r7, #23]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007642:	7dfa      	ldrb	r2, [r7, #23]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	32ae      	adds	r2, #174	; 0xae
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	7afa      	ldrb	r2, [r7, #11]
 8007650:	4611      	mov	r1, r2
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800765a:	7dbb      	ldrb	r3, [r7, #22]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007660:	7dbb      	ldrb	r3, [r7, #22]
 8007662:	e000      	b.n	8007666 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d014      	beq.n	80076d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00e      	beq.n	80076d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6852      	ldr	r2, [r2, #4]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	4611      	mov	r1, r2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076d0:	2303      	movs	r3, #3
 80076d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076d4:	2340      	movs	r3, #64	; 0x40
 80076d6:	2200      	movs	r2, #0
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fbcf 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2240      	movs	r2, #64	; 0x40
 80076ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076f0:	2340      	movs	r3, #64	; 0x40
 80076f2:	2200      	movs	r2, #0
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fbc1 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2240      	movs	r2, #64	; 0x40
 8007706:	621a      	str	r2, [r3, #32]

  return ret;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007740:	b2da      	uxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2204      	movs	r2, #4
 800774c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b04      	cmp	r3, #4
 8007770:	d106      	bne.n	8007780 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d110      	bne.n	80077c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	32ae      	adds	r2, #174	; 0xae
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e01c      	b.n	800782a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d115      	bne.n	8007828 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	32ae      	adds	r2, #174	; 0xae
 800781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	4611      	mov	r1, r2
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32ae      	adds	r2, #174	; 0xae
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e01c      	b.n	800788e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b03      	cmp	r3, #3
 800785e:	d115      	bne.n	800788c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32ae      	adds	r2, #174	; 0xae
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32ae      	adds	r2, #174	; 0xae
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00e      	beq.n	80078e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6852      	ldr	r2, [r2, #4]
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	4611      	mov	r1, r2
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007918:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	429a      	cmp	r2, r3
 800794c:	d920      	bls.n	8007990 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007956:	e013      	b.n	8007980 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007958:	f107 030a 	add.w	r3, r7, #10
 800795c:	4619      	mov	r1, r3
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	f000 f81b 	bl	800799a <USBD_GetNextDesc>
 8007964:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b05      	cmp	r3, #5
 800796c:	d108      	bne.n	8007980 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	789b      	ldrb	r3, [r3, #2]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	429a      	cmp	r2, r3
 800797a:	d008      	beq.n	800798e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	885b      	ldrh	r3, [r3, #2]
 8007984:	b29a      	uxth	r2, r3
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	429a      	cmp	r2, r3
 800798a:	d8e5      	bhi.n	8007958 <USBD_GetEpDesc+0x32>
 800798c:	e000      	b.n	8007990 <USBD_GetEpDesc+0x6a>
          break;
 800798e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007990:	693b      	ldr	r3, [r7, #16]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4413      	add	r3, r2
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	3301      	adds	r3, #1
 80079ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079f2:	8a3b      	ldrh	r3, [r7, #16]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	b21a      	sxth	r2, r3
 80079f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	b21b      	sxth	r3, r3
 8007a00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a02:	89fb      	ldrh	r3, [r7, #14]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d005      	beq.n	8007a36 <USBD_StdDevReq+0x26>
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d857      	bhi.n	8007ade <USBD_StdDevReq+0xce>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00f      	beq.n	8007a52 <USBD_StdDevReq+0x42>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d153      	bne.n	8007ade <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	32ae      	adds	r2, #174	; 0xae
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a50:	e04a      	b.n	8007ae8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d83b      	bhi.n	8007ad2 <USBD_StdDevReq+0xc2>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <USBD_StdDevReq+0x50>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007ac9 	.word	0x08007ac9
 8007a68:	08007ad3 	.word	0x08007ad3
 8007a6c:	08007abf 	.word	0x08007abf
 8007a70:	08007ad3 	.word	0x08007ad3
 8007a74:	08007a93 	.word	0x08007a93
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007ad3 	.word	0x08007ad3
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007a9d 	.word	0x08007a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa3c 	bl	8007f08 <USBD_GetDescriptor>
          break;
 8007a90:	e024      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fba1 	bl	80081dc <USBD_SetAddress>
          break;
 8007a9a:	e01f      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fbe0 	bl	8008264 <USBD_SetConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8007aa8:	e018      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc83 	bl	80083b8 <USBD_GetConfig>
          break;
 8007ab2:	e013      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fcb4 	bl	8008424 <USBD_GetStatus>
          break;
 8007abc:	e00e      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fce3 	bl	800848c <USBD_SetFeature>
          break;
 8007ac6:	e009      	b.n	8007adc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fd07 	bl	80084de <USBD_ClrFeature>
          break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd5e 	bl	8008596 <USBD_CtlError>
          break;
 8007ada:	bf00      	nop
      }
      break;
 8007adc:	e004      	b.n	8007ae8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd58 	bl	8008596 <USBD_CtlError>
      break;
 8007ae6:	bf00      	nop
  }

  return ret;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d005      	beq.n	8007b1a <USBD_StdItfReq+0x26>
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d852      	bhi.n	8007bb8 <USBD_StdItfReq+0xc4>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <USBD_StdItfReq+0x26>
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d14e      	bne.n	8007bb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d840      	bhi.n	8007baa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	889b      	ldrh	r3, [r3, #4]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d836      	bhi.n	8007ba0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fed9 	bl	80078f2 <USBD_CoreFindIF>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2bff      	cmp	r3, #255	; 0xff
 8007b48:	d01d      	beq.n	8007b86 <USBD_StdItfReq+0x92>
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11a      	bne.n	8007b86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b50:	7bba      	ldrb	r2, [r7, #14]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	; 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b60:	7bba      	ldrb	r2, [r7, #14]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b68:	7bba      	ldrb	r2, [r7, #14]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	32ae      	adds	r2, #174	; 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b7e:	e004      	b.n	8007b8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b84:	e001      	b.n	8007b8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88db      	ldrh	r3, [r3, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d110      	bne.n	8007bb4 <USBD_StdItfReq+0xc0>
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fdc7 	bl	800872c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b9e:	e009      	b.n	8007bb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fcf7 	bl	8008596 <USBD_CtlError>
          break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fcf2 	bl	8008596 <USBD_CtlError>
          break;
 8007bb2:	e000      	b.n	8007bb6 <USBD_StdItfReq+0xc2>
          break;
 8007bb4:	bf00      	nop
      }
      break;
 8007bb6:	e004      	b.n	8007bc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fceb 	bl	8008596 <USBD_CtlError>
      break;
 8007bc0:	bf00      	nop
  }

  return ret;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	889b      	ldrh	r3, [r3, #4]
 8007bde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d007      	beq.n	8007bfc <USBD_StdEPReq+0x30>
 8007bec:	2b40      	cmp	r3, #64	; 0x40
 8007bee:	f200 817f 	bhi.w	8007ef0 <USBD_StdEPReq+0x324>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02a      	beq.n	8007c4c <USBD_StdEPReq+0x80>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	f040 817a 	bne.w	8007ef0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fe83 	bl	800790c <USBD_CoreFindEP>
 8007c06:	4603      	mov	r3, r0
 8007c08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	2bff      	cmp	r3, #255	; 0xff
 8007c0e:	f000 8174 	beq.w	8007efa <USBD_StdEPReq+0x32e>
 8007c12:	7b7b      	ldrb	r3, [r7, #13]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 8170 	bne.w	8007efa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c1a:	7b7a      	ldrb	r2, [r7, #13]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c22:	7b7a      	ldrb	r2, [r7, #13]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	32ae      	adds	r2, #174	; 0xae
 8007c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8163 	beq.w	8007efa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	; 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c4a:	e156      	b.n	8007efa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d008      	beq.n	8007c66 <USBD_StdEPReq+0x9a>
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	f300 8145 	bgt.w	8007ee4 <USBD_StdEPReq+0x318>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 809b 	beq.w	8007d96 <USBD_StdEPReq+0x1ca>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d03c      	beq.n	8007cde <USBD_StdEPReq+0x112>
 8007c64:	e13e      	b.n	8007ee4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d002      	beq.n	8007c78 <USBD_StdEPReq+0xac>
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d016      	beq.n	8007ca4 <USBD_StdEPReq+0xd8>
 8007c76:	e02c      	b.n	8007cd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <USBD_StdEPReq+0xce>
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d00a      	beq.n	8007c9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f93d 	bl	8008f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f939 	bl	8008f08 <USBD_LL_StallEP>
 8007c96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c98:	e020      	b.n	8007cdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc7a 	bl	8008596 <USBD_CtlError>
              break;
 8007ca2:	e01b      	b.n	8007cdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10e      	bne.n	8007cca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_StdEPReq+0xfe>
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d008      	beq.n	8007cca <USBD_StdEPReq+0xfe>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f91f 	bl	8008f08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fd2e 	bl	800872c <USBD_CtlSendStatus>

              break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fc5e 	bl	8008596 <USBD_CtlError>
              break;
 8007cda:	bf00      	nop
          }
          break;
 8007cdc:	e107      	b.n	8007eee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d002      	beq.n	8007cf0 <USBD_StdEPReq+0x124>
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d016      	beq.n	8007d1c <USBD_StdEPReq+0x150>
 8007cee:	e04b      	b.n	8007d88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_StdEPReq+0x146>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b80      	cmp	r3, #128	; 0x80
 8007cfa:	d00a      	beq.n	8007d12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f901 	bl	8008f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f8fd 	bl	8008f08 <USBD_LL_StallEP>
 8007d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d10:	e040      	b.n	8007d94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc3e 	bl	8008596 <USBD_CtlError>
              break;
 8007d1a:	e03b      	b.n	8007d94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d136      	bne.n	8007d92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f907 	bl	8008f46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcf7 	bl	800872c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fde2 	bl	800790c <USBD_CoreFindEP>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d4c:	7b7b      	ldrb	r3, [r7, #13]
 8007d4e:	2bff      	cmp	r3, #255	; 0xff
 8007d50:	d01f      	beq.n	8007d92 <USBD_StdEPReq+0x1c6>
 8007d52:	7b7b      	ldrb	r3, [r7, #13]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11c      	bne.n	8007d92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d58:	7b7a      	ldrb	r2, [r7, #13]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d60:	7b7a      	ldrb	r2, [r7, #13]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32ae      	adds	r2, #174	; 0xae
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d010      	beq.n	8007d92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d70:	7b7a      	ldrb	r2, [r7, #13]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32ae      	adds	r2, #174	; 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d86:	e004      	b.n	8007d92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc03 	bl	8008596 <USBD_CtlError>
              break;
 8007d90:	e000      	b.n	8007d94 <USBD_StdEPReq+0x1c8>
              break;
 8007d92:	bf00      	nop
          }
          break;
 8007d94:	e0ab      	b.n	8007eee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d002      	beq.n	8007da8 <USBD_StdEPReq+0x1dc>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d032      	beq.n	8007e0c <USBD_StdEPReq+0x240>
 8007da6:	e097      	b.n	8007ed8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <USBD_StdEPReq+0x1f2>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	; 0x80
 8007db2:	d004      	beq.n	8007dbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fbed 	bl	8008596 <USBD_CtlError>
                break;
 8007dbc:	e091      	b.n	8007ee2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da0b      	bge.n	8007dde <USBD_StdEPReq+0x212>
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	4413      	add	r3, r2
 8007dda:	3304      	adds	r3, #4
 8007ddc:	e00b      	b.n	8007df6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	3304      	adds	r3, #4
 8007df6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2202      	movs	r2, #2
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc37 	bl	8008678 <USBD_CtlSendData>
              break;
 8007e0a:	e06a      	b.n	8007ee2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da11      	bge.n	8007e38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	f003 020f 	and.w	r2, r3, #15
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	440b      	add	r3, r1
 8007e26:	3324      	adds	r3, #36	; 0x24
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d117      	bne.n	8007e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fbb0 	bl	8008596 <USBD_CtlError>
                  break;
 8007e36:	e054      	b.n	8007ee2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fb9d 	bl	8008596 <USBD_CtlError>
                  break;
 8007e5c:	e041      	b.n	8007ee2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da0b      	bge.n	8007e7e <USBD_StdEPReq+0x2b2>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	3310      	adds	r3, #16
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	4413      	add	r3, r2
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	e00b      	b.n	8007e96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <USBD_StdEPReq+0x2d8>
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b80      	cmp	r3, #128	; 0x80
 8007ea2:	d103      	bne.n	8007eac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e00e      	b.n	8007eca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 f867 	bl	8008f84 <USBD_LL_IsStallEP>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e002      	b.n	8007eca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fbd1 	bl	8008678 <USBD_CtlSendData>
              break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fb5b 	bl	8008596 <USBD_CtlError>
              break;
 8007ee0:	bf00      	nop
          }
          break;
 8007ee2:	e004      	b.n	8007eee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fb55 	bl	8008596 <USBD_CtlError>
          break;
 8007eec:	bf00      	nop
      }
      break;
 8007eee:	e005      	b.n	8007efc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fb4f 	bl	8008596 <USBD_CtlError>
      break;
 8007ef8:	e000      	b.n	8007efc <USBD_StdEPReq+0x330>
      break;
 8007efa:	bf00      	nop
  }

  return ret;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	2b06      	cmp	r3, #6
 8007f2a:	f200 8128 	bhi.w	800817e <USBD_GetDescriptor+0x276>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <USBD_GetDescriptor+0x2c>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f51 	.word	0x08007f51
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007fa9 	.word	0x08007fa9
 8007f40:	0800817f 	.word	0x0800817f
 8007f44:	0800817f 	.word	0x0800817f
 8007f48:	0800811f 	.word	0x0800811f
 8007f4c:	0800814b 	.word	0x0800814b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
      break;
 8007f66:	e112      	b.n	800818e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7c1b      	ldrb	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	f107 0208 	add.w	r2, r7, #8
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3301      	adds	r3, #1
 8007f86:	2202      	movs	r2, #2
 8007f88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f8a:	e100      	b.n	800818e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	f107 0208 	add.w	r2, r7, #8
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	701a      	strb	r2, [r3, #0]
      break;
 8007fa6:	e0f2      	b.n	800818e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	885b      	ldrh	r3, [r3, #2]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	f200 80ac 	bhi.w	800810c <USBD_GetDescriptor+0x204>
 8007fb4:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <USBD_GetDescriptor+0xb4>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08008009 	.word	0x08008009
 8007fc4:	0800803d 	.word	0x0800803d
 8007fc8:	08008071 	.word	0x08008071
 8007fcc:	080080a5 	.word	0x080080a5
 8007fd0:	080080d9 	.word	0x080080d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7c12      	ldrb	r2, [r2, #16]
 8007fec:	f107 0108 	add.w	r1, r7, #8
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ff6:	e091      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 facb 	bl	8008596 <USBD_CtlError>
            err++;
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	3301      	adds	r3, #1
 8008004:	72fb      	strb	r3, [r7, #11]
          break;
 8008006:	e089      	b.n	800811c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	7c12      	ldrb	r2, [r2, #16]
 8008020:	f107 0108 	add.w	r1, r7, #8
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802a:	e077      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fab1 	bl	8008596 <USBD_CtlError>
            err++;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	3301      	adds	r3, #1
 8008038:	72fb      	strb	r3, [r7, #11]
          break;
 800803a:	e06f      	b.n	800811c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800805e:	e05d      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa97 	bl	8008596 <USBD_CtlError>
            err++;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	3301      	adds	r3, #1
 800806c:	72fb      	strb	r3, [r7, #11]
          break;
 800806e:	e055      	b.n	800811c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7c12      	ldrb	r2, [r2, #16]
 8008088:	f107 0108 	add.w	r1, r7, #8
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
 8008090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008092:	e043      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa7d 	bl	8008596 <USBD_CtlError>
            err++;
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	3301      	adds	r3, #1
 80080a0:	72fb      	strb	r3, [r7, #11]
          break;
 80080a2:	e03b      	b.n	800811c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7c12      	ldrb	r2, [r2, #16]
 80080bc:	f107 0108 	add.w	r1, r7, #8
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c6:	e029      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa63 	bl	8008596 <USBD_CtlError>
            err++;
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	3301      	adds	r3, #1
 80080d4:	72fb      	strb	r3, [r7, #11]
          break;
 80080d6:	e021      	b.n	800811c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7c12      	ldrb	r2, [r2, #16]
 80080f0:	f107 0108 	add.w	r1, r7, #8
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fa:	e00f      	b.n	800811c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa49 	bl	8008596 <USBD_CtlError>
            err++;
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	3301      	adds	r3, #1
 8008108:	72fb      	strb	r3, [r7, #11]
          break;
 800810a:	e007      	b.n	800811c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa41 	bl	8008596 <USBD_CtlError>
          err++;
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	3301      	adds	r3, #1
 8008118:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800811a:	bf00      	nop
      }
      break;
 800811c:	e037      	b.n	800818e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7c1b      	ldrb	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	f107 0208 	add.w	r2, r7, #8
 8008132:	4610      	mov	r0, r2
 8008134:	4798      	blx	r3
 8008136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008138:	e029      	b.n	800818e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa2a 	bl	8008596 <USBD_CtlError>
        err++;
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	3301      	adds	r3, #1
 8008146:	72fb      	strb	r3, [r7, #11]
      break;
 8008148:	e021      	b.n	800818e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7c1b      	ldrb	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10d      	bne.n	800816e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	f107 0208 	add.w	r2, r7, #8
 800815e:	4610      	mov	r0, r2
 8008160:	4798      	blx	r3
 8008162:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	2207      	movs	r2, #7
 800816a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800816c:	e00f      	b.n	800818e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa10 	bl	8008596 <USBD_CtlError>
        err++;
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	3301      	adds	r3, #1
 800817a:	72fb      	strb	r3, [r7, #11]
      break;
 800817c:	e007      	b.n	800818e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa08 	bl	8008596 <USBD_CtlError>
      err++;
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	3301      	adds	r3, #1
 800818a:	72fb      	strb	r3, [r7, #11]
      break;
 800818c:	bf00      	nop
  }

  if (err != 0U)
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d11e      	bne.n	80081d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	88db      	ldrh	r3, [r3, #6]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d016      	beq.n	80081ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800819c:	893b      	ldrh	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00e      	beq.n	80081c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	88da      	ldrh	r2, [r3, #6]
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bf28      	it	cs
 80081ac:	4613      	movcs	r3, r2
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b2:	893b      	ldrh	r3, [r7, #8]
 80081b4:	461a      	mov	r2, r3
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa5d 	bl	8008678 <USBD_CtlSendData>
 80081be:	e009      	b.n	80081d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9e7 	bl	8008596 <USBD_CtlError>
 80081c8:	e004      	b.n	80081d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 faae 	bl	800872c <USBD_CtlSendStatus>
 80081d0:	e000      	b.n	80081d4 <USBD_GetDescriptor+0x2cc>
    return;
 80081d2:	bf00      	nop
  }
}
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	889b      	ldrh	r3, [r3, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d131      	bne.n	8008252 <USBD_SetAddress+0x76>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	88db      	ldrh	r3, [r3, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d12d      	bne.n	8008252 <USBD_SetAddress+0x76>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b7f      	cmp	r3, #127	; 0x7f
 80081fc:	d829      	bhi.n	8008252 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b03      	cmp	r3, #3
 8008214:	d104      	bne.n	8008220 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9bc 	bl	8008596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821e:	e01d      	b.n	800825c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7bfa      	ldrb	r2, [r7, #15]
 8008224:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fed5 	bl	8008fdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa7a 	bl	800872c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	e009      	b.n	800825c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	e004      	b.n	800825c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f99e 	bl	8008596 <USBD_CtlError>
  }
}
 800825a:	bf00      	nop
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	885b      	ldrh	r3, [r3, #2]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	4b4e      	ldr	r3, [pc, #312]	; (80083b4 <USBD_SetConfig+0x150>)
 800827a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800827c:	4b4d      	ldr	r3, [pc, #308]	; (80083b4 <USBD_SetConfig+0x150>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d905      	bls.n	8008290 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f985 	bl	8008596 <USBD_CtlError>
    return USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	e08c      	b.n	80083aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d002      	beq.n	80082a2 <USBD_SetConfig+0x3e>
 800829c:	2b03      	cmp	r3, #3
 800829e:	d029      	beq.n	80082f4 <USBD_SetConfig+0x90>
 80082a0:	e075      	b.n	800838e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082a2:	4b44      	ldr	r3, [pc, #272]	; (80083b4 <USBD_SetConfig+0x150>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d020      	beq.n	80082ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082aa:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <USBD_SetConfig+0x150>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082b4:	4b3f      	ldr	r3, [pc, #252]	; (80083b4 <USBD_SetConfig+0x150>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fe ffe7 	bl	800728e <USBD_SetClassConfig>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d008      	beq.n	80082dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f962 	bl	8008596 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082da:	e065      	b.n	80083a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fa25 	bl	800872c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2203      	movs	r2, #3
 80082e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082ea:	e05d      	b.n	80083a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa1d 	bl	800872c <USBD_CtlSendStatus>
      break;
 80082f2:	e059      	b.n	80083a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082f4:	4b2f      	ldr	r3, [pc, #188]	; (80083b4 <USBD_SetConfig+0x150>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d112      	bne.n	8008322 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008304:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <USBD_SetConfig+0x150>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800830e:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <USBD_SetConfig+0x150>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7fe ffd6 	bl	80072c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa06 	bl	800872c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008320:	e042      	b.n	80083a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008322:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <USBD_SetConfig+0x150>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d02a      	beq.n	8008386 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7fe ffc4 	bl	80072c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <USBD_SetConfig+0x150>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008348:	4b1a      	ldr	r3, [pc, #104]	; (80083b4 <USBD_SetConfig+0x150>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7fe ff9d 	bl	800728e <USBD_SetClassConfig>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f918 	bl	8008596 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fe ffa9 	bl	80072c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800837c:	e014      	b.n	80083a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9d4 	bl	800872c <USBD_CtlSendStatus>
      break;
 8008384:	e010      	b.n	80083a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9d0 	bl	800872c <USBD_CtlSendStatus>
      break;
 800838c:	e00c      	b.n	80083a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f900 	bl	8008596 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008396:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <USBD_SetConfig+0x150>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7fe ff92 	bl	80072c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083a2:	2303      	movs	r3, #3
 80083a4:	73fb      	strb	r3, [r7, #15]
      break;
 80083a6:	bf00      	nop
  }

  return ret;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	2000021c 	.word	0x2000021c

080083b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	88db      	ldrh	r3, [r3, #6]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d004      	beq.n	80083d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8e2 	bl	8008596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083d2:	e023      	b.n	800841c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	dc02      	bgt.n	80083e6 <USBD_GetConfig+0x2e>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc03      	bgt.n	80083ec <USBD_GetConfig+0x34>
 80083e4:	e015      	b.n	8008412 <USBD_GetConfig+0x5a>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d00b      	beq.n	8008402 <USBD_GetConfig+0x4a>
 80083ea:	e012      	b.n	8008412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3308      	adds	r3, #8
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f93c 	bl	8008678 <USBD_CtlSendData>
        break;
 8008400:	e00c      	b.n	800841c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3304      	adds	r3, #4
 8008406:	2201      	movs	r2, #1
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f934 	bl	8008678 <USBD_CtlSendData>
        break;
 8008410:	e004      	b.n	800841c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f8be 	bl	8008596 <USBD_CtlError>
        break;
 800841a:	bf00      	nop
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	b2db      	uxtb	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	2b02      	cmp	r3, #2
 800843a:	d81e      	bhi.n	800847a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	88db      	ldrh	r3, [r3, #6]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d004      	beq.n	800844e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f8a5 	bl	8008596 <USBD_CtlError>
        break;
 800844c:	e01a      	b.n	8008484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f043 0202 	orr.w	r2, r3, #2
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	330c      	adds	r3, #12
 800846e:	2202      	movs	r2, #2
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f900 	bl	8008678 <USBD_CtlSendData>
      break;
 8008478:	e004      	b.n	8008484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f88a 	bl	8008596 <USBD_CtlError>
      break;
 8008482:	bf00      	nop
  }
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	885b      	ldrh	r3, [r3, #2]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f940 	bl	800872c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084ac:	e013      	b.n	80084d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d10b      	bne.n	80084ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	889b      	ldrh	r3, [r3, #4]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	b29b      	uxth	r3, r3
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f930 	bl	800872c <USBD_CtlSendStatus>
}
 80084cc:	e003      	b.n	80084d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f860 	bl	8008596 <USBD_CtlError>
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d80b      	bhi.n	800850e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d10c      	bne.n	8008518 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f910 	bl	800872c <USBD_CtlSendStatus>
      }
      break;
 800850c:	e004      	b.n	8008518 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f840 	bl	8008596 <USBD_CtlError>
      break;
 8008516:	e000      	b.n	800851a <USBD_ClrFeature+0x3c>
      break;
 8008518:	bf00      	nop
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	781a      	ldrb	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3301      	adds	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff fa41 	bl	80079d4 <SWAPBYTE>
 8008552:	4603      	mov	r3, r0
 8008554:	461a      	mov	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff fa34 	bl	80079d4 <SWAPBYTE>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fa27 	bl	80079d4 <SWAPBYTE>
 8008586:	4603      	mov	r3, r0
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	80da      	strh	r2, [r3, #6]
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085a0:	2180      	movs	r1, #128	; 0x80
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fcb0 	bl	8008f08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085a8:	2100      	movs	r1, #0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fcac 	bl	8008f08 <USBD_LL_StallEP>
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d036      	beq.n	800863c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80085d2:	6938      	ldr	r0, [r7, #16]
 80085d4:	f000 f836 	bl	8008644 <USBD_GetLen>
 80085d8:	4603      	mov	r3, r0
 80085da:	3301      	adds	r3, #1
 80085dc:	b29b      	uxth	r3, r3
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4413      	add	r3, r2
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7812      	ldrb	r2, [r2, #0]
 80085f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	3301      	adds	r3, #1
 80085f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	2203      	movs	r2, #3
 8008600:	701a      	strb	r2, [r3, #0]
  idx++;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	3301      	adds	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008608:	e013      	b.n	8008632 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	4413      	add	r3, r2
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
    idx++;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	3301      	adds	r3, #1
 8008620:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	4413      	add	r3, r2
 8008628:	2200      	movs	r2, #0
 800862a:	701a      	strb	r2, [r3, #0]
    idx++;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	3301      	adds	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e7      	bne.n	800860a <USBD_GetString+0x52>
 800863a:	e000      	b.n	800863e <USBD_GetString+0x86>
    return;
 800863c:	bf00      	nop
  }
}
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008654:	e005      	b.n	8008662 <USBD_GetLen+0x1e>
  {
    len++;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	3301      	adds	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3301      	adds	r3, #1
 8008660:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f5      	bne.n	8008656 <USBD_GetLen+0x12>
  }

  return len;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2202      	movs	r2, #2
 8008688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	2100      	movs	r1, #0
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fcbb 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	2100      	movs	r1, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fcaa 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2203      	movs	r2, #3
 80086e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fcae 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	2100      	movs	r1, #0
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fc9d 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2204      	movs	r2, #4
 8008738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800873c:	2300      	movs	r3, #0
 800873e:	2200      	movs	r2, #0
 8008740:	2100      	movs	r1, #0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fc69 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2205      	movs	r2, #5
 800875e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	2100      	movs	r1, #0
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc77 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800877c:	2200      	movs	r2, #0
 800877e:	4912      	ldr	r1, [pc, #72]	; (80087c8 <MX_USB_DEVICE_Init+0x50>)
 8008780:	4812      	ldr	r0, [pc, #72]	; (80087cc <MX_USB_DEVICE_Init+0x54>)
 8008782:	f7fe fd07 	bl	8007194 <USBD_Init>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800878c:	f7f8 fd9e 	bl	80012cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008790:	490f      	ldr	r1, [pc, #60]	; (80087d0 <MX_USB_DEVICE_Init+0x58>)
 8008792:	480e      	ldr	r0, [pc, #56]	; (80087cc <MX_USB_DEVICE_Init+0x54>)
 8008794:	f7fe fd2e 	bl	80071f4 <USBD_RegisterClass>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800879e:	f7f8 fd95 	bl	80012cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087a2:	490c      	ldr	r1, [pc, #48]	; (80087d4 <MX_USB_DEVICE_Init+0x5c>)
 80087a4:	4809      	ldr	r0, [pc, #36]	; (80087cc <MX_USB_DEVICE_Init+0x54>)
 80087a6:	f7fe fc65 	bl	8007074 <USBD_CDC_RegisterInterface>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087b0:	f7f8 fd8c 	bl	80012cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087b4:	4805      	ldr	r0, [pc, #20]	; (80087cc <MX_USB_DEVICE_Init+0x54>)
 80087b6:	f7fe fd53 	bl	8007260 <USBD_Start>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087c0:	f7f8 fd84 	bl	80012cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087c4:	bf00      	nop
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	200000ac 	.word	0x200000ac
 80087cc:	20000220 	.word	0x20000220
 80087d0:	20000018 	.word	0x20000018
 80087d4:	20000098 	.word	0x20000098

080087d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087dc:	2200      	movs	r2, #0
 80087de:	4905      	ldr	r1, [pc, #20]	; (80087f4 <CDC_Init_FS+0x1c>)
 80087e0:	4805      	ldr	r0, [pc, #20]	; (80087f8 <CDC_Init_FS+0x20>)
 80087e2:	f7fe fc61 	bl	80070a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087e6:	4905      	ldr	r1, [pc, #20]	; (80087fc <CDC_Init_FS+0x24>)
 80087e8:	4803      	ldr	r0, [pc, #12]	; (80087f8 <CDC_Init_FS+0x20>)
 80087ea:	f7fe fc7f 	bl	80070ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200008fc 	.word	0x200008fc
 80087f8:	20000220 	.word	0x20000220
 80087fc:	200004fc 	.word	0x200004fc

08008800 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008804:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008806:	4618      	mov	r0, r3
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
 800881c:	4613      	mov	r3, r2
 800881e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b23      	cmp	r3, #35	; 0x23
 8008824:	d84a      	bhi.n	80088bc <CDC_Control_FS+0xac>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <CDC_Control_FS+0x1c>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	080088bd 	.word	0x080088bd
 8008830:	080088bd 	.word	0x080088bd
 8008834:	080088bd 	.word	0x080088bd
 8008838:	080088bd 	.word	0x080088bd
 800883c:	080088bd 	.word	0x080088bd
 8008840:	080088bd 	.word	0x080088bd
 8008844:	080088bd 	.word	0x080088bd
 8008848:	080088bd 	.word	0x080088bd
 800884c:	080088bd 	.word	0x080088bd
 8008850:	080088bd 	.word	0x080088bd
 8008854:	080088bd 	.word	0x080088bd
 8008858:	080088bd 	.word	0x080088bd
 800885c:	080088bd 	.word	0x080088bd
 8008860:	080088bd 	.word	0x080088bd
 8008864:	080088bd 	.word	0x080088bd
 8008868:	080088bd 	.word	0x080088bd
 800886c:	080088bd 	.word	0x080088bd
 8008870:	080088bd 	.word	0x080088bd
 8008874:	080088bd 	.word	0x080088bd
 8008878:	080088bd 	.word	0x080088bd
 800887c:	080088bd 	.word	0x080088bd
 8008880:	080088bd 	.word	0x080088bd
 8008884:	080088bd 	.word	0x080088bd
 8008888:	080088bd 	.word	0x080088bd
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088bd 	.word	0x080088bd
 8008894:	080088bd 	.word	0x080088bd
 8008898:	080088bd 	.word	0x080088bd
 800889c:	080088bd 	.word	0x080088bd
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088bd 	.word	0x080088bd
 80088a8:	080088bd 	.word	0x080088bd
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088bd 	.word	0x080088bd
 80088b4:	080088bd 	.word	0x080088bd
 80088b8:	080088bd 	.word	0x080088bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088bc:	bf00      	nop
  }

  return (USBD_OK);
 80088be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4805      	ldr	r0, [pc, #20]	; (80088f0 <CDC_Receive_FS+0x24>)
 80088da:	f7fe fc07 	bl	80070ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088de:	4804      	ldr	r0, [pc, #16]	; (80088f0 <CDC_Receive_FS+0x24>)
 80088e0:	f7fe fc22 	bl	8007128 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000220 	.word	0x20000220

080088f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	6039      	str	r1, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2212      	movs	r2, #18
 8008928:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800892a:	4b03      	ldr	r3, [pc, #12]	; (8008938 <USBD_FS_DeviceDescriptor+0x20>)
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	200000c8 	.word	0x200000c8

0800893c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2204      	movs	r2, #4
 800894c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800894e:	4b03      	ldr	r3, [pc, #12]	; (800895c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	200000dc 	.word	0x200000dc

08008960 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4907      	ldr	r1, [pc, #28]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
 8008976:	4808      	ldr	r0, [pc, #32]	; (8008998 <USBD_FS_ProductStrDescriptor+0x38>)
 8008978:	f7ff fe1e 	bl	80085b8 <USBD_GetString>
 800897c:	e004      	b.n	8008988 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	4904      	ldr	r1, [pc, #16]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
 8008982:	4805      	ldr	r0, [pc, #20]	; (8008998 <USBD_FS_ProductStrDescriptor+0x38>)
 8008984:	f7ff fe18 	bl	80085b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000cfc 	.word	0x20000cfc
 8008998:	080091bc 	.word	0x080091bc

0800899c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	6039      	str	r1, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	4904      	ldr	r1, [pc, #16]	; (80089bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089ac:	4804      	ldr	r0, [pc, #16]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089ae:	f7ff fe03 	bl	80085b8 <USBD_GetString>
  return USBD_StrDesc;
 80089b2:	4b02      	ldr	r3, [pc, #8]	; (80089bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000cfc 	.word	0x20000cfc
 80089c0:	080091d4 	.word	0x080091d4

080089c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	221a      	movs	r2, #26
 80089d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089d6:	f000 f843 	bl	8008a60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089da:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200000e0 	.word	0x200000e0

080089e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4907      	ldr	r1, [pc, #28]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 80089fe:	4808      	ldr	r0, [pc, #32]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a00:	f7ff fdda 	bl	80085b8 <USBD_GetString>
 8008a04:	e004      	b.n	8008a10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4904      	ldr	r1, [pc, #16]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a0a:	4805      	ldr	r0, [pc, #20]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a0c:	f7ff fdd4 	bl	80085b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000cfc 	.word	0x20000cfc
 8008a20:	080091e8 	.word	0x080091e8

08008a24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4907      	ldr	r1, [pc, #28]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a3a:	4808      	ldr	r0, [pc, #32]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a3c:	f7ff fdbc 	bl	80085b8 <USBD_GetString>
 8008a40:	e004      	b.n	8008a4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a48:	f7ff fdb6 	bl	80085b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000cfc 	.word	0x20000cfc
 8008a5c:	080091f4 	.word	0x080091f4

08008a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <Get_SerialNum+0x44>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_SerialNum+0x48>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <Get_SerialNum+0x4c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a86:	2208      	movs	r2, #8
 8008a88:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <Get_SerialNum+0x50>)
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f814 	bl	8008ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a90:	2204      	movs	r2, #4
 8008a92:	4908      	ldr	r1, [pc, #32]	; (8008ab4 <Get_SerialNum+0x54>)
 8008a94:	68b8      	ldr	r0, [r7, #8]
 8008a96:	f000 f80f 	bl	8008ab8 <IntToUnicode>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	1fff7a10 	.word	0x1fff7a10
 8008aa8:	1fff7a14 	.word	0x1fff7a14
 8008aac:	1fff7a18 	.word	0x1fff7a18
 8008ab0:	200000e2 	.word	0x200000e2
 8008ab4:	200000f2 	.word	0x200000f2

08008ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]
 8008ace:	e027      	b.n	8008b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d80b      	bhi.n	8008af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	0f1b      	lsrs	r3, r3, #28
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3230      	adds	r2, #48	; 0x30
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e00a      	b.n	8008b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	0f1b      	lsrs	r3, r3, #28
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4619      	mov	r1, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	440b      	add	r3, r1
 8008b00:	3237      	adds	r2, #55	; 0x37
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	3301      	adds	r3, #1
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
 8008b20:	7dfa      	ldrb	r2, [r7, #23]
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3d3      	bcc.n	8008ad0 <IntToUnicode+0x18>
  }
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b58:	d13a      	bne.n	8008bd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b84:	2303      	movs	r3, #3
 8008b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b88:	230a      	movs	r3, #10
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4619      	mov	r1, r3
 8008b92:	4812      	ldr	r0, [pc, #72]	; (8008bdc <HAL_PCD_MspInit+0xa4>)
 8008b94:	f7f9 fa96 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b98:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9c:	4a0e      	ldr	r2, [pc, #56]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	2043      	movs	r0, #67	; 0x43
 8008bc6:	f7f9 fa46 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bca:	2043      	movs	r0, #67	; 0x43
 8008bcc:	f7f9 fa5f 	bl	800208e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3728      	adds	r7, #40	; 0x28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40020000 	.word	0x40020000

08008be0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe fb7f 	bl	80072fa <USBD_LL_SetupStage>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c16:	78fa      	ldrb	r2, [r7, #3]
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f7fe fbb9 	bl	80073a4 <USBD_LL_DataOutStage>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4613      	mov	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	334c      	adds	r3, #76	; 0x4c
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	4619      	mov	r1, r3
 8008c62:	f7fe fc52 	bl	800750a <USBD_LL_DataInStage>
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fd86 	bl	800778e <USBD_LL_SOF>
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c92:	2301      	movs	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d001      	beq.n	8008ca2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c9e:	f7f8 fb15 	bl	80012cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ca8:	7bfa      	ldrb	r2, [r7, #15]
 8008caa:	4611      	mov	r1, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fd30 	bl	8007712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe fcd8 	bl	800766e <USBD_LL_Reset>
}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fd2b 	bl	8007732 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <HAL_PCD_SuspendCallback+0x48>)
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	4a03      	ldr	r2, [pc, #12]	; (8008d10 <HAL_PCD_SuspendCallback+0x48>)
 8008d02:	f043 0306 	orr.w	r3, r3, #6
 8008d06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	e000ed00 	.word	0xe000ed00

08008d14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fd1b 	bl	800775e <USBD_LL_Resume>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe fd73 	bl	8007832 <USBD_LL_IsoOUTIncomplete>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fd2f 	bl	80077ce <USBD_LL_IsoINIncomplete>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe fd85 	bl	8007896 <USBD_LL_DevConnected>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fd82 	bl	80078ac <USBD_LL_DevDisconnected>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d13c      	bne.n	8008e3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008dc0:	4a20      	ldr	r2, [pc, #128]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a1e      	ldr	r2, [pc, #120]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dda:	2204      	movs	r2, #4
 8008ddc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dde:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <USBD_LL_Init+0x94>)
 8008de0:	2202      	movs	r2, #2
 8008de2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <USBD_LL_Init+0x94>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dea:	4b16      	ldr	r3, [pc, #88]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dec:	2202      	movs	r2, #2
 8008dee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <USBD_LL_Init+0x94>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <USBD_LL_Init+0x94>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008dfc:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e0e:	480d      	ldr	r0, [pc, #52]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e10:	f7f9 fc3a 	bl	8002688 <HAL_PCD_Init>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e1a:	f7f8 fa57 	bl	80012cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	4808      	ldr	r0, [pc, #32]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e22:	f7fa fe92 	bl	8003b4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4806      	ldr	r0, [pc, #24]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e2c:	f7fa fe46 	bl	8003abc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	2101      	movs	r1, #1
 8008e34:	4803      	ldr	r0, [pc, #12]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e36:	f7fa fe41 	bl	8003abc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000efc 	.word	0x20000efc

08008e48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f9 fd2f 	bl	80028c2 <HAL_PCD_Start>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f942 	bl	80090f4 <USBD_Get_USB_Status>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	70fb      	strb	r3, [r7, #3]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70bb      	strb	r3, [r7, #2]
 8008e94:	4613      	mov	r3, r2
 8008e96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ea6:	78bb      	ldrb	r3, [r7, #2]
 8008ea8:	883a      	ldrh	r2, [r7, #0]
 8008eaa:	78f9      	ldrb	r1, [r7, #3]
 8008eac:	f7fa fa00 	bl	80032b0 <HAL_PCD_EP_Open>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f91c 	bl	80090f4 <USBD_Get_USB_Status>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fa fa49 	bl	8003380 <HAL_PCD_EP_Close>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f8fd 	bl	80090f4 <USBD_Get_USB_Status>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fa fb21 	bl	800356e <HAL_PCD_EP_SetStall>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f8de 	bl	80090f4 <USBD_Get_USB_Status>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fa fb66 	bl	8003636 <HAL_PCD_EP_ClrStall>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f8bf 	bl	80090f4 <USBD_Get_USB_Status>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	da0b      	bge.n	8008fb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	333e      	adds	r3, #62	; 0x3e
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	e00b      	b.n	8008fd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008fce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fa f933 	bl	8003266 <HAL_PCD_SetAddress>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f874 	bl	80090f4 <USBD_Get_USB_Status>
 800900c:	4603      	mov	r3, r0
 800900e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009010:	7bbb      	ldrb	r3, [r7, #14]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	460b      	mov	r3, r1
 8009028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009038:	7af9      	ldrb	r1, [r7, #11]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	f7fa fa4c 	bl	80034da <HAL_PCD_EP_Transmit>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f853 	bl	80090f4 <USBD_Get_USB_Status>
 800904e:	4603      	mov	r3, r0
 8009050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009052:	7dbb      	ldrb	r3, [r7, #22]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	460b      	mov	r3, r1
 800906a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800907a:	7af9      	ldrb	r1, [r7, #11]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	f7fa f9c8 	bl	8003414 <HAL_PCD_EP_Receive>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f832 	bl	80090f4 <USBD_Get_USB_Status>
 8009090:	4603      	mov	r3, r0
 8009092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009094:	7dbb      	ldrb	r3, [r7, #22]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fa f9f8 	bl	80034aa <HAL_PCD_EP_GetRxCount>
 80090ba:	4603      	mov	r3, r0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090cc:	4b03      	ldr	r3, [pc, #12]	; (80090dc <USBD_static_malloc+0x18>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20001408 	.word	0x20001408

080090e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d817      	bhi.n	8009138 <USBD_Get_USB_Status+0x44>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <USBD_Get_USB_Status+0x1c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009121 	.word	0x08009121
 8009114:	08009127 	.word	0x08009127
 8009118:	0800912d 	.word	0x0800912d
 800911c:	08009133 	.word	0x08009133
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e00b      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	e008      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]
    break;
 8009130:	e005      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	73fb      	strb	r3, [r7, #15]
    break;
 8009136:	e002      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	bf00      	nop
  }
  return usb_status;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <__libc_init_array>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	4d0d      	ldr	r5, [pc, #52]	; (8009184 <__libc_init_array+0x38>)
 8009150:	4c0d      	ldr	r4, [pc, #52]	; (8009188 <__libc_init_array+0x3c>)
 8009152:	1b64      	subs	r4, r4, r5
 8009154:	10a4      	asrs	r4, r4, #2
 8009156:	2600      	movs	r6, #0
 8009158:	42a6      	cmp	r6, r4
 800915a:	d109      	bne.n	8009170 <__libc_init_array+0x24>
 800915c:	4d0b      	ldr	r5, [pc, #44]	; (800918c <__libc_init_array+0x40>)
 800915e:	4c0c      	ldr	r4, [pc, #48]	; (8009190 <__libc_init_array+0x44>)
 8009160:	f000 f820 	bl	80091a4 <_init>
 8009164:	1b64      	subs	r4, r4, r5
 8009166:	10a4      	asrs	r4, r4, #2
 8009168:	2600      	movs	r6, #0
 800916a:	42a6      	cmp	r6, r4
 800916c:	d105      	bne.n	800917a <__libc_init_array+0x2e>
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	f855 3b04 	ldr.w	r3, [r5], #4
 8009174:	4798      	blx	r3
 8009176:	3601      	adds	r6, #1
 8009178:	e7ee      	b.n	8009158 <__libc_init_array+0xc>
 800917a:	f855 3b04 	ldr.w	r3, [r5], #4
 800917e:	4798      	blx	r3
 8009180:	3601      	adds	r6, #1
 8009182:	e7f2      	b.n	800916a <__libc_init_array+0x1e>
 8009184:	08009224 	.word	0x08009224
 8009188:	08009224 	.word	0x08009224
 800918c:	08009224 	.word	0x08009224
 8009190:	08009228 	.word	0x08009228

08009194 <memset>:
 8009194:	4402      	add	r2, r0
 8009196:	4603      	mov	r3, r0
 8009198:	4293      	cmp	r3, r2
 800919a:	d100      	bne.n	800919e <memset+0xa>
 800919c:	4770      	bx	lr
 800919e:	f803 1b01 	strb.w	r1, [r3], #1
 80091a2:	e7f9      	b.n	8009198 <memset+0x4>

080091a4 <_init>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr

080091b0 <_fini>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr

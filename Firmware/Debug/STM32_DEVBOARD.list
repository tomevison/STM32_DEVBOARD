
STM32_DEVBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800ab3c  0800ab3c  0001ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab9c  0800ab9c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aba4  0800aba4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800abac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  20000100  0800aca8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  0800aca8  000216a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a60f  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a60  00000000  00000000  0003a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0003e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0003f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006341  00000000  00000000  00040d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c67b  00000000  00000000  000470b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f11f  00000000  00000000  0006372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010284b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f8  00000000  00000000  0010289c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ab24 	.word	0x0800ab24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	0800ab24 	.word	0x0800ab24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <LIS2_Init>:
#include "LIS2DW12.h"

uint8_t buf[20] = {0};
HAL_StatusTypeDef ret;

HAL_StatusTypeDef LIS2_Init(LIS2 *dev, I2C_HandleTypeDef *hi2c1){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]

	dev->i2cHandl = hi2c1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	601a      	str	r2, [r3, #0]

	// check device ID
	buf[0] = LIS2DW12_REG_WHOAMI;
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <LIS2_Init+0x180>)
 8000dda:	220f      	movs	r2, #15
 8000ddc:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Read(hi2c1, (LISaddr<<1), LIS2DW12_REG_WHOAMI, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <LIS2_Init+0x180>)
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	220f      	movs	r2, #15
 8000df0:	2132      	movs	r1, #50	; 0x32
 8000df2:	6838      	ldr	r0, [r7, #0]
 8000df4:	f001 ff58 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <LIS2_Init+0x184>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	if (( ret != HAL_OK ) || buf[0] != WHO_AM_I) {return HAL_ERROR; }
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <LIS2_Init+0x184>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d103      	bne.n	8000e10 <LIS2_Init+0x48>
 8000e08:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <LIS2_Init+0x180>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b44      	cmp	r3, #68	; 0x44
 8000e0e:	d001      	beq.n	8000e14 <LIS2_Init+0x4c>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e094      	b.n	8000f3e <LIS2_Init+0x176>

	LIS2_reset(dev);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f9a1 	bl	800115c <LIS2_reset>

	// Control Register 1
	// LP_MODE[1:0]
	buf[0] = (ODR<<4) | (MODE<<2) | LP_MODE;
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <LIS2_Init+0x180>)
 8000e1c:	2259      	movs	r2, #89	; 0x59
 8000e1e:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(hi2c1, (LISaddr<<1), LIS2DW12_REG_CTRL1, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	2301      	movs	r3, #1
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <LIS2_Init+0x180>)
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2220      	movs	r2, #32
 8000e32:	2132      	movs	r1, #50	; 0x32
 8000e34:	6838      	ldr	r0, [r7, #0]
 8000e36:	f001 fe3d 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <LIS2_Init+0x184>)
 8000e40:	701a      	strb	r2, [r3, #0]

	// Control Register 2
	buf[0] = (BOOT<<7) |(SOFT_RESET<<6)|(ZERO<<5)|(CS_PU_DISC<<4) |(BDU<<3) |(IF_ADD_INC<<2) | (I2C_DISABLE<<1) | SIM;
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <LIS2_Init+0x180>)
 8000e44:	220c      	movs	r2, #12
 8000e46:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(hi2c1, (LISaddr<<1), LIS2DW12_REG_CTRL2, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <LIS2_Init+0x180>)
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2301      	movs	r3, #1
 8000e58:	2221      	movs	r2, #33	; 0x21
 8000e5a:	2132      	movs	r1, #50	; 0x32
 8000e5c:	6838      	ldr	r0, [r7, #0]
 8000e5e:	f001 fe29 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <LIS2_Init+0x184>)
 8000e68:	701a      	strb	r2, [r3, #0]

	// Control Register 3
	buf[0] = (ST<<6)|(PP_OD<<5)|(LIR<<4) |(H_LACTIVE<<3) | (SLP_MODE_SEL<<1) | SLP_MODE_1;
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <LIS2_Init+0x180>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(hi2c1, (LISaddr<<1), LIS2DW12_REG_CTRL3, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <LIS2_Init+0x180>)
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2222      	movs	r2, #34	; 0x22
 8000e82:	2132      	movs	r1, #50	; 0x32
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f001 fe15 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <LIS2_Init+0x184>)
 8000e90:	701a      	strb	r2, [r3, #0]

	// Control Register 6
	buf[0] = (BW_FILT<<6)|(FS<<4) |(FDS<<3) | (LOW_NOISE<<2);
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <LIS2_Init+0x180>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(hi2c1, (LISaddr<<1), LIS2DW12_REG_CTRL6, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <LIS2_Init+0x180>)
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	2225      	movs	r2, #37	; 0x25
 8000eaa:	2132      	movs	r1, #50	; 0x32
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f001 fe01 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <LIS2_Init+0x184>)
 8000eb8:	701a      	strb	r2, [r3, #0]

	// read all control registers
	ret = HAL_I2C_Mem_Read(hi2c1, (LISaddr<<1), LIS2DW12_REG_CTRL1, I2C_MEMADD_SIZE_8BIT, &buf[0], 6, i2cTout);
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <LIS2_Init+0x180>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2220      	movs	r2, #32
 8000ecc:	2132      	movs	r1, #50	; 0x32
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f001 feea 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <LIS2_Init+0x184>)
 8000eda:	701a      	strb	r2, [r3, #0]

	// read fifo
	ret = HAL_I2C_Mem_Read(hi2c1, (LISaddr<<1), LIS2DW12_REG_FIFO_CTRL, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <LIS2_Init+0x180>)
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	222e      	movs	r2, #46	; 0x2e
 8000eee:	2132      	movs	r1, #50	; 0x32
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f001 fed9 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <LIS2_Init+0x184>)
 8000efc:	701a      	strb	r2, [r3, #0]
	buf[0] |= 1 <<6; // Fmode[2:0]=0b110 fifo mode continuous
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <LIS2_Init+0x180>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <LIS2_Init+0x180>)
 8000f0a:	701a      	strb	r2, [r3, #0]
	buf[0] |= 1 <<7;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <LIS2_Init+0x180>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <LIS2_Init+0x180>)
 8000f18:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(hi2c1, (LISaddr<<1), LIS2DW12_REG_FIFO_CTRL, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LIS2_Init+0x180>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	222e      	movs	r2, #46	; 0x2e
 8000f2c:	2132      	movs	r1, #50	; 0x32
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f001 fdc0 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <LIS2_Init+0x184>)
 8000f3a:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000011c 	.word	0x2000011c
 8000f4c:	20000130 	.word	0x20000130

08000f50 <LIS2_Refresh>:

HAL_StatusTypeDef LIS2_Refresh(LIS2 *dev){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]

	// read status
	ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_CTRL3, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <LIS2_Refresh+0x200>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2222      	movs	r2, #34	; 0x22
 8000f6e:	2132      	movs	r1, #50	; 0x32
 8000f70:	f001 fe9a 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b76      	ldr	r3, [pc, #472]	; (8001154 <LIS2_Refresh+0x204>)
 8000f7a:	701a      	strb	r2, [r3, #0]
	buf[0] |= 1 << 0; // SLP_MODE_1
 8000f7c:	4b74      	ldr	r3, [pc, #464]	; (8001150 <LIS2_Refresh+0x200>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <LIS2_Refresh+0x200>)
 8000f88:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_CTRL3, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <LIS2_Refresh+0x200>)
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2222      	movs	r2, #34	; 0x22
 8000fa0:	2132      	movs	r1, #50	; 0x32
 8000fa2:	f001 fd87 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <LIS2_Refresh+0x204>)
 8000fac:	701a      	strb	r2, [r3, #0]

	while(buf[0] & (1 << 0)){
 8000fae:	e014      	b.n	8000fda <LIS2_Refresh+0x8a>
		ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_CTRL3, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	4b64      	ldr	r3, [pc, #400]	; (8001150 <LIS2_Refresh+0x200>)
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2222      	movs	r2, #34	; 0x22
 8000fc6:	2132      	movs	r1, #50	; 0x32
 8000fc8:	f001 fe6e 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b60      	ldr	r3, [pc, #384]	; (8001154 <LIS2_Refresh+0x204>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f000 fedb 	bl	8001d90 <HAL_Delay>
	while(buf[0] & (1 << 0)){
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <LIS2_Refresh+0x200>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1e4      	bne.n	8000fb0 <LIS2_Refresh+0x60>
	}; // wait for SLP_MODE_1 to == 0

	// read temperature
	ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_OUT_T, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b56      	ldr	r3, [pc, #344]	; (8001150 <LIS2_Refresh+0x200>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2226      	movs	r2, #38	; 0x26
 8000ffc:	2132      	movs	r1, #50	; 0x32
 8000ffe:	f001 fe53 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <LIS2_Refresh+0x204>)
 8001008:	701a      	strb	r2, [r3, #0]
	dev->temp_8bit = (buf[0] + 25);
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <LIS2_Refresh+0x200>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3319      	adds	r3, #25
 8001010:	b2db      	uxtb	r3, r3
 8001012:	b25a      	sxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	711a      	strb	r2, [r3, #4]

	// read temperature 12bit res
	ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_OUT_T_L, I2C_MEMADD_SIZE_8BIT, &buf[0], 2, i2cTout);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2302      	movs	r3, #2
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <LIS2_Refresh+0x200>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	220d      	movs	r2, #13
 800102e:	2132      	movs	r1, #50	; 0x32
 8001030:	f001 fe3a 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <LIS2_Refresh+0x204>)
 800103a:	701a      	strb	r2, [r3, #0]
	dev->temp_12bit = (buf[0] | buf[1]<<8) + 25;
 800103c:	4b44      	ldr	r3, [pc, #272]	; (8001150 <LIS2_Refresh+0x200>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <LIS2_Refresh+0x200>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	4313      	orrs	r3, r2
 800104a:	3319      	adds	r3, #25
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa15 	bl	800047c <__aeabi_i2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// read orientation z
	ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_OUT_X_L, I2C_MEMADD_SIZE_8BIT, &buf[0], 6, i2cTout);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2306      	movs	r3, #6
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <LIS2_Refresh+0x200>)
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2228      	movs	r2, #40	; 0x28
 8001072:	2132      	movs	r1, #50	; 0x32
 8001074:	f001 fe18 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <LIS2_Refresh+0x204>)
 800107e:	701a      	strb	r2, [r3, #0]
	dev->accX = ((int16_t)(buf[0] | buf[1]<<8) /4.0)*0.244; // g
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <LIS2_Refresh+0x200>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <LIS2_Refresh+0x200>)
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9f2 	bl	800047c <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <LIS2_Refresh+0x208>)
 800109e:	f7ff fb81 	bl	80007a4 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a327      	add	r3, pc, #156	; (adr r3, 8001148 <LIS2_Refresh+0x1f8>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa4e 	bl	8000550 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->accY = ((int16_t)(buf[2] | buf[3]<<8) /4.0)*0.244; // g
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <LIS2_Refresh+0x200>)
 80010c0:	789b      	ldrb	r3, [r3, #2]
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <LIS2_Refresh+0x200>)
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9d3 	bl	800047c <__aeabi_i2d>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <LIS2_Refresh+0x208>)
 80010dc:	f7ff fb62 	bl	80007a4 <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a317      	add	r3, pc, #92	; (adr r3, 8001148 <LIS2_Refresh+0x1f8>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa2f 	bl	8000550 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->accZ = ((int16_t)(buf[4] | buf[5]<<8) /4.0)*0.244; // g
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <LIS2_Refresh+0x200>)
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <LIS2_Refresh+0x200>)
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f9b4 	bl	800047c <__aeabi_i2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <LIS2_Refresh+0x208>)
 800111a:	f7ff fb43 	bl	80007a4 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	a308      	add	r3, pc, #32	; (adr r3, 8001148 <LIS2_Refresh+0x1f8>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fa10 	bl	8000550 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	e9c1 2308 	strd	r2, r3, [r1, #32]


	return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	f3af 8000 	nop.w
 8001148:	5a1cac08 	.word	0x5a1cac08
 800114c:	3fcf3b64 	.word	0x3fcf3b64
 8001150:	2000011c 	.word	0x2000011c
 8001154:	20000130 	.word	0x20000130
 8001158:	40100000 	.word	0x40100000

0800115c <LIS2_reset>:

uint8_t LIS2_getStatus(LIS2 *dev){
	return 0xFF;
}

HAL_StatusTypeDef LIS2_reset(LIS2 *dev){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
	ret = HAL_I2C_Mem_Read(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_CTRL2, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <LIS2_reset+0x70>)
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	2221      	movs	r2, #33	; 0x21
 800117a:	2132      	movs	r1, #50	; 0x32
 800117c:	f001 fd94 	bl	8002ca8 <HAL_I2C_Mem_Read>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <LIS2_reset+0x74>)
 8001186:	701a      	strb	r2, [r3, #0]
	buf[0] |= 0x40;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <LIS2_reset+0x70>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <LIS2_reset+0x70>)
 8001194:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(dev->i2cHandl, (LISaddr<<1), LIS2DW12_REG_CTRL2, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, i2cTout);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <LIS2_reset+0x70>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2221      	movs	r2, #33	; 0x21
 80011ac:	2132      	movs	r1, #50	; 0x32
 80011ae:	f001 fc81 	bl	8002ab4 <HAL_I2C_Mem_Write>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <LIS2_reset+0x74>)
 80011b8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f000 fde8 	bl	8001d90 <HAL_Delay>
	return HAL_OK;
 80011c0:	2300      	movs	r3, #0

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000011c 	.word	0x2000011c
 80011d0:	20000130 	.word	0x20000130

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011da:	f000 fd67 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011de:	f000 f84d 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e2:	f000 fa0d 	bl	8001600 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011e6:	f000 f8b3 	bl	8001350 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011ea:	f000 f903 	bl	80013f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011ee:	f000 f92f 	bl	8001450 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011f2:	f008 ff81 	bl	800a0f8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80011f6:	f000 f961 	bl	80014bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t adc_val;
  double VMEAS, VIN;
  int running = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]

  //BME280_Init(&bme, &hspi1, SPI1_CSB_GPIO_Port, SPI1_CSB_Pin);
  LIS2_Init(&lis, &hi2c1);
 80011fe:	491b      	ldr	r1, [pc, #108]	; (800126c <main+0x98>)
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <main+0x9c>)
 8001202:	f7ff fde1 	bl	8000dc8 <LIS2_Init>
//	  VIN = (252.0*VMEAS)/32.0;
//
//	  HAL_ADC_Stop(&hadc1); // stop adc

	  //BME280_updateValues(&bme);
	  if(!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 8001206:	2104      	movs	r1, #4
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <main+0xa0>)
 800120a:	f001 fadd 	bl	80027c8 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <main+0x5c>
		  if(!running){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d117      	bne.n	800124a <main+0x76>
			  running = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800121e:	2108      	movs	r1, #8
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <main+0xa4>)
 8001222:	f004 faf3 	bl	800580c <HAL_TIM_PWM_Start>
			  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001226:	2108      	movs	r1, #8
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <main+0xa4>)
 800122a:	f005 f993 	bl	8006554 <HAL_TIMEx_PWMN_Start>
 800122e:	e00c      	b.n	800124a <main+0x76>
		  }
	  }else{
		  if(running){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <main+0x76>
			  running = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
			  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 800123a:	2108      	movs	r1, #8
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <main+0xa4>)
 800123e:	f004 fb95 	bl	800596c <HAL_TIM_PWM_Stop>
			  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001242:	2108      	movs	r1, #8
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <main+0xa4>)
 8001246:	f005 fa31 	bl	80066ac <HAL_TIMEx_PWMN_Stop>
		  }
	  }
	  LIS2_Refresh(&lis);
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <main+0x9c>)
 800124c:	f7ff fe80 	bl	8000f50 <LIS2_Refresh>
	  PIEZO_setHz(lis.accZ, &htim1);
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <main+0x9c>)
 8001252:	ed93 7b08 	vldr	d7, [r3, #32]
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <main+0xa4>)
 8001258:	eeb0 0a47 	vmov.f32	s0, s14
 800125c:	eef0 0a67 	vmov.f32	s1, s15
 8001260:	f000 fa56 	bl	8001710 <PIEZO_setHz>
	  HAL_Delay(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f000 fd93 	bl	8001d90 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 800126a:	e7cc      	b.n	8001206 <main+0x32>
 800126c:	2000017c 	.word	0x2000017c
 8001270:	20000270 	.word	0x20000270
 8001274:	40020000 	.word	0x40020000
 8001278:	20000228 	.word	0x20000228

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f009 fc42 	bl	800ab14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <SystemClock_Config+0xd0>)
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <SystemClock_Config+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012f4:	2348      	movs	r3, #72	; 0x48
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fccd 	bl	8004ca4 <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001310:	f000 f9f6 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ff30 	bl	8005194 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133a:	f000 f9e1 	bl	8001700 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_ADC1_Init+0x98>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_ADC1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_ADC1_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_ADC1_Init+0xa0>)
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_ADC1_Init+0x98>)
 800139c:	2201      	movs	r2, #1
 800139e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013b0:	f000 fd12 	bl	8001dd8 <HAL_ADC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f9a1 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013d0:	f000 fd46 	bl	8001e60 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013da:	f000 f991 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000134 	.word	0x20000134
 80013ec:	40012000 	.word	0x40012000
 80013f0:	0f000001 	.word	0x0f000001

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_I2C1_Init+0x54>)
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <MX_I2C1_Init+0x58>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0x54>)
 8001400:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001404:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_I2C1_Init+0x54>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C1_Init+0x54>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_I2C1_Init+0x54>)
 8001414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_I2C1_Init+0x54>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C1_Init+0x54>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_I2C1_Init+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C1_Init+0x54>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_I2C1_Init+0x54>)
 8001434:	f001 f9fa 	bl	800282c <HAL_I2C_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800143e:	f000 f95f 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000017c 	.word	0x2000017c
 800144c:	40005400 	.word	0x40005400

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_SPI1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001484:	2218      	movs	r2, #24
 8001486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI1_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_SPI1_Init+0x64>)
 80014a2:	f004 f881 	bl	80055a8 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 f928 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200001d0 	.word	0x200001d0
 80014b8:	40013000 	.word	0x40013000

080014bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b096      	sub	sp, #88	; 0x58
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2220      	movs	r2, #32
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f009 fb0d 	bl	800ab14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <MX_TIM1_Init+0x13c>)
 80014fc:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <MX_TIM1_Init+0x140>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001502:	2201      	movs	r2, #1
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 61538-1;
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <MX_TIM1_Init+0x13c>)
 800150e:	f24f 0261 	movw	r2, #61537	; 0xf061
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <MX_TIM1_Init+0x13c>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001526:	4834      	ldr	r0, [pc, #208]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001528:	f004 f8c7 	bl	80056ba <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001532:	f000 f8e5 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001540:	4619      	mov	r1, r3
 8001542:	482d      	ldr	r0, [pc, #180]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001544:	f004 fc40 	bl	8005dc8 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800154e:	f000 f8d7 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001554:	f004 f900 	bl	8005758 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800155e:	f000 f8cf 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156e:	4619      	mov	r1, r3
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <MX_TIM1_Init+0x13c>)
 8001572:	f005 f8f9 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800157c:	f000 f8c0 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001580:	2360      	movs	r3, #96	; 0x60
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65138/2;
 8001584:	f647 7339 	movw	r3, #32569	; 0x7f39
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	2208      	movs	r2, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_TIM1_Init+0x13c>)
 80015a8:	f004 fb4c 	bl	8005c44 <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015b2:	f000 f8a5 	bl	8001700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_TIM1_Init+0x13c>)
 80015da:	f005 f933 	bl	8006844 <HAL_TIMEx_ConfigBreakDeadTime>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015e4:	f000 f88c 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <MX_TIM1_Init+0x13c>)
 80015ea:	f000 fa8d 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 80015ee:	bf00      	nop
 80015f0:	3758      	adds	r7, #88	; 0x58
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000228 	.word	0x20000228
 80015fc:	40010000 	.word	0x40010000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <MX_GPIO_Init+0xf4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <MX_GPIO_Init+0xf4>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <MX_GPIO_Init+0xf4>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_GPIO_Init+0xf4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2110      	movs	r1, #16
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <MX_GPIO_Init+0xf8>)
 800168c:	f001 f8b4 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <MX_GPIO_Init+0xfc>)
 8001696:	f001 f8af 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_GPIO_Init+0xf8>)
 80016ae:	f000 ff07 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80016b2:	2310      	movs	r3, #16
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_GPIO_Init+0xf8>)
 80016ca:	f000 fef9 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016ce:	2340      	movs	r3, #64	; 0x40
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_GPIO_Init+0xfc>)
 80016e6:	f000 feeb 	bl	80024c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020800 	.word	0x40020800

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
 800170a:	0000      	movs	r0, r0
 800170c:	0000      	movs	r0, r0
	...

08001710 <PIEZO_setHz>:
 *  Created on: Jun 12, 2023
 *      Author: me
 */
#include "piezo.h"

HAL_StatusTypeDef PIEZO_setHz(double g, TIM_HandleTypeDef *timer){
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08d      	sub	sp, #52	; 0x34
 8001714:	af00      	add	r7, sp, #0
 8001716:	ed87 0b02 	vstr	d0, [r7, #8]
 800171a:	6078      	str	r0, [r7, #4]
	// input should range from 0-1000g
	// we wanto scale this from 131Hz to 523Hz

	// preload from 61068.70229 >> 15037.59398
	//double low = 61068.702; // low frequency C3
	double low = 30651.34; // low frequency C4
 800171c:	a335      	add	r3, pc, #212	; (adr r3, 80017f4 <PIEZO_setHz+0xe4>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double hig = 15037.594; // high frequency C5
 8001726:	a335      	add	r3, pc, #212	; (adr r3, 80017fc <PIEZO_setHz+0xec>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// limit the input acceleration
	if(g>1000){
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <PIEZO_setHz+0xe0>)
 8001736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800173a:	f7ff f999 	bl	8000a70 <__aeabi_dcmpgt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <PIEZO_setHz+0x40>
		g = 1000;
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <PIEZO_setHz+0xe0>)
 800174a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800174e:	e010      	b.n	8001772 <PIEZO_setHz+0x62>
	}else if(g<=0){
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175c:	f7ff f974 	bl	8000a48 <__aeabi_dcmple>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <PIEZO_setHz+0x62>
		g = 0;
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	// scale to frequency
	double prelod = map(g, 0,1000,hig,low);
 8001772:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8001776:	ed97 3b08 	vldr	d3, [r7, #32]
 800177a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 80017e0 <PIEZO_setHz+0xd0>
 800177e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80017e8 <PIEZO_setHz+0xd8>
 8001782:	ed97 0b02 	vldr	d0, [r7, #8]
 8001786:	f000 f83d 	bl	8001804 <map>
 800178a:	ed87 0b06 	vstr	d0, [r7, #24]
	double dutyCycle = prelod/2;
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179a:	f7ff f803 	bl	80007a4 <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
	//TIM1->ARR = (uint32_t)prelod;
	//TIM1->CCR3 = (uint32_t)dutyCycle;
	__HAL_TIM_SET_AUTORELOAD(timer,(uint32_t)prelod); // 31khz
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ae:	f7ff f969 	bl	8000a84 <__aeabi_d2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ba:	f7ff f963 	bl	8000a84 <__aeabi_d2uiz>
 80017be:	4602      	mov	r2, r0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(timer,TIM_CHANNEL_3,(uint32_t)dutyCycle);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681c      	ldr	r4, [r3, #0]
 80017c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017cc:	f7ff f95a 	bl	8000a84 <__aeabi_d2uiz>
 80017d0:	4603      	mov	r3, r0
 80017d2:	63e3      	str	r3, [r4, #60]	; 0x3c

	return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3734      	adds	r7, #52	; 0x34
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	00000000 	.word	0x00000000
 80017e4:	408f4000 	.word	0x408f4000
	...
 80017f0:	408f4000 	.word	0x408f4000
 80017f4:	c28f5c29 	.word	0xc28f5c29
 80017f8:	40ddeed5 	.word	0x40ddeed5
 80017fc:	083126e9 	.word	0x083126e9
 8001800:	40cd5ecc 	.word	0x40cd5ecc

08001804 <map>:

double map(double x, double in_min, double in_max, double out_min, double out_max){
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	ed87 0b08 	vstr	d0, [r7, #32]
 800180e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001812:	ed87 2b04 	vstr	d2, [r7, #16]
 8001816:	ed87 3b02 	vstr	d3, [r7, #8]
 800181a:	ed87 4b00 	vstr	d4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800181e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001822:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001826:	f7fe fcdb 	bl	80001e0 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800183a:	f7fe fcd1 	bl	80001e0 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4620      	mov	r0, r4
 8001844:	4629      	mov	r1, r5
 8001846:	f7fe fe83 	bl	8000550 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4614      	mov	r4, r2
 8001850:	461d      	mov	r5, r3
 8001852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001856:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800185a:	f7fe fcc1 	bl	80001e0 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7fe ff9d 	bl	80007a4 <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001876:	f7fe fcb5 	bl	80001e4 <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001882:	eeb0 0a47 	vmov.f32	s0, s14
 8001886:	eef0 0a67 	vmov.f32	s1, s15
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_ADC_MspInit+0x7c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d127      	bne.n	8001952 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_ADC_MspInit+0x80>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_ADC_MspInit+0x80>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_ADC_MspInit+0x80>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_ADC_MspInit+0x80>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_ADC_MspInit+0x80>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_ADC_MspInit+0x80>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VMEAS_Pin;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VMEAS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_ADC_MspInit+0x84>)
 800194e:	f000 fdb7 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40012000 	.word	0x40012000
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_I2C_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b8:	2304      	movs	r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HAL_I2C_MspInit+0x8c>)
 80019c4:	f000 fd7c 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_I2C_MspInit+0x88>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40005400 	.word	0x40005400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_SPI_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a52:	23e0      	movs	r3, #224	; 0xe0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	f000 fd27 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_TIM_Base_MspInit+0x78>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12d      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2018      	movs	r0, #24
 8001abc:	f000 fcc9 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ac0:	2018      	movs	r0, #24
 8001ac2:	f000 fce2 	bl	800248a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2019      	movs	r0, #25
 8001acc:	f000 fcc1 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ad0:	2019      	movs	r0, #25
 8001ad2:	f000 fcda 	bl	800248a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201a      	movs	r0, #26
 8001adc:	f000 fcb9 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ae0:	201a      	movs	r0, #26
 8001ae2:	f000 fcd2 	bl	800248a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201b      	movs	r0, #27
 8001aec:	f000 fcb1 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af0:	201b      	movs	r0, #27
 8001af2:	f000 fcca 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_TIM_MspPostInit+0x68>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11e      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_TIM_MspPostInit+0x6c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_TIM_MspPostInit+0x6c>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0x6c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_TIM_MspPostInit+0x70>)
 8001b64:	f000 fcac 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020400 	.word	0x40020400

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f8c2 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bd6:	f003 ff2d 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000228 	.word	0x20000228

08001be4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bea:	f003 ff23 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000228 	.word	0x20000228

08001bf8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bfe:	f003 ff19 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000228 	.word	0x20000228

08001c0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM1_CC_IRQHandler+0x10>)
 8001c12:	f003 ff0f 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000228 	.word	0x20000228

08001c20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <OTG_FS_IRQHandler+0x10>)
 8001c26:	f001 ff10 	bl	8003a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000f7c 	.word	0x20000f7c

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffd7 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f008 ff21 	bl	800aacc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7ff faa3 	bl	80011d4 <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001c9c:	0800abac 	.word	0x0800abac
  ldr r2, =_sbss
 8001ca0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001ca4:	200016a8 	.word	0x200016a8

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_Init+0x40>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_Init+0x40>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x40>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 fbb1 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff fdd6 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fbc9 	bl	80024a6 <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 fb91 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000298 	.word	0x20000298

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000298 	.word	0x20000298

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff ffee 	bl	8001d78 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e033      	b.n	8001e56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fd72 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1e:	f023 0302 	bic.w	r3, r3, #2
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f93a 	bl	80020a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
 8001e46:	e001      	b.n	8001e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1c>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e105      	b.n	8002088 <HAL_ADC_ConfigChannel+0x228>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d925      	bls.n	8001ed8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b1e      	subs	r3, #30
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	400a      	ands	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4403      	add	r3, r0
 8001eca:	3b1e      	subs	r3, #30
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	e022      	b.n	8001f1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	2207      	movs	r2, #7
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4403      	add	r3, r0
 8001f14:	409a      	lsls	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d824      	bhi.n	8001f70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b05      	subs	r3, #5
 8001f38:	221f      	movs	r2, #31
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b05      	subs	r3, #5
 8001f62:	fa00 f203 	lsl.w	r2, r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6e:	e04c      	b.n	800200a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d824      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b23      	subs	r3, #35	; 0x23
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43da      	mvns	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	400a      	ands	r2, r1
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b23      	subs	r3, #35	; 0x23
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc0:	e023      	b.n	800200a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b41      	subs	r3, #65	; 0x41
 8001fd4:	221f      	movs	r2, #31
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b41      	subs	r3, #65	; 0x41
 8001ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_ADC_ConfigChannel+0x234>)
 800200c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_ADC_ConfigChannel+0x238>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d109      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1cc>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b12      	cmp	r3, #18
 800201e:	d105      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_ADC_ConfigChannel+0x238>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d123      	bne.n	800207e <HAL_ADC_ConfigChannel+0x21e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b10      	cmp	r3, #16
 800203c:	d003      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x1e6>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b11      	cmp	r3, #17
 8002044:	d11b      	bne.n	800207e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b10      	cmp	r3, #16
 8002058:	d111      	bne.n	800207e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_ADC_ConfigChannel+0x23c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_ADC_ConfigChannel+0x240>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	0c9a      	lsrs	r2, r3, #18
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40012300 	.word	0x40012300
 8002098:	40012000 	.word	0x40012000
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ac:	4b79      	ldr	r3, [pc, #484]	; (8002294 <ADC_Init+0x1f0>)
 80020ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	021a      	lsls	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	4a58      	ldr	r2, [pc, #352]	; (8002298 <ADC_Init+0x1f4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800214a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800216c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e00f      	b.n	80021a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0202 	bic.w	r2, r2, #2
 80021b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e1b      	ldrb	r3, [r3, #24]
 80021bc:	005a      	lsls	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	3b01      	subs	r3, #1
 80021fc:	035a      	lsls	r2, r3, #13
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e007      	b.n	8002218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002216:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	3b01      	subs	r3, #1
 8002234:	051a      	lsls	r2, r3, #20
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800224c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800225a:	025a      	lsls	r2, r3, #9
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	029a      	lsls	r2, r3, #10
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40012300 	.word	0x40012300
 8002298:	0f000001 	.word	0x0f000001

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	; (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff8e 	bl	800233c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff29 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff3e 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff8e 	bl	8002390 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5d 	bl	800233c <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff31 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffa2 	bl	80023f8 <SysTick_Config>
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e159      	b.n	8002790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8148 	bne.w	800278a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a2 	beq.w	800278a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_GPIO_Init+0x2f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x202>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x1fe>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_GPIO_Init+0x2f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x1fa>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_GPIO_Init+0x2fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x1f6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_GPIO_Init+0x300>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x1f2>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_GPIO_Init+0x304>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f aea2 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e12b      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff f888 	bl	8001968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002890:	f002 fe76 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a81      	ldr	r2, [pc, #516]	; (8002aa0 <HAL_I2C_Init+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d807      	bhi.n	80028b0 <HAL_I2C_Init+0x84>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <HAL_I2C_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x92>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <HAL_I2C_Init+0x27c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_I2C_Init+0x280>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_I2C_Init+0x274>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d802      	bhi.n	8002900 <HAL_I2C_Init+0xd4>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	e009      	b.n	8002914 <HAL_I2C_Init+0xe8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <HAL_I2C_Init+0x284>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	3301      	adds	r3, #1
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	; (8002aa0 <HAL_I2C_Init+0x274>)
 8002930:	428b      	cmp	r3, r1
 8002932:	d819      	bhi.n	8002968 <HAL_I2C_Init+0x13c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002948:	400b      	ands	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_I2C_Init+0x138>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e59      	subs	r1, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fbb1 f3f3 	udiv	r3, r1, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	e051      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e04f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_I2C_Init+0x168>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e012      	b.n	80029ba <HAL_I2C_Init+0x18e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x196>
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e58      	subs	r0, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6911      	ldr	r1, [r2, #16]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	001e847f 	.word	0x001e847f
 8002aa8:	003d08ff 	.word	0x003d08ff
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ace:	f7ff f953 	bl	8001d78 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	f040 80d9 	bne.w	8002c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2319      	movs	r3, #25
 8002ae8:	2201      	movs	r2, #1
 8002aea:	496d      	ldr	r1, [pc, #436]	; (8002ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fc7f 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0cc      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Mem_Write+0x56>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0c5      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d007      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2221      	movs	r2, #33	; 0x21
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b72:	88f8      	ldrh	r0, [r7, #6]
 8002b74:	893a      	ldrh	r2, [r7, #8]
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4603      	mov	r3, r0
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fab6 	bl	80030f4 <I2C_RequestMemoryWrite>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d052      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e081      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fd00 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11b      	bne.n	8002c34 <HAL_I2C_Mem_Write+0x180>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1aa      	bne.n	8002b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fcec 	bl	800361e <I2C_WaitOnBTFFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e016      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc2:	f7ff f859 	bl	8001d78 <HAL_GetTick>
 8002cc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	f040 8208 	bne.w	80030e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2319      	movs	r3, #25
 8002cdc:	2201      	movs	r2, #1
 8002cde:	497b      	ldr	r1, [pc, #492]	; (8002ecc <HAL_I2C_Mem_Read+0x224>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fb85 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
 8002cee:	e1fb      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x56>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e1f4      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d007      	beq.n	8002d24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2222      	movs	r2, #34	; 0x22
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a5b      	ldr	r2, [pc, #364]	; (8002ed0 <HAL_I2C_Mem_Read+0x228>)
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d66:	88f8      	ldrh	r0, [r7, #6]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4603      	mov	r3, r0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fa52 	bl	8003220 <I2C_RequestMemoryRead>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1b0      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e184      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d11b      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e164      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d11b      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	e144      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e4c:	e138      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	f200 80f1 	bhi.w	800303a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d123      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fc1b 	bl	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e139      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ea6:	e10b      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d14e      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4906      	ldr	r1, [pc, #24]	; (8002ed4 <HAL_I2C_Mem_Read+0x22c>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa98 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e10e      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
 8002eca:	bf00      	nop
 8002ecc:	00100002 	.word	0x00100002
 8002ed0:	ffff0000 	.word	0xffff0000
 8002ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f4c:	e0b8      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	2200      	movs	r2, #0
 8002f56:	4966      	ldr	r1, [pc, #408]	; (80030f0 <HAL_I2C_Mem_Read+0x448>)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fa49 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0bf      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	494f      	ldr	r1, [pc, #316]	; (80030f0 <HAL_I2C_Mem_Read+0x448>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fa1b 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e091      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003038:	e042      	b.n	80030c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fb2e 	bl	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e04c      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d118      	bne.n	80030c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f aec2 	bne.w	8002e4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	00010004 	.word	0x00010004

080030f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	2200      	movs	r2, #0
 8003126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f960 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003144:	d103      	bne.n	800314e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e05f      	b.n	8003212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	6a3a      	ldr	r2, [r7, #32]
 8003166:	492d      	ldr	r1, [pc, #180]	; (800321c <I2C_RequestMemoryWrite+0x128>)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f998 	bl	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04c      	b.n	8003212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	6a39      	ldr	r1, [r7, #32]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fa02 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d107      	bne.n	80031b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e02b      	b.n	8003212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031c0:	893b      	ldrh	r3, [r7, #8]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]
 80031ca:	e021      	b.n	8003210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f9dc 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d107      	bne.n	8003202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e005      	b.n	8003212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	00010002 	.word	0x00010002

08003220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f8c2 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d103      	bne.n	800328a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0aa      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800329c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	4952      	ldr	r1, [pc, #328]	; (80033ec <I2C_RequestMemoryRead+0x1cc>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f8fa 	bl	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e097      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f964 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e076      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	e021      	b.n	800334c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f93e 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e050      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	6a39      	ldr	r1, [r7, #32]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f923 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e035      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2200      	movs	r2, #0
 8003390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f82b 	bl	80033f0 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ae:	d103      	bne.n	80033b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e013      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	4906      	ldr	r1, [pc, #24]	; (80033ec <I2C_RequestMemoryRead+0x1cc>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f863 	bl	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010002 	.word	0x00010002

080033f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003400:	e025      	b.n	800344e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d021      	beq.n	800344e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fcb5 	bl	8001d78 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e023      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10d      	bne.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	e00c      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	429a      	cmp	r2, r3
 8003492:	d0b6      	beq.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ac:	e051      	b.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d123      	bne.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f043 0204 	orr.w	r2, r3, #4
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e046      	b.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d021      	beq.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe fc33 	bl	8001d78 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d116      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e020      	b.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10c      	bne.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e00b      	b.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d18d      	bne.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a8:	e02d      	b.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8ce 	bl	800374c <I2C_IsAcknowledgeFailed>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e02d      	b.n	8003616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d021      	beq.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fbd9 	bl	8001d78 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d1ca      	bne.n	80035aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800362a:	e02d      	b.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f88d 	bl	800374c <I2C_IsAcknowledgeFailed>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e02d      	b.n	8003698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d021      	beq.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe fb98 	bl	8001d78 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d1ca      	bne.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ac:	e042      	b.n	8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d119      	bne.n	80036f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e029      	b.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f0:	f7fe fb42 	bl	8001d78 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d302      	bcc.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e007      	b.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d1b5      	bne.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d11b      	bne.n	800379c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ac:	b08f      	sub	sp, #60	; 0x3c
 80037ae:	af0a      	add	r7, sp, #40	; 0x28
 80037b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e10f      	b.n	80039dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f006 fe6e 	bl	800a4b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 f9c1 	bl	8006b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	687e      	ldr	r6, [r7, #4]
 8003808:	466d      	mov	r5, sp
 800380a:	f106 0410 	add.w	r4, r6, #16
 800380e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381a:	e885 0003 	stmia.w	r5, {r0, r1}
 800381e:	1d33      	adds	r3, r6, #4
 8003820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f003 f899 	bl	800695a <USB_CoreInit>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0d0      	b.n	80039dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f003 f9af 	bl	8006ba4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e04a      	b.n	80038e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	333d      	adds	r3, #61	; 0x3d
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	b298      	uxth	r0, r3
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3344      	adds	r3, #68	; 0x44
 8003888:	4602      	mov	r2, r0
 800388a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3340      	adds	r3, #64	; 0x40
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3348      	adds	r3, #72	; 0x48
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	334c      	adds	r3, #76	; 0x4c
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3354      	adds	r3, #84	; 0x54
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	3301      	adds	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3af      	bcc.n	800384c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e044      	b.n	800397c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	3301      	adds	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b5      	bcc.n	80038f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	687e      	ldr	r6, [r7, #4]
 800398e:	466d      	mov	r5, sp
 8003990:	f106 0410 	add.w	r4, r6, #16
 8003994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80039a4:	1d33      	adds	r3, r6, #4
 80039a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	f003 f947 	bl	8006c3c <USB_DevInit>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e00d      	b.n	80039dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fa96 	bl	8007f06 <USB_DevDisconnect>

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_PCD_Start+0x1c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e020      	b.n	8003a42 <HAL_PCD_Start+0x5e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d109      	bne.n	8003a24 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d005      	beq.n	8003a24 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 f899 	bl	8006b60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fa46 	bl	8007ec4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a4a:	b590      	push	{r4, r7, lr}
 8003a4c:	b08d      	sub	sp, #52	; 0x34
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 fb04 	bl	800806e <USB_GetMode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f040 848a 	bne.w	8004382 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fa68 	bl	8007f48 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8480 	beq.w	8004380 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fa55 	bl	8007f48 <USB_ReadInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d107      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f002 0202 	and.w	r2, r2, #2
 8003ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 fa43 	bl	8007f48 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d161      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0210 	bic.w	r2, r2, #16
 8003ada:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	0c5b      	lsrs	r3, r3, #17
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d124      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d035      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	6a38      	ldr	r0, [r7, #32]
 8003b28:	f004 f87a 	bl	8007c20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b38:	441a      	add	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4a:	441a      	add	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
 8003b50:	e016      	b.n	8003b80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	0c5b      	lsrs	r3, r3, #17
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d110      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b64:	2208      	movs	r2, #8
 8003b66:	4619      	mov	r1, r3
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	f004 f859 	bl	8007c20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7a:	441a      	add	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0210 	orr.w	r2, r2, #16
 8003b8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f9d7 	bl	8007f48 <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ba4:	f040 80a7 	bne.w	8003cf6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f004 f9dc 	bl	8007f6e <USB_ReadDevAllOutEpInterrupt>
 8003bb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bb8:	e099      	b.n	8003cee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 808e 	beq.w	8003ce2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fa00 	bl	8007fd6 <USB_ReadDevOutEPInterrupt>
 8003bd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fec2 	bl	8004980 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	2308      	movs	r3, #8
 8003c16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 ff98 	bl	8004b50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	461a      	mov	r2, r3
 8003c38:	2310      	movs	r3, #16
 8003c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d030      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d109      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	78db      	ldrb	r3, [r3, #3]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2200      	movs	r2, #0
 8003c88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f006 fd0d 	bl	800a6b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af62 	bne.w	8003bba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 f924 	bl	8007f48 <USB_ReadInterrupts>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d0a:	f040 80db 	bne.w	8003ec4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f004 f945 	bl	8007fa2 <USB_ReadDevAllInEpInterrupt>
 8003d18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d1e:	e0cd      	b.n	8003ebc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80c2 	beq.w	8003eb0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 f96b 	bl	8008012 <USB_ReadDevInEPInterrupt>
 8003d3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d057      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	2201      	movs	r2, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69f9      	ldr	r1, [r7, #28]
 8003d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d68:	4013      	ands	r3, r2
 8003d6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d132      	bne.n	8003dec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334c      	adds	r3, #76	; 0x4c
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4403      	add	r3, r0
 8003da6:	3348      	adds	r3, #72	; 0x48
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4419      	add	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4403      	add	r3, r0
 8003dba:	334c      	adds	r3, #76	; 0x4c
 8003dbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d113      	bne.n	8003dec <HAL_PCD_IRQHandler+0x3a2>
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3354      	adds	r3, #84	; 0x54
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003de4:	461a      	mov	r2, r3
 8003de6:	2101      	movs	r1, #1
 8003de8:	f004 f972 	bl	80080d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f006 fbe1 	bl	800a5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2308      	movs	r3, #8
 8003e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	461a      	mov	r2, r3
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d023      	beq.n	8003e9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e58:	6a38      	ldr	r0, [r7, #32]
 8003e5a:	f003 f853 	bl	8006f04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3338      	adds	r3, #56	; 0x38
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3304      	adds	r3, #4
 8003e70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	78db      	ldrb	r3, [r3, #3]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f006 fc24 	bl	800a6d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fcdb 	bl	8004866 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f47f af2e 	bne.w	8003d20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f83d 	bl	8007f48 <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed8:	d122      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f00:	2100      	movs	r1, #0
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fec2 	bl	8004c8c <HAL_PCDEx_LPM_Callback>
 8003f08:	e002      	b.n	8003f10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f006 fbc2 	bl	800a694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 f80f 	bl	8007f48 <USB_ReadInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f34:	d112      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f006 fb7e 	bl	800a648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f5a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 fff1 	bl	8007f48 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	f040 80b7 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f002 ffb8 	bl	8006f04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	e046      	b.n	8004028 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004020:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	3301      	adds	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402e:	429a      	cmp	r2, r3
 8004030:	d3b3      	bcc.n	8003f9a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004040:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004044:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405e:	f043 030b 	orr.w	r3, r3, #11
 8004062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004074:	f043 030b 	orr.w	r3, r3, #11
 8004078:	6453      	str	r3, [r2, #68]	; 0x44
 800407a:	e015      	b.n	80040a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800408e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004092:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a2:	f043 030b 	orr.w	r3, r3, #11
 80040a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040cc:	461a      	mov	r2, r3
 80040ce:	f003 ffff 	bl	80080d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 ff2e 	bl	8007f48 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f6:	d124      	bne.n	8004142 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 ffc4 	bl	800808a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f002 ff79 	bl	8006ffe <USB_GetDevSpeed>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681c      	ldr	r4, [r3, #0]
 8004118:	f001 fa26 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 800411c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	4620      	mov	r0, r4
 8004128:	f002 fc78 	bl	8006a1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f006 fa6c 	bl	800a60a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fefe 	bl	8007f48 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b08      	cmp	r3, #8
 8004154:	d10a      	bne.n	800416c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f006 fa49 	bl	800a5ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f002 0208 	and.w	r2, r2, #8
 800416a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f003 fee9 	bl	8007f48 <USB_ReadInterrupts>
 8004176:	4603      	mov	r3, r0
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d122      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418c:	2301      	movs	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	e014      	b.n	80041bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb27 	bl	8004804 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	3301      	adds	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3e5      	bcc.n	8004192 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 febc 	bl	8007f48 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d13b      	bne.n	8004254 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041dc:	2301      	movs	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	e02b      	b.n	800423a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3340      	adds	r3, #64	; 0x40
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d115      	bne.n	8004234 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	da12      	bge.n	8004234 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	333f      	adds	r3, #63	; 0x3f
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fae8 	bl	8004804 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	3301      	adds	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	429a      	cmp	r2, r3
 8004242:	d3ce      	bcc.n	80041e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f003 fe75 	bl	8007f48 <USB_ReadInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004268:	d155      	bne.n	8004316 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800426a:	2301      	movs	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	e045      	b.n	80042fc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d12e      	bne.n	80042f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004298:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800429a:	2b00      	cmp	r3, #0
 800429c:	da2b      	bge.n	80042f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80042aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d121      	bne.n	80042f6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f2:	6053      	str	r3, [r2, #4]
            break;
 80042f4:	e007      	b.n	8004306 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	3301      	adds	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	429a      	cmp	r2, r3
 8004304:	d3b4      	bcc.n	8004270 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f003 fe14 	bl	8007f48 <USB_ReadInterrupts>
 8004320:	4603      	mov	r3, r0
 8004322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432a:	d10a      	bne.n	8004342 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f006 f9e3 	bl	800a6f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 fdfe 	bl	8007f48 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d115      	bne.n	8004382 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f006 f9d3 	bl	800a714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	e000      	b.n	8004382 <HAL_PCD_IRQHandler+0x938>
      return;
 8004380:	bf00      	nop
    }
  }
}
 8004382:	3734      	adds	r7, #52	; 0x34
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}

08004388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_PCD_SetAddress+0x1a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e013      	b.n	80043ca <HAL_PCD_SetAddress+0x42>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fd5c 	bl	8007e78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	70fb      	strb	r3, [r7, #3]
 80043e4:	460b      	mov	r3, r1
 80043e6:	803b      	strh	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da0f      	bge.n	8004418 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 020f 	and.w	r2, r3, #15
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	3338      	adds	r3, #56	; 0x38
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	705a      	strb	r2, [r3, #1]
 8004416:	e00f      	b.n	8004438 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	b2da      	uxtb	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004444:	883a      	ldrh	r2, [r7, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	78ba      	ldrb	r2, [r7, #2]
 800444e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004462:	78bb      	ldrb	r3, [r7, #2]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d102      	bne.n	800446e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_PCD_EP_Open+0xaa>
 8004478:	2302      	movs	r3, #2
 800447a:	e00e      	b.n	800449a <HAL_PCD_EP_Open+0xc8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	4618      	mov	r0, r3
 800448c:	f002 fddc 	bl	8007048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004498:	7afb      	ldrb	r3, [r7, #11]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da0f      	bge.n	80044d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	3338      	adds	r3, #56	; 0x38
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	705a      	strb	r2, [r3, #1]
 80044d4:	e00f      	b.n	80044f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4413      	add	r3, r2
 80044ec:	3304      	adds	r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_PCD_EP_Close+0x6e>
 800450c:	2302      	movs	r3, #2
 800450e:	e00e      	b.n	800452e <HAL_PCD_EP_Close+0x8c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	f002 fe1a 	bl	8007158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	460b      	mov	r3, r1
 8004544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	3304      	adds	r3, #4
 800455e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2200      	movs	r2, #0
 8004570:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	b2da      	uxtb	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d102      	bne.n	8004592 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	f003 f8f9 	bl	80077a0 <USB_EP0StartXfer>
 80045ae:	e008      	b.n	80045c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	f002 fea7 	bl	8007310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	460b      	mov	r3, r1
 800460a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	3338      	adds	r3, #56	; 0x38
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	3304      	adds	r3, #4
 8004622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2201      	movs	r2, #1
 800463a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800463c:	7afb      	ldrb	r3, [r7, #11]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	b2da      	uxtb	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	f003 f897 	bl	80077a0 <USB_EP0StartXfer>
 8004672:	e008      	b.n	8004686 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6979      	ldr	r1, [r7, #20]
 8004682:	f002 fe45 	bl	8007310 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d901      	bls.n	80046ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e050      	b.n	8004750 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0f      	bge.n	80046d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	705a      	strb	r2, [r3, #1]
 80046d4:	e00d      	b.n	80046f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_PCD_EP_SetStall+0x82>
 800470e:	2302      	movs	r3, #2
 8004710:	e01e      	b.n	8004750 <HAL_PCD_EP_SetStall+0xc0>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	4618      	mov	r0, r3
 8004722:	f003 fad5 	bl	8007cd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	b2d9      	uxtb	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004740:	461a      	mov	r2, r3
 8004742:	f003 fcc5 	bl	80080d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d901      	bls.n	8004776 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e042      	b.n	80047fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0f      	bge.n	800479e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	3338      	adds	r3, #56	; 0x38
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	705a      	strb	r2, [r3, #1]
 800479c:	e00f      	b.n	80047be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_PCD_EP_ClrStall+0x86>
 80047da:	2302      	movs	r3, #2
 80047dc:	e00e      	b.n	80047fc <HAL_PCD_EP_ClrStall+0xa4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f003 fadd 	bl	8007dac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da0c      	bge.n	8004832 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 020f 	and.w	r2, r3, #15
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3338      	adds	r3, #56	; 0x38
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e00c      	b.n	800484c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	3304      	adds	r3, #4
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	4618      	mov	r0, r3
 8004854:	f003 f8fc 	bl	8007a50 <USB_EPStopXfer>
 8004858:	4603      	mov	r3, r0
 800485a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800485c:	7afb      	ldrb	r3, [r7, #11]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b08a      	sub	sp, #40	; 0x28
 800486a:	af02      	add	r7, sp, #8
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	3338      	adds	r3, #56	; 0x38
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d901      	bls.n	800489e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06c      	b.n	8004978 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d902      	bls.n	80048ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3303      	adds	r3, #3
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c2:	e02b      	b.n	800491c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d902      	bls.n	80048e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3303      	adds	r3, #3
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6919      	ldr	r1, [r3, #16]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4603      	mov	r3, r0
 80048fe:	6978      	ldr	r0, [r7, #20]
 8004900:	f003 f950 	bl	8007ba4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	b29b      	uxth	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	429a      	cmp	r2, r3
 8004930:	d809      	bhi.n	8004946 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800493a:	429a      	cmp	r2, r3
 800493c:	d203      	bcs.n	8004946 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1be      	bne.n	80048c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	429a      	cmp	r2, r3
 8004950:	d811      	bhi.n	8004976 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	2201      	movs	r2, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	43db      	mvns	r3, r3
 800496c:	6939      	ldr	r1, [r7, #16]
 800496e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004972:	4013      	ands	r3, r2
 8004974:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	333c      	adds	r3, #60	; 0x3c
 8004998:	3304      	adds	r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d17b      	bne.n	8004aae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4a61      	ldr	r2, [pc, #388]	; (8004b48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	f240 80b9 	bls.w	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80b3 	beq.w	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	e0a7      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	461a      	mov	r2, r3
 8004a04:	2320      	movs	r3, #32
 8004a06:	6093      	str	r3, [r2, #8]
 8004a08:	e098      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 8093 	bne.w	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4a4b      	ldr	r2, [pc, #300]	; (8004b48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d90f      	bls.n	8004a3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	461a      	mov	r2, r3
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	e07e      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	0159      	lsls	r1, r3, #5
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	440b      	add	r3, r1
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d114      	bne.n	8004aa0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	f003 fb20 	bl	80080d0 <USB_EP0_OutStart>
 8004a90:	e006      	b.n	8004aa0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f005 fd6c 	bl	800a584 <HAL_PCD_DataOutStageCallback>
 8004aac:	e046      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d124      	bne.n	8004b00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad2:	6093      	str	r3, [r2, #8]
 8004ad4:	e032      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	2320      	movs	r3, #32
 8004af0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f005 fd43 	bl	800a584 <HAL_PCD_DataOutStageCallback>
 8004afe:	e01d      	b.n	8004b3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d114      	bne.n	8004b30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f003 fad0 	bl	80080d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f005 fd24 	bl	800a584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	4f54300a 	.word	0x4f54300a
 8004b4c:	4f54310a 	.word	0x4f54310a

08004b50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	333c      	adds	r3, #60	; 0x3c
 8004b68:	3304      	adds	r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d90e      	bls.n	8004ba4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f005 fcdb 	bl	800a560 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d90c      	bls.n	8004bcc <PCD_EP_OutSetupPacket_int+0x7c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	f003 fa82 	bl	80080d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	4f54300a 	.word	0x4f54300a

08004bdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
 8004be8:	4613      	mov	r3, r2
 8004bea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bfa:	883b      	ldrh	r3, [r7, #0]
 8004bfc:	0419      	lsls	r1, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
 8004c08:	e028      	b.n	8004c5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e00d      	b.n	8004c3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	3340      	adds	r3, #64	; 0x40
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4413      	add	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	3301      	adds	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3ec      	bcc.n	8004c1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c44:	883b      	ldrh	r3, [r7, #0]
 8004c46:	0418      	lsls	r0, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	4302      	orrs	r2, r0
 8004c54:	3340      	adds	r3, #64	; 0x40
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e267      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d075      	beq.n	8004dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cda:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b7e      	ldr	r3, [pc, #504]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_RCC_OscConfig+0x108>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d157      	bne.n	8004dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e242      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x74>
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x98>
 8004d22:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6f      	ldr	r2, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6c      	ldr	r2, [pc, #432]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b66      	ldr	r3, [pc, #408]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a65      	ldr	r2, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd f80c 	bl	8001d78 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd f808 	bl	8001d78 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e207      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b5b      	ldr	r3, [pc, #364]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xc0>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fc fff8 	bl	8001d78 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fc fff4 	bl	8001d78 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1f3      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0xe8>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd2:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1c7      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4937      	ldr	r1, [pc, #220]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fc ffad 	bl	8001d78 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fc ffa9 	bl	8001d78 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1a8      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4925      	ldr	r1, [pc, #148]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc ff8c 	bl	8001d78 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fc ff88 	bl	8001d78 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e187      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d036      	beq.n	8004efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fc ff6c 	bl	8001d78 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fc ff68 	bl	8001d78 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e167      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x200>
 8004ec2:	e01b      	b.n	8004efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fc ff55 	bl	8001d78 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fc ff51 	bl	8001d78 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d907      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e150      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	42470000 	.word	0x42470000
 8004eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ea      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8097 	beq.w	8005038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	4a7c      	ldr	r2, [pc, #496]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	4b77      	ldr	r3, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d118      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a73      	ldr	r2, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f52:	f7fc ff11 	bl	8001d78 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fc ff0d 	bl	8001d78 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e10c      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x2ea>
 8004f80:	4b64      	ldr	r3, [pc, #400]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a63      	ldr	r2, [pc, #396]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e01c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x30c>
 8004f96:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a5e      	ldr	r2, [pc, #376]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a54      	ldr	r2, [pc, #336]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fc fed2 	bl	8001d78 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fc fece 	bl	8001d78 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0cb      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fee:	4b49      	ldr	r3, [pc, #292]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0ee      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x334>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffc:	f7fc febc 	bl	8001d78 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	e00a      	b.n	800501a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fc feb8 	bl	8001d78 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0b5      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501a:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ee      	bne.n	8005004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	4a38      	ldr	r2, [pc, #224]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80a1 	beq.w	8005184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d05c      	beq.n	8005108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d141      	bne.n	80050da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCC_OscConfig+0x478>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fc fe8c 	bl	8001d78 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fc fe88 	bl	8001d78 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e087      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	3b01      	subs	r3, #1
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	491b      	ldr	r1, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fc fe61 	bl	8001d78 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fc fe5d 	bl	8001d78 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e05c      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x416>
 80050d8:	e054      	b.n	8005184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fc fe4a 	bl	8001d78 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fc fe46 	bl	8001d78 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e045      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x444>
 8005106:	e03d      	b.n	8005184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e038      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005120:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x4ec>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d028      	beq.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d121      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11a      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	4293      	cmp	r3, r2
 800515a:	d111      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d107      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800

08005194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0cc      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b68      	ldr	r3, [pc, #416]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d90c      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d044      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d119      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524e:	2b03      	cmp	r3, #3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e067      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4934      	ldr	r1, [pc, #208]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005284:	f7fc fd78 	bl	8001d78 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fc fd74 	bl	8001d78 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e04f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20c      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f821 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1c8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc fcd8 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	0800ab84 	.word	0x0800ab84
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005364:	b094      	sub	sp, #80	; 0x50
 8005366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	647b      	str	r3, [r7, #68]	; 0x44
 800536c:	2300      	movs	r3, #0
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	2300      	movs	r3, #0
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005378:	4b79      	ldr	r3, [pc, #484]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b08      	cmp	r3, #8
 8005382:	d00d      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005384:	2b08      	cmp	r3, #8
 8005386:	f200 80e1 	bhi.w	800554c <HAL_RCC_GetSysClockFreq+0x1ec>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x34>
 800538e:	2b04      	cmp	r3, #4
 8005390:	d003      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x3a>
 8005392:	e0db      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b73      	ldr	r3, [pc, #460]	; (8005564 <HAL_RCC_GetSysClockFreq+0x204>)
 8005396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005398:	e0db      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <HAL_RCC_GetSysClockFreq+0x204>)
 800539c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800539e:	e0d8      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a0:	4b6f      	ldr	r3, [pc, #444]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053aa:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d063      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b6:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	2200      	movs	r2, #0
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
 80053c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
 80053ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	f04f 0000 	mov.w	r0, #0
 80053da:	f04f 0100 	mov.w	r1, #0
 80053de:	0159      	lsls	r1, r3, #5
 80053e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e4:	0150      	lsls	r0, r2, #5
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4621      	mov	r1, r4
 80053ec:	1a51      	subs	r1, r2, r1
 80053ee:	6139      	str	r1, [r7, #16]
 80053f0:	4629      	mov	r1, r5
 80053f2:	eb63 0301 	sbc.w	r3, r3, r1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005404:	4659      	mov	r1, fp
 8005406:	018b      	lsls	r3, r1, #6
 8005408:	4651      	mov	r1, sl
 800540a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800540e:	4651      	mov	r1, sl
 8005410:	018a      	lsls	r2, r1, #6
 8005412:	4651      	mov	r1, sl
 8005414:	ebb2 0801 	subs.w	r8, r2, r1
 8005418:	4659      	mov	r1, fp
 800541a:	eb63 0901 	sbc.w	r9, r3, r1
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800542a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800542e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005432:	4690      	mov	r8, r2
 8005434:	4699      	mov	r9, r3
 8005436:	4623      	mov	r3, r4
 8005438:	eb18 0303 	adds.w	r3, r8, r3
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	462b      	mov	r3, r5
 8005440:	eb49 0303 	adc.w	r3, r9, r3
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005452:	4629      	mov	r1, r5
 8005454:	028b      	lsls	r3, r1, #10
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800545c:	4621      	mov	r1, r4
 800545e:	028a      	lsls	r2, r1, #10
 8005460:	4610      	mov	r0, r2
 8005462:	4619      	mov	r1, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	2200      	movs	r2, #0
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
 800546a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005470:	f7fb fb28 	bl	8000ac4 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547c:	e058      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547e:	4b38      	ldr	r3, [pc, #224]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	099b      	lsrs	r3, r3, #6
 8005484:	2200      	movs	r2, #0
 8005486:	4618      	mov	r0, r3
 8005488:	4611      	mov	r1, r2
 800548a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	2300      	movs	r3, #0
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
 8005494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	f04f 0100 	mov.w	r1, #0
 80054a4:	0159      	lsls	r1, r3, #5
 80054a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054aa:	0150      	lsls	r0, r2, #5
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4641      	mov	r1, r8
 80054b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054b6:	4649      	mov	r1, r9
 80054b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054d0:	ebb2 040a 	subs.w	r4, r2, sl
 80054d4:	eb63 050b 	sbc.w	r5, r3, fp
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	00eb      	lsls	r3, r5, #3
 80054e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e6:	00e2      	lsls	r2, r4, #3
 80054e8:	4614      	mov	r4, r2
 80054ea:	461d      	mov	r5, r3
 80054ec:	4643      	mov	r3, r8
 80054ee:	18e3      	adds	r3, r4, r3
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	464b      	mov	r3, r9
 80054f4:	eb45 0303 	adc.w	r3, r5, r3
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005506:	4629      	mov	r1, r5
 8005508:	028b      	lsls	r3, r1, #10
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005510:	4621      	mov	r1, r4
 8005512:	028a      	lsls	r2, r1, #10
 8005514:	4610      	mov	r0, r2
 8005516:	4619      	mov	r1, r3
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	2200      	movs	r2, #0
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	61fa      	str	r2, [r7, #28]
 8005520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005524:	f7fb face 	bl	8000ac4 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3301      	adds	r3, #1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800554a:	e002      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCC_GetSysClockFreq+0x204>)
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005554:	4618      	mov	r0, r3
 8005556:	3750      	adds	r7, #80	; 0x50
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800
 8005564:	00f42400 	.word	0x00f42400

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCC_GetHCLKFreq+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000000 	.word	0x20000000

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005584:	f7ff fff0 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0a9b      	lsrs	r3, r3, #10
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	0800ab94 	.word	0x0800ab94

080055a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07b      	b.n	80056b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ca:	d009      	beq.n	80055e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
 80055d2:	e005      	b.n	80055e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc f9fc 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005664:	ea42 0103 	orr.w	r1, r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0104 	and.w	r1, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0210 	and.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e041      	b.n	8005750 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fc f9d1 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 fc5f 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e041      	b.n	80057ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f839 	bl	80057f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fc10 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_TIM_PWM_Start+0x24>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e022      	b.n	8005876 <HAL_TIM_PWM_Start+0x6a>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d109      	bne.n	800584a <HAL_TIM_PWM_Start+0x3e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e015      	b.n	8005876 <HAL_TIM_PWM_Start+0x6a>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d109      	bne.n	8005864 <HAL_TIM_PWM_Start+0x58>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start+0x6a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e068      	b.n	8005950 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0x82>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	e013      	b.n	80058b6 <HAL_TIM_PWM_Start+0xaa>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0x92>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800589c:	e00b      	b.n	80058b6 <HAL_TIM_PWM_Start+0xaa>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ac:	e003      	b.n	80058b6 <HAL_TIM_PWM_Start+0xaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fe22 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a23      	ldr	r2, [pc, #140]	; (8005958 <HAL_TIM_PWM_Start+0x14c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d107      	bne.n	80058de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <HAL_TIM_PWM_Start+0x14c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_TIM_PWM_Start+0x10e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d013      	beq.n	800591a <HAL_TIM_PWM_Start+0x10e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a19      	ldr	r2, [pc, #100]	; (800595c <HAL_TIM_PWM_Start+0x150>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIM_PWM_Start+0x10e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <HAL_TIM_PWM_Start+0x154>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIM_PWM_Start+0x10e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_TIM_PWM_Start+0x158>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIM_PWM_Start+0x10e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <HAL_TIM_PWM_Start+0x15c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d010      	beq.n	800594e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593c:	e007      	b.n	800594e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40014000 	.word	0x40014000

0800596c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fdc2 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a29      	ldr	r2, [pc, #164]	; (8005a30 <HAL_TIM_PWM_Stop+0xc4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d117      	bne.n	80059be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f241 1311 	movw	r3, #4369	; 0x1111
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_TIM_PWM_Stop+0x52>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f240 4344 	movw	r3, #1092	; 0x444
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <HAL_TIM_PWM_Stop+0x52>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_TIM_PWM_Stop+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f240 4344 	movw	r3, #1092	; 0x444
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_PWM_Stop+0x82>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Stop+0x92>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xba>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Stop+0xa2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xba>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Stop+0xb2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xba>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40010000 	.word	0x40010000

08005a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0202 	mvn.w	r2, #2
 8005a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa81 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa73 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fa84 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0204 	mvn.w	r2, #4
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa57 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa49 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fa5a 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0208 	mvn.w	r2, #8
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa2d 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa1f 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa30 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0210 	mvn.w	r2, #16
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2208      	movs	r2, #8
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa03 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9f5 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa06 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0201 	mvn.w	r2, #1
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9cf 	bl	8005f56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd0:	2b80      	cmp	r3, #128	; 0x80
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fe8c 	bl	80068fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9cb 	bl	8005fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d10e      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d107      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0220 	mvn.w	r2, #32
 8005c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fe56 	bl	80068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0ae      	b.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	f200 809f 	bhi.w	8005db0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005db1 	.word	0x08005db1
 8005c80:	08005db1 	.word	0x08005db1
 8005c84:	08005db1 	.word	0x08005db1
 8005c88:	08005ced 	.word	0x08005ced
 8005c8c:	08005db1 	.word	0x08005db1
 8005c90:	08005db1 	.word	0x08005db1
 8005c94:	08005db1 	.word	0x08005db1
 8005c98:	08005d2f 	.word	0x08005d2f
 8005c9c:	08005db1 	.word	0x08005db1
 8005ca0:	08005db1 	.word	0x08005db1
 8005ca4:	08005db1 	.word	0x08005db1
 8005ca8:	08005d6f 	.word	0x08005d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa02 	bl	80060bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0208 	orr.w	r2, r2, #8
 8005cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0204 	bic.w	r2, r2, #4
 8005cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6999      	ldr	r1, [r3, #24]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	619a      	str	r2, [r3, #24]
      break;
 8005cea:	e064      	b.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fa48 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	021a      	lsls	r2, r3, #8
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	619a      	str	r2, [r3, #24]
      break;
 8005d2c:	e043      	b.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fa93 	bl	8006260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0208 	orr.w	r2, r2, #8
 8005d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0204 	bic.w	r2, r2, #4
 8005d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	61da      	str	r2, [r3, #28]
      break;
 8005d6c:	e023      	b.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fadd 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69d9      	ldr	r1, [r3, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	021a      	lsls	r2, r3, #8
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	61da      	str	r2, [r3, #28]
      break;
 8005dae:	e002      	b.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
      break;
 8005db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIM_ConfigClockSource+0x1c>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e0b4      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x186>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	d03e      	beq.n	8005e9c <HAL_TIM_ConfigClockSource+0xd4>
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e22:	f200 8087 	bhi.w	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2a:	f000 8086 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x172>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	d87f      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b70      	cmp	r3, #112	; 0x70
 8005e36:	d01a      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0xa6>
 8005e38:	2b70      	cmp	r3, #112	; 0x70
 8005e3a:	d87b      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b60      	cmp	r3, #96	; 0x60
 8005e3e:	d050      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e40:	2b60      	cmp	r3, #96	; 0x60
 8005e42:	d877      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b50      	cmp	r3, #80	; 0x50
 8005e46:	d03c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e48:	2b50      	cmp	r3, #80	; 0x50
 8005e4a:	d873      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d058      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x13a>
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d86f      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	d064      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15a>
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d86b      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d060      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15a>
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d867      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05c      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15a>
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d05a      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15a>
 8005e6c:	e062      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6899      	ldr	r1, [r3, #8]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f000 fb23 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	609a      	str	r2, [r3, #8]
      break;
 8005e9a:	e04f      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6899      	ldr	r1, [r3, #8]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f000 fb0c 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ebe:	609a      	str	r2, [r3, #8]
      break;
 8005ec0:	e03c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fa80 	bl	80063d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2150      	movs	r1, #80	; 0x50
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fad9 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e02c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fa9f 	bl	8006432 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2160      	movs	r1, #96	; 0x60
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fac9 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005f00:	e01c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f000 fa60 	bl	80063d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2140      	movs	r1, #64	; 0x40
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fab9 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005f20:	e00c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 fab0 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005f32:	e003      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
      break;
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a34      	ldr	r2, [pc, #208]	; (80060a0 <TIM_Base_SetConfig+0xe4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x38>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x38>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a31      	ldr	r2, [pc, #196]	; (80060a4 <TIM_Base_SetConfig+0xe8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x38>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <TIM_Base_SetConfig+0xec>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x38>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <TIM_Base_SetConfig+0xf0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a25      	ldr	r2, [pc, #148]	; (80060a0 <TIM_Base_SetConfig+0xe4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <TIM_Base_SetConfig+0xe8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <TIM_Base_SetConfig+0xec>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <TIM_Base_SetConfig+0xf0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <TIM_Base_SetConfig+0xf4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <TIM_Base_SetConfig+0xf8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0x8a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <TIM_Base_SetConfig+0xfc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <TIM_Base_SetConfig+0xe4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d103      	bne.n	800608c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	615a      	str	r2, [r3, #20]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0302 	bic.w	r3, r3, #2
 8006104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <TIM_OC1_SetConfig+0xc8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d10c      	bne.n	8006132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0308 	bic.w	r3, r3, #8
 800611e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a13      	ldr	r2, [pc, #76]	; (8006184 <TIM_OC1_SetConfig+0xc8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40010000 	.word	0x40010000

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0210 	bic.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	; (800625c <TIM_OC2_SetConfig+0xd4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10d      	bne.n	8006204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <TIM_OC2_SetConfig+0xd4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d113      	bne.n	8006234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000

08006260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <TIM_OC3_SetConfig+0xd0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10d      	bne.n	80062da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <TIM_OC3_SetConfig+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d113      	bne.n	800630a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	621a      	str	r2, [r3, #32]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40010000 	.word	0x40010000

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a10      	ldr	r2, [pc, #64]	; (80063d0 <TIM_OC4_SetConfig+0x9c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d109      	bne.n	80063a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40010000 	.word	0x40010000

080063d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 030a 	bic.w	r3, r3, #10
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800646e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 0307 	orr.w	r3, r3, #7
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2201      	movs	r2, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	43db      	mvns	r3, r3
 800652a:	401a      	ands	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <HAL_TIMEx_PWMN_Start+0x24>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e022      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b04      	cmp	r3, #4
 800657c:	d109      	bne.n	8006592 <HAL_TIMEx_PWMN_Start+0x3e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	e015      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d109      	bne.n	80065ac <HAL_TIMEx_PWMN_Start+0x58>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e008      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e063      	b.n	800668e <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <HAL_TIMEx_PWMN_Start+0x82>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d4:	e013      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d104      	bne.n	80065e6 <HAL_TIMEx_PWMN_Start+0x92>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e4:	e00b      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d104      	bne.n	80065f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f4:	e003      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f982 	bl	8006910 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800661a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <HAL_TIMEx_PWMN_Start+0x144>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d013      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <HAL_TIMEx_PWMN_Start+0x148>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a18      	ldr	r2, [pc, #96]	; (80066a0 <HAL_TIMEx_PWMN_Start+0x14c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <HAL_TIMEx_PWMN_Start+0x150>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <HAL_TIMEx_PWMN_Start+0x154>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d111      	bne.n	800667c <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b06      	cmp	r3, #6
 8006668:	d010      	beq.n	800668c <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667a:	e007      	b.n	800668c <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40014000 	.word	0x40014000

080066ac <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f926 	bl	8006910 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	f240 4344 	movw	r3, #1092	; 0x444
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10f      	bne.n	8006724 <HAL_TIMEx_PWMN_Stop+0x78>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	f240 4344 	movw	r3, #1092	; 0x444
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <HAL_TIMEx_PWMN_Stop+0x78>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_TIMEx_PWMN_Stop+0x88>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006732:	e013      	b.n	800675c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d104      	bne.n	8006744 <HAL_TIMEx_PWMN_Stop+0x98>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006742:	e00b      	b.n	800675c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b08      	cmp	r3, #8
 8006748:	d104      	bne.n	8006754 <HAL_TIMEx_PWMN_Stop+0xa8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006752:	e003      	b.n	800675c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e050      	b.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d013      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10c      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4313      	orrs	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e03d      	b.n	80068dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2204      	movs	r2, #4
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800695a:	b084      	sub	sp, #16
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	f107 001c 	add.w	r0, r7, #28
 8006968:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2b01      	cmp	r3, #1
 8006970:	d122      	bne.n	80069b8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d105      	bne.n	80069ac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fbed 	bl	800818c <USB_CoreReset>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	e01a      	b.n	80069ee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fbe1 	bl	800818c <USB_CoreReset>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
 80069e0:	e005      	b.n	80069ee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d10b      	bne.n	8006a0c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f043 0206 	orr.w	r2, r3, #6
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d165      	bne.n	8006afc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a41      	ldr	r2, [pc, #260]	; (8006b38 <USB_SetTurnaroundTime+0x11c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d906      	bls.n	8006a46 <USB_SetTurnaroundTime+0x2a>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4a40      	ldr	r2, [pc, #256]	; (8006b3c <USB_SetTurnaroundTime+0x120>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d202      	bcs.n	8006a46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a40:	230f      	movs	r3, #15
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e062      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4a3c      	ldr	r2, [pc, #240]	; (8006b3c <USB_SetTurnaroundTime+0x120>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d306      	bcc.n	8006a5c <USB_SetTurnaroundTime+0x40>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4a3b      	ldr	r2, [pc, #236]	; (8006b40 <USB_SetTurnaroundTime+0x124>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d202      	bcs.n	8006a5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a56:	230e      	movs	r3, #14
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e057      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a38      	ldr	r2, [pc, #224]	; (8006b40 <USB_SetTurnaroundTime+0x124>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d306      	bcc.n	8006a72 <USB_SetTurnaroundTime+0x56>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4a37      	ldr	r2, [pc, #220]	; (8006b44 <USB_SetTurnaroundTime+0x128>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d202      	bcs.n	8006a72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a6c:	230d      	movs	r3, #13
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e04c      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a33      	ldr	r2, [pc, #204]	; (8006b44 <USB_SetTurnaroundTime+0x128>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d306      	bcc.n	8006a88 <USB_SetTurnaroundTime+0x6c>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a32      	ldr	r2, [pc, #200]	; (8006b48 <USB_SetTurnaroundTime+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d802      	bhi.n	8006a88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a82:	230c      	movs	r3, #12
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e041      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <USB_SetTurnaroundTime+0x12c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d906      	bls.n	8006a9e <USB_SetTurnaroundTime+0x82>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a2e      	ldr	r2, [pc, #184]	; (8006b4c <USB_SetTurnaroundTime+0x130>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d802      	bhi.n	8006a9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a98:	230b      	movs	r3, #11
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e036      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <USB_SetTurnaroundTime+0x130>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d906      	bls.n	8006ab4 <USB_SetTurnaroundTime+0x98>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <USB_SetTurnaroundTime+0x134>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d802      	bhi.n	8006ab4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006aae:	230a      	movs	r3, #10
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e02b      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <USB_SetTurnaroundTime+0x134>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d906      	bls.n	8006aca <USB_SetTurnaroundTime+0xae>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <USB_SetTurnaroundTime+0x138>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d202      	bcs.n	8006aca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ac4:	2309      	movs	r3, #9
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e020      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <USB_SetTurnaroundTime+0x138>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d306      	bcc.n	8006ae0 <USB_SetTurnaroundTime+0xc4>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <USB_SetTurnaroundTime+0x13c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d802      	bhi.n	8006ae0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ada:	2308      	movs	r3, #8
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e015      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <USB_SetTurnaroundTime+0x13c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d906      	bls.n	8006af6 <USB_SetTurnaroundTime+0xda>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <USB_SetTurnaroundTime+0x140>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d202      	bcs.n	8006af6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006af0:	2307      	movs	r3, #7
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e00a      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006af6:	2306      	movs	r3, #6
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e007      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b02:	2309      	movs	r3, #9
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e001      	b.n	8006b0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b08:	2309      	movs	r3, #9
 8006b0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b24:	431a      	orrs	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	00d8acbf 	.word	0x00d8acbf
 8006b3c:	00e4e1c0 	.word	0x00e4e1c0
 8006b40:	00f42400 	.word	0x00f42400
 8006b44:	01067380 	.word	0x01067380
 8006b48:	011a499f 	.word	0x011a499f
 8006b4c:	01312cff 	.word	0x01312cff
 8006b50:	014ca43f 	.word	0x014ca43f
 8006b54:	016e3600 	.word	0x016e3600
 8006b58:	01a6ab1f 	.word	0x01a6ab1f
 8006b5c:	01e84800 	.word	0x01e84800

08006b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d115      	bne.n	8006bf2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7fb f8dc 	bl	8001d90 <HAL_Delay>
      ms++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fa45 	bl	800806e <USB_GetMode>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d01e      	beq.n	8006c28 <USB_SetCurrentMode+0x84>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b31      	cmp	r3, #49	; 0x31
 8006bee:	d9f0      	bls.n	8006bd2 <USB_SetCurrentMode+0x2e>
 8006bf0:	e01a      	b.n	8006c28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d115      	bne.n	8006c24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c04:	2001      	movs	r0, #1
 8006c06:	f7fb f8c3 	bl	8001d90 <HAL_Delay>
      ms++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fa2c 	bl	800806e <USB_GetMode>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <USB_SetCurrentMode+0x84>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b31      	cmp	r3, #49	; 0x31
 8006c20:	d9f0      	bls.n	8006c04 <USB_SetCurrentMode+0x60>
 8006c22:	e001      	b.n	8006c28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e005      	b.n	8006c34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b32      	cmp	r3, #50	; 0x32
 8006c2c:	d101      	bne.n	8006c32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	e009      	b.n	8006c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3340      	adds	r3, #64	; 0x40
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b0e      	cmp	r3, #14
 8006c74:	d9f2      	bls.n	8006c5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11c      	bne.n	8006cb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8a:	f043 0302 	orr.w	r3, r3, #2
 8006c8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb4:	e00b      	b.n	8006cce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce8:	461a      	mov	r2, r3
 8006cea:	680b      	ldr	r3, [r1, #0]
 8006cec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d10c      	bne.n	8006d0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f965 	bl	8006fcc <USB_SetDevSpeed>
 8006d02:	e008      	b.n	8006d16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d04:	2101      	movs	r1, #1
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f960 	bl	8006fcc <USB_SetDevSpeed>
 8006d0c:	e003      	b.n	8006d16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d0e:	2103      	movs	r1, #3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f95b 	bl	8006fcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d16:	2110      	movs	r1, #16
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8f3 	bl	8006f04 <USB_FlushTxFifo>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f91f 	bl	8006f6c <USB_FlushRxFifo>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	461a      	mov	r2, r3
 8006d40:	2300      	movs	r3, #0
 8006d42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	e043      	b.n	8006dea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d78:	d118      	bne.n	8006dac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e013      	b.n	8006dbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e008      	b.n	8006dbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	461a      	mov	r2, r3
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3b7      	bcc.n	8006d62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	e043      	b.n	8006e80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e0e:	d118      	bne.n	8006e42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	461a      	mov	r2, r3
 8006e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e013      	b.n	8006e54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e008      	b.n	8006e54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	2300      	movs	r3, #0
 8006e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	461a      	mov	r2, r3
 8006e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d3b7      	bcc.n	8006df8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ea8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d105      	bne.n	8006ebc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f043 0210 	orr.w	r2, r3, #16
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <USB_DevInit+0x2c4>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ee8:	f043 0304 	orr.w	r3, r3, #4
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006efc:	b004      	add	sp, #16
 8006efe:	4770      	bx	lr
 8006f00:	803c3800 	.word	0x803c3800

08006f04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <USB_FlushTxFifo+0x64>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d901      	bls.n	8006f24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e01b      	b.n	8006f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	daf2      	bge.n	8006f12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	019b      	lsls	r3, r3, #6
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a08      	ldr	r2, [pc, #32]	; (8006f68 <USB_FlushTxFifo+0x64>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e006      	b.n	8006f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d0f0      	beq.n	8006f3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	00030d40 	.word	0x00030d40

08006f6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a11      	ldr	r2, [pc, #68]	; (8006fc8 <USB_FlushRxFifo+0x5c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d901      	bls.n	8006f8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e018      	b.n	8006fbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	daf2      	bge.n	8006f78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2210      	movs	r2, #16
 8006f9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <USB_FlushRxFifo+0x5c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e006      	b.n	8006fbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d0f0      	beq.n	8006f9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	00030d40 	.word	0x00030d40

08006fcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fec:	4313      	orrs	r3, r2
 8006fee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b087      	sub	sp, #28
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 0306 	and.w	r3, r3, #6
 8007016:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800701e:	2300      	movs	r3, #0
 8007020:	75fb      	strb	r3, [r7, #23]
 8007022:	e00a      	b.n	800703a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d002      	beq.n	8007030 <USB_GetDevSpeed+0x32>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b06      	cmp	r3, #6
 800702e:	d102      	bne.n	8007036 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007030:	2302      	movs	r3, #2
 8007032:	75fb      	strb	r3, [r7, #23]
 8007034:	e001      	b.n	800703a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007036:	230f      	movs	r3, #15
 8007038:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d13a      	bne.n	80070da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	2101      	movs	r1, #1
 8007076:	fa01 f303 	lsl.w	r3, r1, r3
 800707a:	b29b      	uxth	r3, r3
 800707c:	68f9      	ldr	r1, [r7, #12]
 800707e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007082:	4313      	orrs	r3, r2
 8007084:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d155      	bne.n	8007148 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	059b      	lsls	r3, r3, #22
 80070be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070c0:	4313      	orrs	r3, r2
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e036      	b.n	8007148 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	69da      	ldr	r2, [r3, #28]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	2101      	movs	r1, #1
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f8:	4313      	orrs	r3, r2
 80070fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d11a      	bne.n	8007148 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800712e:	430b      	orrs	r3, r1
 8007130:	4313      	orrs	r3, r2
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d161      	bne.n	8007238 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718a:	d11f      	bne.n	80071cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	43db      	mvns	r3, r3
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ec:	4013      	ands	r3, r2
 80071ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	b29b      	uxth	r3, r3
 8007208:	43db      	mvns	r3, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007210:	4013      	ands	r3, r2
 8007212:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	0159      	lsls	r1, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	440b      	add	r3, r1
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	4619      	mov	r1, r3
 8007230:	4b35      	ldr	r3, [pc, #212]	; (8007308 <USB_DeactivateEndpoint+0x1b0>)
 8007232:	4013      	ands	r3, r2
 8007234:	600b      	str	r3, [r1, #0]
 8007236:	e060      	b.n	80072fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800724e:	d11f      	bne.n	8007290 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800726e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800728e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	2101      	movs	r1, #1
 80072a2:	fa01 f303 	lsl.w	r3, r1, r3
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	43db      	mvns	r3, r3
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b0:	4013      	ands	r3, r2
 80072b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	2101      	movs	r1, #1
 80072c6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	43db      	mvns	r3, r3
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d4:	4013      	ands	r3, r2
 80072d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	0159      	lsls	r1, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	440b      	add	r3, r1
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	4619      	mov	r1, r3
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <USB_DeactivateEndpoint+0x1b4>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	ec337800 	.word	0xec337800
 800730c:	eff37800 	.word	0xeff37800

08007310 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	f040 815c 	bne.w	80075ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d132      	bne.n	80073a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800735c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800737c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	0cdb      	lsrs	r3, r3, #19
 800739a:	04db      	lsls	r3, r3, #19
 800739c:	6113      	str	r3, [r2, #16]
 800739e:	e074      	b.n	800748a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ba:	0cdb      	lsrs	r3, r3, #19
 80073bc:	04db      	lsls	r3, r3, #19
 80073be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6999      	ldr	r1, [r3, #24]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	440b      	add	r3, r1
 80073fc:	1e59      	subs	r1, r3, #1
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	fbb1 f3f3 	udiv	r3, r1, r3
 8007406:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007408:	4b9d      	ldr	r3, [pc, #628]	; (8007680 <USB_EPStartXfer+0x370>)
 800740a:	400b      	ands	r3, r1
 800740c:	69b9      	ldr	r1, [r7, #24]
 800740e:	0148      	lsls	r0, r1, #5
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	4401      	add	r1, r0
 8007414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007418:	4313      	orrs	r3, r2
 800741a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007432:	69b9      	ldr	r1, [r7, #24]
 8007434:	0148      	lsls	r0, r1, #5
 8007436:	69f9      	ldr	r1, [r7, #28]
 8007438:	4401      	add	r1, r0
 800743a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800743e:	4313      	orrs	r3, r2
 8007440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11f      	bne.n	800748a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d14b      	bne.n	8007528 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	461a      	mov	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	791b      	ldrb	r3, [r3, #4]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d128      	bne.n	8007506 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d110      	bne.n	80074e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e00f      	b.n	8007506 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	e133      	b.n	8007790 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d015      	beq.n	800757c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 811b 	beq.w	8007790 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	2101      	movs	r1, #1
 800756c:	fa01 f303 	lsl.w	r3, r1, r3
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007576:	4313      	orrs	r3, r2
 8007578:	634b      	str	r3, [r1, #52]	; 0x34
 800757a:	e109      	b.n	8007790 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d110      	bne.n	80075ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	e00f      	b.n	80075ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6919      	ldr	r1, [r3, #16]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	b298      	uxth	r0, r3
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4603      	mov	r3, r0
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fade 	bl	8007ba4 <USB_WritePacket>
 80075e8:	e0d2      	b.n	8007790 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007604:	0cdb      	lsrs	r3, r3, #19
 8007606:	04db      	lsls	r3, r3, #19
 8007608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800762c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d126      	bne.n	8007684 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800764c:	69b9      	ldr	r1, [r7, #24]
 800764e:	0148      	lsls	r0, r1, #5
 8007650:	69f9      	ldr	r1, [r7, #28]
 8007652:	4401      	add	r1, r0
 8007654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007658:	4313      	orrs	r3, r2
 800765a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800767a:	6113      	str	r3, [r2, #16]
 800767c:	e03a      	b.n	80076f4 <USB_EPStartXfer+0x3e4>
 800767e:	bf00      	nop
 8007680:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4413      	add	r3, r2
 800768e:	1e5a      	subs	r2, r3, #1
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	8afa      	ldrh	r2, [r7, #22]
 80076a0:	fb03 f202 	mul.w	r2, r3, r2
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	8afb      	ldrh	r3, [r7, #22]
 80076b8:	04d9      	lsls	r1, r3, #19
 80076ba:	4b38      	ldr	r3, [pc, #224]	; (800779c <USB_EPStartXfer+0x48c>)
 80076bc:	400b      	ands	r3, r1
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	0148      	lsls	r0, r1, #5
 80076c2:	69f9      	ldr	r1, [r7, #28]
 80076c4:	4401      	add	r1, r0
 80076c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ca:	4313      	orrs	r3, r2
 80076cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	0148      	lsls	r0, r1, #5
 80076e8:	69f9      	ldr	r1, [r7, #28]
 80076ea:	4401      	add	r1, r0
 80076ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076f0:	4313      	orrs	r3, r2
 80076f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10d      	bne.n	8007716 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6919      	ldr	r1, [r3, #16]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	460a      	mov	r2, r1
 8007714:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d128      	bne.n	8007770 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772a:	2b00      	cmp	r3, #0
 800772c:	d110      	bne.n	8007750 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e00f      	b.n	8007770 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800776e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800778e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	1ff80000 	.word	0x1ff80000

080077a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	f040 80ce 	bne.w	800795e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d132      	bne.n	8007830 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007828:	0cdb      	lsrs	r3, r3, #19
 800782a:	04db      	lsls	r3, r3, #19
 800782c:	6113      	str	r3, [r2, #16]
 800782e:	e04e      	b.n	80078ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784a:	0cdb      	lsrs	r3, r3, #19
 800784c:	04db      	lsls	r3, r3, #19
 800784e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800786e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007872:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	429a      	cmp	r2, r3
 800787e:	d903      	bls.n	8007888 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078be:	6939      	ldr	r1, [r7, #16]
 80078c0:	0148      	lsls	r0, r1, #5
 80078c2:	6979      	ldr	r1, [r7, #20]
 80078c4:	4401      	add	r1, r0
 80078c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ca:	4313      	orrs	r3, r2
 80078cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d11e      	bne.n	8007912 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	461a      	mov	r2, r3
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	440a      	add	r2, r1
 8007906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	e097      	b.n	8007a42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007930:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8083 	beq.w	8007a42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f303 	lsl.w	r3, r1, r3
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007958:	4313      	orrs	r3, r2
 800795a:	634b      	str	r3, [r1, #52]	; 0x34
 800795c:	e071      	b.n	8007a42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	440a      	add	r2, r1
 8007974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007978:	0cdb      	lsrs	r3, r3, #19
 800797a:	04db      	lsls	r3, r3, #19
 800797c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800799c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f0:	6939      	ldr	r1, [r7, #16]
 80079f2:	0148      	lsls	r0, r1, #5
 80079f4:	6979      	ldr	r1, [r7, #20]
 80079f6:	4401      	add	r1, r0
 80079f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079fc:	4313      	orrs	r3, r2
 80079fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10d      	bne.n	8007a22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6919      	ldr	r1, [r3, #16]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	460a      	mov	r2, r1
 8007a20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d14a      	bne.n	8007b04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a86:	f040 8086 	bne.w	8007b96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d902      	bls.n	8007ae8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ae6:	e056      	b.n	8007b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b00:	d0e7      	beq.n	8007ad2 <USB_EPStopXfer+0x82>
 8007b02:	e048      	b.n	8007b96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b1c:	d13b      	bne.n	8007b96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	7812      	ldrb	r2, [r2, #0]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d902      	bls.n	8007b7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
          break;
 8007b7a:	e00c      	b.n	8007b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b94:	d0e7      	beq.n	8007b66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b089      	sub	sp, #36	; 0x24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	71fb      	strb	r3, [r7, #7]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d123      	bne.n	8007c12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bca:	88bb      	ldrh	r3, [r7, #4]
 8007bcc:	3303      	adds	r3, #3
 8007bce:	089b      	lsrs	r3, r3, #2
 8007bd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	e018      	b.n	8007c0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	031a      	lsls	r2, r3, #12
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be4:	461a      	mov	r2, r3
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	3301      	adds	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3e2      	bcc.n	8007bd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3724      	adds	r7, #36	; 0x24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b08b      	sub	sp, #44	; 0x2c
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c36:	88fb      	ldrh	r3, [r7, #6]
 8007c38:	089b      	lsrs	r3, r3, #2
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	e014      	b.n	8007c76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	3301      	adds	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	3301      	adds	r3, #1
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	3301      	adds	r3, #1
 8007c74:	623b      	str	r3, [r7, #32]
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d3e6      	bcc.n	8007c4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c7e:	8bfb      	ldrh	r3, [r7, #30]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01e      	beq.n	8007cc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	701a      	strb	r2, [r3, #0]
      i++;
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	3301      	adds	r3, #1
 8007cae:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007cb6:	8bfb      	ldrh	r3, [r7, #30]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007cbc:	8bfb      	ldrh	r3, [r7, #30]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1ea      	bne.n	8007c98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	372c      	adds	r7, #44	; 0x2c
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d12c      	bne.n	8007d46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	db12      	blt.n	8007d24 <USB_EPSetStall+0x54>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00f      	beq.n	8007d24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	e02b      	b.n	8007d9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	db12      	blt.n	8007d7e <USB_EPSetStall+0xae>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00f      	beq.n	8007d7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d128      	bne.n	8007e1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007de6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d003      	beq.n	8007df8 <USB_EPClearStall+0x4c>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	791b      	ldrb	r3, [r3, #4]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d138      	bne.n	8007e6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e027      	b.n	8007e6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	791b      	ldrb	r3, [r3, #4]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d003      	beq.n	8007e4a <USB_EPClearStall+0x9e>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d10f      	bne.n	8007e6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ede:	f023 0303 	bic.w	r3, r3, #3
 8007ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef2:	f023 0302 	bic.w	r3, r3, #2
 8007ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f34:	f043 0302 	orr.w	r3, r3, #2
 8007f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f60:	68fb      	ldr	r3, [r7, #12]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	0c1b      	lsrs	r3, r3, #16
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	b29b      	uxth	r3, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4013      	ands	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008004:	68bb      	ldr	r3, [r7, #8]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008034:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	fa22 f303 	lsr.w	r3, r2, r3
 8008042:	01db      	lsls	r3, r3, #7
 8008044:	b2db      	uxtb	r3, r3
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4013      	ands	r3, r2
 800805e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008060:	68bb      	ldr	r3, [r7, #8]
}
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f003 0301 	and.w	r3, r3, #1
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	460b      	mov	r3, r1
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	333c      	adds	r3, #60	; 0x3c
 80080e6:	3304      	adds	r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4a26      	ldr	r2, [pc, #152]	; (8008188 <USB_EP0_OutStart+0xb8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d90a      	bls.n	800810a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008104:	d101      	bne.n	800810a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	e037      	b.n	800817a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	2300      	movs	r3, #0
 8008114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008138:	f043 0318 	orr.w	r3, r3, #24
 800813c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10f      	bne.n	8008178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008172:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	4f54300a 	.word	0x4f54300a

0800818c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <USB_CoreReset+0x64>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d901      	bls.n	80081aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e01b      	b.n	80081e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	daf2      	bge.n	8008198 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f043 0201 	orr.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <USB_CoreReset+0x64>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e006      	b.n	80081e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d0f0      	beq.n	80081c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	00030d40 	.word	0x00030d40

080081f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008200:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008204:	f002 fc1e 	bl	800aa44 <USBD_static_malloc>
 8008208:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32b0      	adds	r2, #176	; 0xb0
 800821a:	2100      	movs	r1, #0
 800821c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008220:	2302      	movs	r3, #2
 8008222:	e0d4      	b.n	80083ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008224:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f002 fc72 	bl	800ab14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32b0      	adds	r2, #176	; 0xb0
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	32b0      	adds	r2, #176	; 0xb0
 800824a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7c1b      	ldrb	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d138      	bne.n	80082ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800825c:	4b5e      	ldr	r3, [pc, #376]	; (80083d8 <USBD_CDC_Init+0x1e4>)
 800825e:	7819      	ldrb	r1, [r3, #0]
 8008260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008264:	2202      	movs	r2, #2
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 fac9 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800826c:	4b5a      	ldr	r3, [pc, #360]	; (80083d8 <USBD_CDC_Init+0x1e4>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 020f 	and.w	r2, r3, #15
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	2201      	movs	r2, #1
 8008284:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008286:	4b55      	ldr	r3, [pc, #340]	; (80083dc <USBD_CDC_Init+0x1e8>)
 8008288:	7819      	ldrb	r1, [r3, #0]
 800828a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828e:	2202      	movs	r2, #2
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f002 fab4 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008296:	4b51      	ldr	r3, [pc, #324]	; (80083dc <USBD_CDC_Init+0x1e8>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	f003 020f 	and.w	r2, r3, #15
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082ae:	2201      	movs	r2, #1
 80082b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082b2:	4b4b      	ldr	r3, [pc, #300]	; (80083e0 <USBD_CDC_Init+0x1ec>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 020f 	and.w	r2, r3, #15
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	3326      	adds	r3, #38	; 0x26
 80082c8:	2210      	movs	r2, #16
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	e035      	b.n	800833a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082ce:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <USBD_CDC_Init+0x1e4>)
 80082d0:	7819      	ldrb	r1, [r3, #0]
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	2202      	movs	r2, #2
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f002 fa91 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082dc:	4b3e      	ldr	r3, [pc, #248]	; (80083d8 <USBD_CDC_Init+0x1e4>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 020f 	and.w	r2, r3, #15
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	3324      	adds	r3, #36	; 0x24
 80082f2:	2201      	movs	r2, #1
 80082f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082f6:	4b39      	ldr	r3, [pc, #228]	; (80083dc <USBD_CDC_Init+0x1e8>)
 80082f8:	7819      	ldrb	r1, [r3, #0]
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	2202      	movs	r2, #2
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f002 fa7d 	bl	800a7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008304:	4b35      	ldr	r3, [pc, #212]	; (80083dc <USBD_CDC_Init+0x1e8>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	f003 020f 	and.w	r2, r3, #15
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800831c:	2201      	movs	r2, #1
 800831e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008320:	4b2f      	ldr	r3, [pc, #188]	; (80083e0 <USBD_CDC_Init+0x1ec>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f003 020f 	and.w	r2, r3, #15
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3326      	adds	r3, #38	; 0x26
 8008336:	2210      	movs	r2, #16
 8008338:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800833a:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <USBD_CDC_Init+0x1ec>)
 800833c:	7819      	ldrb	r1, [r3, #0]
 800833e:	2308      	movs	r3, #8
 8008340:	2203      	movs	r2, #3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f002 fa5b 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008348:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <USBD_CDC_Init+0x1ec>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	3324      	adds	r3, #36	; 0x24
 800835e:	2201      	movs	r2, #1
 8008360:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	33b0      	adds	r3, #176	; 0xb0
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008398:	2302      	movs	r3, #2
 800839a:	e018      	b.n	80083ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7c1b      	ldrb	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083a4:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <USBD_CDC_Init+0x1e8>)
 80083a6:	7819      	ldrb	r1, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fb12 	bl	800a9dc <USBD_LL_PrepareReceive>
 80083b8:	e008      	b.n	80083cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <USBD_CDC_Init+0x1e8>)
 80083bc:	7819      	ldrb	r1, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083c4:	2340      	movs	r3, #64	; 0x40
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f002 fb08 	bl	800a9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000093 	.word	0x20000093
 80083dc:	20000094 	.word	0x20000094
 80083e0:	20000095 	.word	0x20000095

080083e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083f0:	4b3a      	ldr	r3, [pc, #232]	; (80084dc <USBD_CDC_DeInit+0xf8>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f002 fa27 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083fc:	4b37      	ldr	r3, [pc, #220]	; (80084dc <USBD_CDC_DeInit+0xf8>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	2200      	movs	r2, #0
 8008414:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008416:	4b32      	ldr	r3, [pc, #200]	; (80084e0 <USBD_CDC_DeInit+0xfc>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f002 fa14 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008422:	4b2f      	ldr	r3, [pc, #188]	; (80084e0 <USBD_CDC_DeInit+0xfc>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800843a:	2200      	movs	r2, #0
 800843c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <USBD_CDC_DeInit+0x100>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f002 fa00 	bl	800a84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <USBD_CDC_DeInit+0x100>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 020f 	and.w	r2, r3, #15
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3324      	adds	r3, #36	; 0x24
 8008460:	2200      	movs	r2, #0
 8008462:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008464:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <USBD_CDC_DeInit+0x100>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3326      	adds	r3, #38	; 0x26
 800847a:	2200      	movs	r2, #0
 800847c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	32b0      	adds	r2, #176	; 0xb0
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01f      	beq.n	80084d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	33b0      	adds	r3, #176	; 0xb0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	; 0xb0
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 fad4 	bl	800aa60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32b0      	adds	r2, #176	; 0xb0
 80084c2:	2100      	movs	r1, #0
 80084c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000093 	.word	0x20000093
 80084e0:	20000094 	.word	0x20000094
 80084e4:	20000095 	.word	0x20000095

080084e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	32b0      	adds	r2, #176	; 0xb0
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	e0bf      	b.n	8008698 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008520:	2b00      	cmp	r3, #0
 8008522:	d050      	beq.n	80085c6 <USBD_CDC_Setup+0xde>
 8008524:	2b20      	cmp	r3, #32
 8008526:	f040 80af 	bne.w	8008688 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d03a      	beq.n	80085a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b25b      	sxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	da1b      	bge.n	8008574 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	33b0      	adds	r3, #176	; 0xb0
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008552:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	88d2      	ldrh	r2, [r2, #6]
 8008558:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b07      	cmp	r3, #7
 8008560:	bf28      	it	cs
 8008562:	2307      	movcs	r3, #7
 8008564:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	89fa      	ldrh	r2, [r7, #14]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fd43 	bl	8009ff8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008572:	e090      	b.n	8008696 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	785a      	ldrb	r2, [r3, #1]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	88db      	ldrh	r3, [r3, #6]
 8008582:	2b3f      	cmp	r3, #63	; 0x3f
 8008584:	d803      	bhi.n	800858e <USBD_CDC_Setup+0xa6>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	e000      	b.n	8008590 <USBD_CDC_Setup+0xa8>
 800858e:	2240      	movs	r2, #64	; 0x40
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800859e:	461a      	mov	r2, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fd55 	bl	800a050 <USBD_CtlPrepareRx>
      break;
 80085a6:	e076      	b.n	8008696 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	33b0      	adds	r3, #176	; 0xb0
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	7850      	ldrb	r0, [r2, #1]
 80085be:	2200      	movs	r2, #0
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	4798      	blx	r3
      break;
 80085c4:	e067      	b.n	8008696 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b0b      	cmp	r3, #11
 80085cc:	d851      	bhi.n	8008672 <USBD_CDC_Setup+0x18a>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_CDC_Setup+0xec>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008605 	.word	0x08008605
 80085d8:	08008681 	.word	0x08008681
 80085dc:	08008673 	.word	0x08008673
 80085e0:	08008673 	.word	0x08008673
 80085e4:	08008673 	.word	0x08008673
 80085e8:	08008673 	.word	0x08008673
 80085ec:	08008673 	.word	0x08008673
 80085f0:	08008673 	.word	0x08008673
 80085f4:	08008673 	.word	0x08008673
 80085f8:	08008673 	.word	0x08008673
 80085fc:	0800862f 	.word	0x0800862f
 8008600:	08008659 	.word	0x08008659
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b03      	cmp	r3, #3
 800860e:	d107      	bne.n	8008620 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008610:	f107 030a 	add.w	r3, r7, #10
 8008614:	2202      	movs	r2, #2
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fced 	bl	8009ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800861e:	e032      	b.n	8008686 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fc77 	bl	8009f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
          break;
 800862c:	e02b      	b.n	8008686 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b03      	cmp	r3, #3
 8008638:	d107      	bne.n	800864a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800863a:	f107 030d 	add.w	r3, r7, #13
 800863e:	2201      	movs	r2, #1
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 fcd8 	bl	8009ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008648:	e01d      	b.n	8008686 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 fc62 	bl	8009f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8008652:	2303      	movs	r3, #3
 8008654:	75fb      	strb	r3, [r7, #23]
          break;
 8008656:	e016      	b.n	8008686 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b03      	cmp	r3, #3
 8008662:	d00f      	beq.n	8008684 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fc55 	bl	8009f16 <USBD_CtlError>
            ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008670:	e008      	b.n	8008684 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fc4e 	bl	8009f16 <USBD_CtlError>
          ret = USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	75fb      	strb	r3, [r7, #23]
          break;
 800867e:	e002      	b.n	8008686 <USBD_CDC_Setup+0x19e>
          break;
 8008680:	bf00      	nop
 8008682:	e008      	b.n	8008696 <USBD_CDC_Setup+0x1ae>
          break;
 8008684:	bf00      	nop
      }
      break;
 8008686:	e006      	b.n	8008696 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fc43 	bl	8009f16 <USBD_CtlError>
      ret = USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	75fb      	strb	r3, [r7, #23]
      break;
 8008694:	bf00      	nop
  }

  return (uint8_t)ret;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	32b0      	adds	r2, #176	; 0xb0
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e065      	b.n	8008796 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	32b0      	adds	r2, #176	; 0xb0
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	3318      	adds	r3, #24
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d02f      	beq.n	8008754 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	3318      	adds	r3, #24
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	f003 010f 	and.w	r1, r3, #15
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	460b      	mov	r3, r1
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4403      	add	r3, r0
 800871c:	3348      	adds	r3, #72	; 0x48
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	fbb2 f1f3 	udiv	r1, r2, r3
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800872a:	2b00      	cmp	r3, #0
 800872c:	d112      	bne.n	8008754 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	3318      	adds	r3, #24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008746:	78f9      	ldrb	r1, [r7, #3]
 8008748:	2300      	movs	r3, #0
 800874a:	2200      	movs	r2, #0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f002 f924 	bl	800a99a <USBD_LL_Transmit>
 8008752:	e01f      	b.n	8008794 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	33b0      	adds	r3, #176	; 0xb0
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d010      	beq.n	8008794 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	33b0      	adds	r3, #176	; 0xb0
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	32b0      	adds	r2, #176	; 0xb0
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32b0      	adds	r2, #176	; 0xb0
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e01a      	b.n	8008806 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f002 f922 	bl	800aa1e <USBD_LL_GetRxDataSize>
 80087da:	4602      	mov	r2, r0
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	33b0      	adds	r3, #176	; 0xb0
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008800:	4611      	mov	r1, r2
 8008802:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	32b0      	adds	r2, #176	; 0xb0
 8008820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008824:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	e025      	b.n	800887c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	33b0      	adds	r3, #176	; 0xb0
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <USBD_CDC_EP0_RxReady+0x6c>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800884a:	2bff      	cmp	r3, #255	; 0xff
 800884c:	d015      	beq.n	800887a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	33b0      	adds	r3, #176	; 0xb0
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008866:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800886e:	b292      	uxth	r2, r2
 8008870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	22ff      	movs	r2, #255	; 0xff
 8008876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800888c:	2182      	movs	r1, #130	; 0x82
 800888e:	4818      	ldr	r0, [pc, #96]	; (80088f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008890:	f000 fd09 	bl	80092a6 <USBD_GetEpDesc>
 8008894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008896:	2101      	movs	r1, #1
 8008898:	4815      	ldr	r0, [pc, #84]	; (80088f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800889a:	f000 fd04 	bl	80092a6 <USBD_GetEpDesc>
 800889e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088a0:	2181      	movs	r1, #129	; 0x81
 80088a2:	4813      	ldr	r0, [pc, #76]	; (80088f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088a4:	f000 fcff 	bl	80092a6 <USBD_GetEpDesc>
 80088a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2210      	movs	r2, #16
 80088b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2200      	movs	r2, #0
 80088c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088c4:	711a      	strb	r2, [r3, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d8:	711a      	strb	r2, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2243      	movs	r2, #67	; 0x43
 80088e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000050 	.word	0x20000050

080088f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088fc:	2182      	movs	r1, #130	; 0x82
 80088fe:	4818      	ldr	r0, [pc, #96]	; (8008960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008900:	f000 fcd1 	bl	80092a6 <USBD_GetEpDesc>
 8008904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008906:	2101      	movs	r1, #1
 8008908:	4815      	ldr	r0, [pc, #84]	; (8008960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800890a:	f000 fccc 	bl	80092a6 <USBD_GetEpDesc>
 800890e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008910:	2181      	movs	r1, #129	; 0x81
 8008912:	4813      	ldr	r0, [pc, #76]	; (8008960 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008914:	f000 fcc7 	bl	80092a6 <USBD_GetEpDesc>
 8008918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2210      	movs	r2, #16
 8008924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d006      	beq.n	800893a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2200      	movs	r2, #0
 8008930:	711a      	strb	r2, [r3, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f042 0202 	orr.w	r2, r2, #2
 8008938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	711a      	strb	r2, [r3, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f042 0202 	orr.w	r2, r2, #2
 800894c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2243      	movs	r2, #67	; 0x43
 8008952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000050 	.word	0x20000050

08008964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800896c:	2182      	movs	r1, #130	; 0x82
 800896e:	4818      	ldr	r0, [pc, #96]	; (80089d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008970:	f000 fc99 	bl	80092a6 <USBD_GetEpDesc>
 8008974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008976:	2101      	movs	r1, #1
 8008978:	4815      	ldr	r0, [pc, #84]	; (80089d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800897a:	f000 fc94 	bl	80092a6 <USBD_GetEpDesc>
 800897e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008980:	2181      	movs	r1, #129	; 0x81
 8008982:	4813      	ldr	r0, [pc, #76]	; (80089d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008984:	f000 fc8f 	bl	80092a6 <USBD_GetEpDesc>
 8008988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2210      	movs	r2, #16
 8008994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2200      	movs	r2, #0
 80089a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b8:	711a      	strb	r2, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2243      	movs	r2, #67	; 0x43
 80089c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089c4:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000050 	.word	0x20000050

080089d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	220a      	movs	r2, #10
 80089e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	2000000c 	.word	0x2000000c

080089f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e009      	b.n	8008a1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	33b0      	adds	r3, #176	; 0xb0
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	32b0      	adds	r2, #176	; 0xb0
 8008a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e008      	b.n	8008a60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	32b0      	adds	r2, #176	; 0xb0
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e004      	b.n	8008a9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32b0      	adds	r2, #176	; 0xb0
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	32b0      	adds	r2, #176	; 0xb0
 8008aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e018      	b.n	8008b08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7c1b      	ldrb	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <USBD_CDC_ReceivePacket+0x68>)
 8008ae0:	7819      	ldrb	r1, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 ff75 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008af2:	e008      	b.n	8008b06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <USBD_CDC_ReceivePacket+0x68>)
 8008af6:	7819      	ldrb	r1, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 ff6b 	bl	800a9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000094 	.word	0x20000094

08008b14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e01f      	b.n	8008b6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	79fa      	ldrb	r2, [r7, #7]
 8008b5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f001 fde5 	bl	800a730 <USBD_LL_Init>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e025      	b.n	8008bd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32ae      	adds	r2, #174	; 0xae
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	32ae      	adds	r2, #174	; 0xae
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	f107 020e 	add.w	r2, r7, #14
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fded 	bl	800a7c8 <USBD_LL_Start>
 8008bee:	4603      	mov	r3, r0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d009      	beq.n	8008c3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	4611      	mov	r1, r2
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f908 	bl	8009ea2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d01a      	beq.n	8008cec <USBD_LL_SetupStage+0x72>
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d822      	bhi.n	8008d00 <USBD_LL_SetupStage+0x86>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <USBD_LL_SetupStage+0x4a>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d00a      	beq.n	8008cd8 <USBD_LL_SetupStage+0x5e>
 8008cc2:	e01d      	b.n	8008d00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fb5f 	bl	8009390 <USBD_StdDevReq>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd6:	e020      	b.n	8008d1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fbc7 	bl	8009474 <USBD_StdItfReq>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	e016      	b.n	8008d1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc29 	bl	800954c <USBD_StdEPReq>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfe:	e00c      	b.n	8008d1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fdba 	bl	800a888 <USBD_LL_StallEP>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]
      break;
 8008d18:	bf00      	nop
  }

  return ret;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d16e      	bne.n	8008e1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f040 8098 	bne.w	8008e80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d913      	bls.n	8008d84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	4293      	cmp	r3, r2
 8008d74:	bf28      	it	cs
 8008d76:	4613      	movcs	r3, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f001 f984 	bl	800a08a <USBD_CtlContinueRx>
 8008d82:	e07d      	b.n	8008e80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d014      	beq.n	8008dbc <USBD_LL_DataOutStage+0x98>
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d81d      	bhi.n	8008dd2 <USBD_LL_DataOutStage+0xae>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <USBD_LL_DataOutStage+0x7c>
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d003      	beq.n	8008da6 <USBD_LL_DataOutStage+0x82>
 8008d9e:	e018      	b.n	8008dd2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	75bb      	strb	r3, [r7, #22]
            break;
 8008da4:	e018      	b.n	8008dd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fa5e 	bl	8009272 <USBD_CoreFindIF>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75bb      	strb	r3, [r7, #22]
            break;
 8008dba:	e00d      	b.n	8008dd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fa60 	bl	800928c <USBD_CoreFindEP>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75bb      	strb	r3, [r7, #22]
            break;
 8008dd0:	e002      	b.n	8008dd8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75bb      	strb	r3, [r7, #22]
            break;
 8008dd6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dd8:	7dbb      	ldrb	r3, [r7, #22]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d119      	bne.n	8008e12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d113      	bne.n	8008e12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dea:	7dba      	ldrb	r2, [r7, #22]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	32ae      	adds	r2, #174	; 0xae
 8008df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008dfa:	7dba      	ldrb	r2, [r7, #22]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e02:	7dba      	ldrb	r2, [r7, #22]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	32ae      	adds	r2, #174	; 0xae
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f001 f94a 	bl	800a0ac <USBD_CtlSendStatus>
 8008e18:	e032      	b.n	8008e80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	4619      	mov	r1, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fa31 	bl	800928c <USBD_CoreFindEP>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e2e:	7dbb      	ldrb	r3, [r7, #22]
 8008e30:	2bff      	cmp	r3, #255	; 0xff
 8008e32:	d025      	beq.n	8008e80 <USBD_LL_DataOutStage+0x15c>
 8008e34:	7dbb      	ldrb	r3, [r7, #22]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d122      	bne.n	8008e80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d117      	bne.n	8008e76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e46:	7dba      	ldrb	r2, [r7, #22]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	32ae      	adds	r2, #174	; 0xae
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00f      	beq.n	8008e76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e56:	7dba      	ldrb	r2, [r7, #22]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e5e:	7dba      	ldrb	r2, [r7, #22]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	32ae      	adds	r2, #174	; 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	7afa      	ldrb	r2, [r7, #11]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	4798      	blx	r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	e000      	b.n	8008e82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	460b      	mov	r3, r1
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d16f      	bne.n	8008f7e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3314      	adds	r3, #20
 8008ea2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d15a      	bne.n	8008f64 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d914      	bls.n	8008ee4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f001 f8ac 	bl	800a02e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f001 fd7d 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008ee2:	e03f      	b.n	8008f64 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d11c      	bne.n	8008f2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d316      	bcc.n	8008f2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d20f      	bcs.n	8008f2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f001 f88d 	bl	800a02e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f001 fd5a 	bl	800a9dc <USBD_LL_PrepareReceive>
 8008f28:	e01c      	b.n	8008f64 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d10f      	bne.n	8008f56 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f001 fc95 	bl	800a888 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f001 f8b7 	bl	800a0d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03a      	beq.n	8008fe4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff fe42 	bl	8008bf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f7c:	e032      	b.n	8008fe4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	4619      	mov	r1, r3
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f97f 	bl	800928c <USBD_CoreFindEP>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2bff      	cmp	r3, #255	; 0xff
 8008f96:	d025      	beq.n	8008fe4 <USBD_LL_DataInStage+0x15a>
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d122      	bne.n	8008fe4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d11c      	bne.n	8008fe4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008faa:	7dfa      	ldrb	r2, [r7, #23]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	32ae      	adds	r2, #174	; 0xae
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d014      	beq.n	8008fe4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008fba:	7dfa      	ldrb	r2, [r7, #23]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008fc2:	7dfa      	ldrb	r2, [r7, #23]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	32ae      	adds	r2, #174	; 0xae
 8008fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	7afa      	ldrb	r2, [r7, #11]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	4798      	blx	r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fda:	7dbb      	ldrb	r3, [r7, #22]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fe0:	7dbb      	ldrb	r3, [r7, #22]
 8008fe2:	e000      	b.n	8008fe6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d014      	beq.n	8009054 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00e      	beq.n	8009054 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	6852      	ldr	r2, [r2, #4]
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	4611      	mov	r1, r2
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009054:	2340      	movs	r3, #64	; 0x40
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 fbcf 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2240      	movs	r2, #64	; 0x40
 800906c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	2200      	movs	r2, #0
 8009074:	2180      	movs	r1, #128	; 0x80
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fbc1 	bl	800a7fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2240      	movs	r2, #64	; 0x40
 8009086:	621a      	str	r2, [r3, #32]

  return ret;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2204      	movs	r2, #4
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d106      	bne.n	8009100 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b03      	cmp	r3, #3
 8009120:	d110      	bne.n	8009144 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	32ae      	adds	r2, #174	; 0xae
 8009164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800916c:	2303      	movs	r3, #3
 800916e:	e01c      	b.n	80091aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b03      	cmp	r3, #3
 800917a:	d115      	bne.n	80091a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	32ae      	adds	r2, #174	; 0xae
 8009186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	32ae      	adds	r2, #174	; 0xae
 800919a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	4611      	mov	r1, r2
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	32ae      	adds	r2, #174	; 0xae
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e01c      	b.n	800920e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d115      	bne.n	800920c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	32ae      	adds	r2, #174	; 0xae
 80091ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	32ae      	adds	r2, #174	; 0xae
 80091fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	4611      	mov	r1, r2
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00e      	beq.n	8009268 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6852      	ldr	r2, [r2, #4]
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	4611      	mov	r1, r2
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800927e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009298:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b086      	sub	sp, #24
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d920      	bls.n	8009310 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092d6:	e013      	b.n	8009300 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092d8:	f107 030a 	add.w	r3, r7, #10
 80092dc:	4619      	mov	r1, r3
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f000 f81b 	bl	800931a <USBD_GetNextDesc>
 80092e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	785b      	ldrb	r3, [r3, #1]
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d108      	bne.n	8009300 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	789b      	ldrb	r3, [r3, #2]
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d008      	beq.n	800930e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	885b      	ldrh	r3, [r3, #2]
 8009304:	b29a      	uxth	r2, r3
 8009306:	897b      	ldrh	r3, [r7, #10]
 8009308:	429a      	cmp	r2, r3
 800930a:	d8e5      	bhi.n	80092d8 <USBD_GetEpDesc+0x32>
 800930c:	e000      	b.n	8009310 <USBD_GetEpDesc+0x6a>
          break;
 800930e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009310:	693b      	ldr	r3, [r7, #16]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	881a      	ldrh	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b29b      	uxth	r3, r3
 8009332:	4413      	add	r3, r2
 8009334:	b29a      	uxth	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4413      	add	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009346:	68fb      	ldr	r3, [r7, #12]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	3301      	adds	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009372:	8a3b      	ldrh	r3, [r7, #16]
 8009374:	021b      	lsls	r3, r3, #8
 8009376:	b21a      	sxth	r2, r3
 8009378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800937c:	4313      	orrs	r3, r2
 800937e:	b21b      	sxth	r3, r3
 8009380:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009382:	89fb      	ldrh	r3, [r7, #14]
}
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093a6:	2b40      	cmp	r3, #64	; 0x40
 80093a8:	d005      	beq.n	80093b6 <USBD_StdDevReq+0x26>
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d857      	bhi.n	800945e <USBD_StdDevReq+0xce>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00f      	beq.n	80093d2 <USBD_StdDevReq+0x42>
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d153      	bne.n	800945e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	32ae      	adds	r2, #174	; 0xae
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
      break;
 80093d0:	e04a      	b.n	8009468 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b09      	cmp	r3, #9
 80093d8:	d83b      	bhi.n	8009452 <USBD_StdDevReq+0xc2>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBD_StdDevReq+0x50>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	08009435 	.word	0x08009435
 80093e4:	08009449 	.word	0x08009449
 80093e8:	08009453 	.word	0x08009453
 80093ec:	0800943f 	.word	0x0800943f
 80093f0:	08009453 	.word	0x08009453
 80093f4:	08009413 	.word	0x08009413
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009453 	.word	0x08009453
 8009400:	0800942b 	.word	0x0800942b
 8009404:	0800941d 	.word	0x0800941d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa3c 	bl	8009888 <USBD_GetDescriptor>
          break;
 8009410:	e024      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fba1 	bl	8009b5c <USBD_SetAddress>
          break;
 800941a:	e01f      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fbe0 	bl	8009be4 <USBD_SetConfig>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
          break;
 8009428:	e018      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fc83 	bl	8009d38 <USBD_GetConfig>
          break;
 8009432:	e013      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fcb4 	bl	8009da4 <USBD_GetStatus>
          break;
 800943c:	e00e      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fce3 	bl	8009e0c <USBD_SetFeature>
          break;
 8009446:	e009      	b.n	800945c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fd07 	bl	8009e5e <USBD_ClrFeature>
          break;
 8009450:	e004      	b.n	800945c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fd5e 	bl	8009f16 <USBD_CtlError>
          break;
 800945a:	bf00      	nop
      }
      break;
 800945c:	e004      	b.n	8009468 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd58 	bl	8009f16 <USBD_CtlError>
      break;
 8009466:	bf00      	nop
  }

  return ret;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop

08009474 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800948a:	2b40      	cmp	r3, #64	; 0x40
 800948c:	d005      	beq.n	800949a <USBD_StdItfReq+0x26>
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d852      	bhi.n	8009538 <USBD_StdItfReq+0xc4>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <USBD_StdItfReq+0x26>
 8009496:	2b20      	cmp	r3, #32
 8009498:	d14e      	bne.n	8009538 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d840      	bhi.n	800952a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	889b      	ldrh	r3, [r3, #4]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d836      	bhi.n	8009520 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	889b      	ldrh	r3, [r3, #4]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fed9 	bl	8009272 <USBD_CoreFindIF>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	2bff      	cmp	r3, #255	; 0xff
 80094c8:	d01d      	beq.n	8009506 <USBD_StdItfReq+0x92>
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11a      	bne.n	8009506 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094d0:	7bba      	ldrb	r2, [r7, #14]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	32ae      	adds	r2, #174	; 0xae
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00f      	beq.n	8009500 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094e0:	7bba      	ldrb	r2, [r7, #14]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094e8:	7bba      	ldrb	r2, [r7, #14]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	32ae      	adds	r2, #174	; 0xae
 80094ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094fe:	e004      	b.n	800950a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009504:	e001      	b.n	800950a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009506:	2303      	movs	r3, #3
 8009508:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	88db      	ldrh	r3, [r3, #6]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d110      	bne.n	8009534 <USBD_StdItfReq+0xc0>
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10d      	bne.n	8009534 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fdc7 	bl	800a0ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800951e:	e009      	b.n	8009534 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fcf7 	bl	8009f16 <USBD_CtlError>
          break;
 8009528:	e004      	b.n	8009534 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fcf2 	bl	8009f16 <USBD_CtlError>
          break;
 8009532:	e000      	b.n	8009536 <USBD_StdItfReq+0xc2>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e004      	b.n	8009542 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fceb 	bl	8009f16 <USBD_CtlError>
      break;
 8009540:	bf00      	nop
  }

  return ret;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009568:	2b40      	cmp	r3, #64	; 0x40
 800956a:	d007      	beq.n	800957c <USBD_StdEPReq+0x30>
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	f200 817f 	bhi.w	8009870 <USBD_StdEPReq+0x324>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d02a      	beq.n	80095cc <USBD_StdEPReq+0x80>
 8009576:	2b20      	cmp	r3, #32
 8009578:	f040 817a 	bne.w	8009870 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff fe83 	bl	800928c <USBD_CoreFindEP>
 8009586:	4603      	mov	r3, r0
 8009588:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958a:	7b7b      	ldrb	r3, [r7, #13]
 800958c:	2bff      	cmp	r3, #255	; 0xff
 800958e:	f000 8174 	beq.w	800987a <USBD_StdEPReq+0x32e>
 8009592:	7b7b      	ldrb	r3, [r7, #13]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f040 8170 	bne.w	800987a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800959a:	7b7a      	ldrb	r2, [r7, #13]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095a2:	7b7a      	ldrb	r2, [r7, #13]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	32ae      	adds	r2, #174	; 0xae
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 8163 	beq.w	800987a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095b4:	7b7a      	ldrb	r2, [r7, #13]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	; 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095ca:	e156      	b.n	800987a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d008      	beq.n	80095e6 <USBD_StdEPReq+0x9a>
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	f300 8145 	bgt.w	8009864 <USBD_StdEPReq+0x318>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 809b 	beq.w	8009716 <USBD_StdEPReq+0x1ca>
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d03c      	beq.n	800965e <USBD_StdEPReq+0x112>
 80095e4:	e13e      	b.n	8009864 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d002      	beq.n	80095f8 <USBD_StdEPReq+0xac>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d016      	beq.n	8009624 <USBD_StdEPReq+0xd8>
 80095f6:	e02c      	b.n	8009652 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <USBD_StdEPReq+0xce>
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b80      	cmp	r3, #128	; 0x80
 8009602:	d00a      	beq.n	800961a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 f93d 	bl	800a888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800960e:	2180      	movs	r1, #128	; 0x80
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f939 	bl	800a888 <USBD_LL_StallEP>
 8009616:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009618:	e020      	b.n	800965c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fc7a 	bl	8009f16 <USBD_CtlError>
              break;
 8009622:	e01b      	b.n	800965c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10e      	bne.n	800964a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <USBD_StdEPReq+0xfe>
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d008      	beq.n	800964a <USBD_StdEPReq+0xfe>
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	88db      	ldrh	r3, [r3, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f91f 	bl	800a888 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fd2e 	bl	800a0ac <USBD_CtlSendStatus>

              break;
 8009650:	e004      	b.n	800965c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fc5e 	bl	8009f16 <USBD_CtlError>
              break;
 800965a:	bf00      	nop
          }
          break;
 800965c:	e107      	b.n	800986e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d002      	beq.n	8009670 <USBD_StdEPReq+0x124>
 800966a:	2b03      	cmp	r3, #3
 800966c:	d016      	beq.n	800969c <USBD_StdEPReq+0x150>
 800966e:	e04b      	b.n	8009708 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00d      	beq.n	8009692 <USBD_StdEPReq+0x146>
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b80      	cmp	r3, #128	; 0x80
 800967a:	d00a      	beq.n	8009692 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 f901 	bl	800a888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009686:	2180      	movs	r1, #128	; 0x80
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f8fd 	bl	800a888 <USBD_LL_StallEP>
 800968e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009690:	e040      	b.n	8009714 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc3e 	bl	8009f16 <USBD_CtlError>
              break;
 800969a:	e03b      	b.n	8009714 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d136      	bne.n	8009712 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d004      	beq.n	80096b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 f907 	bl	800a8c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fcf7 	bl	800a0ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff fde2 	bl	800928c <USBD_CoreFindEP>
 80096c8:	4603      	mov	r3, r0
 80096ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096cc:	7b7b      	ldrb	r3, [r7, #13]
 80096ce:	2bff      	cmp	r3, #255	; 0xff
 80096d0:	d01f      	beq.n	8009712 <USBD_StdEPReq+0x1c6>
 80096d2:	7b7b      	ldrb	r3, [r7, #13]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11c      	bne.n	8009712 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096d8:	7b7a      	ldrb	r2, [r7, #13]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096e0:	7b7a      	ldrb	r2, [r7, #13]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	32ae      	adds	r2, #174	; 0xae
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d010      	beq.n	8009712 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096f0:	7b7a      	ldrb	r2, [r7, #13]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	32ae      	adds	r2, #174	; 0xae
 80096f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009706:	e004      	b.n	8009712 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc03 	bl	8009f16 <USBD_CtlError>
              break;
 8009710:	e000      	b.n	8009714 <USBD_StdEPReq+0x1c8>
              break;
 8009712:	bf00      	nop
          }
          break;
 8009714:	e0ab      	b.n	800986e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d002      	beq.n	8009728 <USBD_StdEPReq+0x1dc>
 8009722:	2b03      	cmp	r3, #3
 8009724:	d032      	beq.n	800978c <USBD_StdEPReq+0x240>
 8009726:	e097      	b.n	8009858 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <USBD_StdEPReq+0x1f2>
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b80      	cmp	r3, #128	; 0x80
 8009732:	d004      	beq.n	800973e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fbed 	bl	8009f16 <USBD_CtlError>
                break;
 800973c:	e091      	b.n	8009862 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009742:	2b00      	cmp	r3, #0
 8009744:	da0b      	bge.n	800975e <USBD_StdEPReq+0x212>
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	3310      	adds	r3, #16
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	3304      	adds	r3, #4
 800975c:	e00b      	b.n	8009776 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	4413      	add	r3, r2
 8009774:	3304      	adds	r3, #4
 8009776:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2202      	movs	r2, #2
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc37 	bl	8009ff8 <USBD_CtlSendData>
              break;
 800978a:	e06a      	b.n	8009862 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800978c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da11      	bge.n	80097b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	3324      	adds	r3, #36	; 0x24
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d117      	bne.n	80097de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fbb0 	bl	8009f16 <USBD_CtlError>
                  break;
 80097b6:	e054      	b.n	8009862 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	f003 020f 	and.w	r2, r3, #15
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fb9d 	bl	8009f16 <USBD_CtlError>
                  break;
 80097dc:	e041      	b.n	8009862 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da0b      	bge.n	80097fe <USBD_StdEPReq+0x2b2>
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	3310      	adds	r3, #16
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	4413      	add	r3, r2
 80097fa:	3304      	adds	r3, #4
 80097fc:	e00b      	b.n	8009816 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	3304      	adds	r3, #4
 8009816:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <USBD_StdEPReq+0x2d8>
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b80      	cmp	r3, #128	; 0x80
 8009822:	d103      	bne.n	800982c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e00e      	b.n	800984a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 f867 	bl	800a904 <USBD_LL_IsStallEP>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2201      	movs	r2, #1
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	e002      	b.n	800984a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2202      	movs	r2, #2
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fbd1 	bl	8009ff8 <USBD_CtlSendData>
              break;
 8009856:	e004      	b.n	8009862 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fb5b 	bl	8009f16 <USBD_CtlError>
              break;
 8009860:	bf00      	nop
          }
          break;
 8009862:	e004      	b.n	800986e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fb55 	bl	8009f16 <USBD_CtlError>
          break;
 800986c:	bf00      	nop
      }
      break;
 800986e:	e005      	b.n	800987c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb4f 	bl	8009f16 <USBD_CtlError>
      break;
 8009878:	e000      	b.n	800987c <USBD_StdEPReq+0x330>
      break;
 800987a:	bf00      	nop
  }

  return ret;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b06      	cmp	r3, #6
 80098aa:	f200 8128 	bhi.w	8009afe <USBD_GetDescriptor+0x276>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <USBD_GetDescriptor+0x2c>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	080098e9 	.word	0x080098e9
 80098bc:	08009929 	.word	0x08009929
 80098c0:	08009aff 	.word	0x08009aff
 80098c4:	08009aff 	.word	0x08009aff
 80098c8:	08009a9f 	.word	0x08009a9f
 80098cc:	08009acb 	.word	0x08009acb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7c12      	ldrb	r2, [r2, #16]
 80098dc:	f107 0108 	add.w	r1, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
      break;
 80098e6:	e112      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7c1b      	ldrb	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10d      	bne.n	800990c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f8:	f107 0208 	add.w	r2, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	2202      	movs	r2, #2
 8009908:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800990a:	e100      	b.n	8009b0e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	f107 0208 	add.w	r2, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
      break;
 8009926:	e0f2      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	885b      	ldrh	r3, [r3, #2]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b05      	cmp	r3, #5
 8009930:	f200 80ac 	bhi.w	8009a8c <USBD_GetDescriptor+0x204>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <USBD_GetDescriptor+0xb4>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009955 	.word	0x08009955
 8009940:	08009989 	.word	0x08009989
 8009944:	080099bd 	.word	0x080099bd
 8009948:	080099f1 	.word	0x080099f1
 800994c:	08009a25 	.word	0x08009a25
 8009950:	08009a59 	.word	0x08009a59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	7c12      	ldrb	r2, [r2, #16]
 800996c:	f107 0108 	add.w	r1, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009976:	e091      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 facb 	bl	8009f16 <USBD_CtlError>
            err++;
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	3301      	adds	r3, #1
 8009984:	72fb      	strb	r3, [r7, #11]
          break;
 8009986:	e089      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099aa:	e077      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fab1 	bl	8009f16 <USBD_CtlError>
            err++;
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	3301      	adds	r3, #1
 80099b8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ba:	e06f      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7c12      	ldrb	r2, [r2, #16]
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	4610      	mov	r0, r2
 80099da:	4798      	blx	r3
 80099dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099de:	e05d      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa97 	bl	8009f16 <USBD_CtlError>
            err++;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	3301      	adds	r3, #1
 80099ec:	72fb      	strb	r3, [r7, #11]
          break;
 80099ee:	e055      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7c12      	ldrb	r2, [r2, #16]
 8009a08:	f107 0108 	add.w	r1, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a12:	e043      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa7d 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
          break;
 8009a22:	e03b      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a46:	e029      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa63 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
          break;
 8009a56:	e021      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e00f      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa49 	bl	8009f16 <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e007      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa41 	bl	8009f16 <USBD_CtlError>
          err++;
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	3301      	adds	r3, #1
 8009a98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a9a:	bf00      	nop
      }
      break;
 8009a9c:	e037      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7c1b      	ldrb	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aae:	f107 0208 	add.w	r2, r7, #8
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4798      	blx	r3
 8009ab6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ab8:	e029      	b.n	8009b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fa2a 	bl	8009f16 <USBD_CtlError>
        err++;
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ac8:	e021      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7c1b      	ldrb	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10d      	bne.n	8009aee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	f107 0208 	add.w	r2, r7, #8
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4798      	blx	r3
 8009ae2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	2207      	movs	r2, #7
 8009aea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aec:	e00f      	b.n	8009b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fa10 	bl	8009f16 <USBD_CtlError>
        err++;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	3301      	adds	r3, #1
 8009afa:	72fb      	strb	r3, [r7, #11]
      break;
 8009afc:	e007      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa08 	bl	8009f16 <USBD_CtlError>
      err++;
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b0c:	bf00      	nop
  }

  if (err != 0U)
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11e      	bne.n	8009b52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	88db      	ldrh	r3, [r3, #6]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d016      	beq.n	8009b4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b1c:	893b      	ldrh	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00e      	beq.n	8009b40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	88da      	ldrh	r2, [r3, #6]
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bf28      	it	cs
 8009b2c:	4613      	movcs	r3, r2
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b32:	893b      	ldrh	r3, [r7, #8]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa5d 	bl	8009ff8 <USBD_CtlSendData>
 8009b3e:	e009      	b.n	8009b54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f9e7 	bl	8009f16 <USBD_CtlError>
 8009b48:	e004      	b.n	8009b54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 faae 	bl	800a0ac <USBD_CtlSendStatus>
 8009b50:	e000      	b.n	8009b54 <USBD_GetDescriptor+0x2cc>
    return;
 8009b52:	bf00      	nop
  }
}
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop

08009b5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	889b      	ldrh	r3, [r3, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d131      	bne.n	8009bd2 <USBD_SetAddress+0x76>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	88db      	ldrh	r3, [r3, #6]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d12d      	bne.n	8009bd2 <USBD_SetAddress+0x76>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b7c:	d829      	bhi.n	8009bd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d104      	bne.n	8009ba0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f9bc 	bl	8009f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9e:	e01d      	b.n	8009bdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7bfa      	ldrb	r2, [r7, #15]
 8009ba4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fed5 	bl	800a95c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa7a 	bl	800a0ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc6:	e009      	b.n	8009bdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd0:	e004      	b.n	8009bdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f99e 	bl	8009f16 <USBD_CtlError>
  }
}
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	4b4e      	ldr	r3, [pc, #312]	; (8009d34 <USBD_SetConfig+0x150>)
 8009bfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bfc:	4b4d      	ldr	r3, [pc, #308]	; (8009d34 <USBD_SetConfig+0x150>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d905      	bls.n	8009c10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f985 	bl	8009f16 <USBD_CtlError>
    return USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e08c      	b.n	8009d2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d002      	beq.n	8009c22 <USBD_SetConfig+0x3e>
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d029      	beq.n	8009c74 <USBD_SetConfig+0x90>
 8009c20:	e075      	b.n	8009d0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c22:	4b44      	ldr	r3, [pc, #272]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d020      	beq.n	8009c6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c2a:	4b42      	ldr	r3, [pc, #264]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c34:	4b3f      	ldr	r3, [pc, #252]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fe ffe7 	bl	8008c0e <USBD_SetClassConfig>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d008      	beq.n	8009c5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f962 	bl	8009f16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2202      	movs	r2, #2
 8009c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c5a:	e065      	b.n	8009d28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fa25 	bl	800a0ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2203      	movs	r2, #3
 8009c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c6a:	e05d      	b.n	8009d28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa1d 	bl	800a0ac <USBD_CtlSendStatus>
      break;
 8009c72:	e059      	b.n	8009d28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c74:	4b2f      	ldr	r3, [pc, #188]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d112      	bne.n	8009ca2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c84:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <USBD_SetConfig+0x150>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fe ffd6 	bl	8008c46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fa06 	bl	800a0ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ca0:	e042      	b.n	8009d28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009ca2:	4b24      	ldr	r3, [pc, #144]	; (8009d34 <USBD_SetConfig+0x150>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d02a      	beq.n	8009d06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7fe ffc4 	bl	8008c46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cbe:	4b1d      	ldr	r3, [pc, #116]	; (8009d34 <USBD_SetConfig+0x150>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cc8:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <USBD_SetConfig+0x150>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7fe ff9d 	bl	8008c0e <USBD_SetClassConfig>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00f      	beq.n	8009cfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f918 	bl	8009f16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7fe ffa9 	bl	8008c46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cfc:	e014      	b.n	8009d28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f9d4 	bl	800a0ac <USBD_CtlSendStatus>
      break;
 8009d04:	e010      	b.n	8009d28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f9d0 	bl	800a0ac <USBD_CtlSendStatus>
      break;
 8009d0c:	e00c      	b.n	8009d28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f900 	bl	8009f16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d16:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <USBD_SetConfig+0x150>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe ff92 	bl	8008c46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d22:	2303      	movs	r3, #3
 8009d24:	73fb      	strb	r3, [r7, #15]
      break;
 8009d26:	bf00      	nop
  }

  return ret;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	2000029c 	.word	0x2000029c

08009d38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	88db      	ldrh	r3, [r3, #6]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d004      	beq.n	8009d54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f8e2 	bl	8009f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d52:	e023      	b.n	8009d9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	dc02      	bgt.n	8009d66 <USBD_GetConfig+0x2e>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dc03      	bgt.n	8009d6c <USBD_GetConfig+0x34>
 8009d64:	e015      	b.n	8009d92 <USBD_GetConfig+0x5a>
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d00b      	beq.n	8009d82 <USBD_GetConfig+0x4a>
 8009d6a:	e012      	b.n	8009d92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3308      	adds	r3, #8
 8009d76:	2201      	movs	r2, #1
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f93c 	bl	8009ff8 <USBD_CtlSendData>
        break;
 8009d80:	e00c      	b.n	8009d9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3304      	adds	r3, #4
 8009d86:	2201      	movs	r2, #1
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f934 	bl	8009ff8 <USBD_CtlSendData>
        break;
 8009d90:	e004      	b.n	8009d9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f8be 	bl	8009f16 <USBD_CtlError>
        break;
 8009d9a:	bf00      	nop
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d81e      	bhi.n	8009dfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	88db      	ldrh	r3, [r3, #6]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d004      	beq.n	8009dce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f8a5 	bl	8009f16 <USBD_CtlError>
        break;
 8009dcc:	e01a      	b.n	8009e04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d005      	beq.n	8009dea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f043 0202 	orr.w	r2, r3, #2
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	330c      	adds	r3, #12
 8009dee:	2202      	movs	r2, #2
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f900 	bl	8009ff8 <USBD_CtlSendData>
      break;
 8009df8:	e004      	b.n	8009e04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f88a 	bl	8009f16 <USBD_CtlError>
      break;
 8009e02:	bf00      	nop
  }
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	885b      	ldrh	r3, [r3, #2]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d107      	bne.n	8009e2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f940 	bl	800a0ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e2c:	e013      	b.n	8009e56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	885b      	ldrh	r3, [r3, #2]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d10b      	bne.n	8009e4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	889b      	ldrh	r3, [r3, #4]
 8009e3a:	0a1b      	lsrs	r3, r3, #8
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f930 	bl	800a0ac <USBD_CtlSendStatus>
}
 8009e4c:	e003      	b.n	8009e56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f860 	bl	8009f16 <USBD_CtlError>
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d80b      	bhi.n	8009e8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d10c      	bne.n	8009e98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f910 	bl	800a0ac <USBD_CtlSendStatus>
      }
      break;
 8009e8c:	e004      	b.n	8009e98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f840 	bl	8009f16 <USBD_CtlError>
      break;
 8009e96:	e000      	b.n	8009e9a <USBD_ClrFeature+0x3c>
      break;
 8009e98:	bf00      	nop
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff fa41 	bl	8009354 <SWAPBYTE>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7ff fa34 	bl	8009354 <SWAPBYTE>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3301      	adds	r3, #1
 8009efe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7ff fa27 	bl	8009354 <SWAPBYTE>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	80da      	strh	r2, [r3, #6]
}
 8009f0e:	bf00      	nop
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fcb0 	bl	800a888 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fcac 	bl	800a888 <USBD_LL_StallEP>
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d036      	beq.n	8009fbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f52:	6938      	ldr	r0, [r7, #16]
 8009f54:	f000 f836 	bl	8009fc4 <USBD_GetLen>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7812      	ldrb	r2, [r2, #0]
 8009f70:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	3301      	adds	r3, #1
 8009f76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	2203      	movs	r2, #3
 8009f80:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	3301      	adds	r3, #1
 8009f86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f88:	e013      	b.n	8009fb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	4413      	add	r3, r2
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	7812      	ldrb	r2, [r2, #0]
 8009f94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	613b      	str	r3, [r7, #16]
    idx++;
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	2200      	movs	r2, #0
 8009faa:	701a      	strb	r2, [r3, #0]
    idx++;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e7      	bne.n	8009f8a <USBD_GetString+0x52>
 8009fba:	e000      	b.n	8009fbe <USBD_GetString+0x86>
    return;
 8009fbc:	bf00      	nop
  }
}
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fd4:	e005      	b.n	8009fe2 <USBD_GetLen+0x1e>
  {
    len++;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1f5      	bne.n	8009fd6 <USBD_GetLen+0x12>
  }

  return len;
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2202      	movs	r2, #2
 800a008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	2100      	movs	r1, #0
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fcbb 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 fcaa 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2203      	movs	r2, #3
 800a060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	2100      	movs	r1, #0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fcae 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	2100      	movs	r1, #0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fc9d 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fc69 	bl	800a99a <USBD_LL_Transmit>

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2205      	movs	r2, #5
 800a0de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fc77 	bl	800a9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4912      	ldr	r1, [pc, #72]	; (800a148 <MX_USB_DEVICE_Init+0x50>)
 800a100:	4812      	ldr	r0, [pc, #72]	; (800a14c <MX_USB_DEVICE_Init+0x54>)
 800a102:	f7fe fd07 	bl	8008b14 <USBD_Init>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a10c:	f7f7 faf8 	bl	8001700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a110:	490f      	ldr	r1, [pc, #60]	; (800a150 <MX_USB_DEVICE_Init+0x58>)
 800a112:	480e      	ldr	r0, [pc, #56]	; (800a14c <MX_USB_DEVICE_Init+0x54>)
 800a114:	f7fe fd2e 	bl	8008b74 <USBD_RegisterClass>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a11e:	f7f7 faef 	bl	8001700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a122:	490c      	ldr	r1, [pc, #48]	; (800a154 <MX_USB_DEVICE_Init+0x5c>)
 800a124:	4809      	ldr	r0, [pc, #36]	; (800a14c <MX_USB_DEVICE_Init+0x54>)
 800a126:	f7fe fc65 	bl	80089f4 <USBD_CDC_RegisterInterface>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a130:	f7f7 fae6 	bl	8001700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a134:	4805      	ldr	r0, [pc, #20]	; (800a14c <MX_USB_DEVICE_Init+0x54>)
 800a136:	f7fe fd53 	bl	8008be0 <USBD_Start>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a140:	f7f7 fade 	bl	8001700 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a144:	bf00      	nop
 800a146:	bd80      	pop	{r7, pc}
 800a148:	200000ac 	.word	0x200000ac
 800a14c:	200002a0 	.word	0x200002a0
 800a150:	20000018 	.word	0x20000018
 800a154:	20000098 	.word	0x20000098

0800a158 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a15c:	2200      	movs	r2, #0
 800a15e:	4905      	ldr	r1, [pc, #20]	; (800a174 <CDC_Init_FS+0x1c>)
 800a160:	4805      	ldr	r0, [pc, #20]	; (800a178 <CDC_Init_FS+0x20>)
 800a162:	f7fe fc61 	bl	8008a28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a166:	4905      	ldr	r1, [pc, #20]	; (800a17c <CDC_Init_FS+0x24>)
 800a168:	4803      	ldr	r0, [pc, #12]	; (800a178 <CDC_Init_FS+0x20>)
 800a16a:	f7fe fc7f 	bl	8008a6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a16e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a170:	4618      	mov	r0, r3
 800a172:	bd80      	pop	{r7, pc}
 800a174:	2000097c 	.word	0x2000097c
 800a178:	200002a0 	.word	0x200002a0
 800a17c:	2000057c 	.word	0x2000057c

0800a180 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a180:	b480      	push	{r7}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a186:	4618      	mov	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	6039      	str	r1, [r7, #0]
 800a19a:	71fb      	strb	r3, [r7, #7]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	2b23      	cmp	r3, #35	; 0x23
 800a1a4:	d84a      	bhi.n	800a23c <CDC_Control_FS+0xac>
 800a1a6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ac <CDC_Control_FS+0x1c>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a23d 	.word	0x0800a23d
 800a1b0:	0800a23d 	.word	0x0800a23d
 800a1b4:	0800a23d 	.word	0x0800a23d
 800a1b8:	0800a23d 	.word	0x0800a23d
 800a1bc:	0800a23d 	.word	0x0800a23d
 800a1c0:	0800a23d 	.word	0x0800a23d
 800a1c4:	0800a23d 	.word	0x0800a23d
 800a1c8:	0800a23d 	.word	0x0800a23d
 800a1cc:	0800a23d 	.word	0x0800a23d
 800a1d0:	0800a23d 	.word	0x0800a23d
 800a1d4:	0800a23d 	.word	0x0800a23d
 800a1d8:	0800a23d 	.word	0x0800a23d
 800a1dc:	0800a23d 	.word	0x0800a23d
 800a1e0:	0800a23d 	.word	0x0800a23d
 800a1e4:	0800a23d 	.word	0x0800a23d
 800a1e8:	0800a23d 	.word	0x0800a23d
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	0800a23d 	.word	0x0800a23d
 800a1f4:	0800a23d 	.word	0x0800a23d
 800a1f8:	0800a23d 	.word	0x0800a23d
 800a1fc:	0800a23d 	.word	0x0800a23d
 800a200:	0800a23d 	.word	0x0800a23d
 800a204:	0800a23d 	.word	0x0800a23d
 800a208:	0800a23d 	.word	0x0800a23d
 800a20c:	0800a23d 	.word	0x0800a23d
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a23d 	.word	0x0800a23d
 800a220:	0800a23d 	.word	0x0800a23d
 800a224:	0800a23d 	.word	0x0800a23d
 800a228:	0800a23d 	.word	0x0800a23d
 800a22c:	0800a23d 	.word	0x0800a23d
 800a230:	0800a23d 	.word	0x0800a23d
 800a234:	0800a23d 	.word	0x0800a23d
 800a238:	0800a23d 	.word	0x0800a23d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a23c:	bf00      	nop
  }

  return (USBD_OK);
 800a23e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4805      	ldr	r0, [pc, #20]	; (800a270 <CDC_Receive_FS+0x24>)
 800a25a:	f7fe fc07 	bl	8008a6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a25e:	4804      	ldr	r0, [pc, #16]	; (800a270 <CDC_Receive_FS+0x24>)
 800a260:	f7fe fc22 	bl	8008aa8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a264:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200002a0 	.word	0x200002a0

0800a274 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4613      	mov	r3, r2
 800a280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
	...

0800a298 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2212      	movs	r2, #18
 800a2a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	; (800a2b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	200000c8 	.word	0x200000c8

0800a2bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2ce:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	200000dc 	.word	0x200000dc

0800a2e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	6039      	str	r1, [r7, #0]
 800a2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d105      	bne.n	800a2fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	4907      	ldr	r1, [pc, #28]	; (800a314 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2f6:	4808      	ldr	r0, [pc, #32]	; (800a318 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2f8:	f7ff fe1e 	bl	8009f38 <USBD_GetString>
 800a2fc:	e004      	b.n	800a308 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4904      	ldr	r1, [pc, #16]	; (800a314 <USBD_FS_ProductStrDescriptor+0x34>)
 800a302:	4805      	ldr	r0, [pc, #20]	; (800a318 <USBD_FS_ProductStrDescriptor+0x38>)
 800a304:	f7ff fe18 	bl	8009f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000d7c 	.word	0x20000d7c
 800a318:	0800ab3c 	.word	0x0800ab3c

0800a31c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	4904      	ldr	r1, [pc, #16]	; (800a33c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a32c:	4804      	ldr	r0, [pc, #16]	; (800a340 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a32e:	f7ff fe03 	bl	8009f38 <USBD_GetString>
  return USBD_StrDesc;
 800a332:	4b02      	ldr	r3, [pc, #8]	; (800a33c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000d7c 	.word	0x20000d7c
 800a340:	0800ab54 	.word	0x0800ab54

0800a344 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	221a      	movs	r2, #26
 800a354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a356:	f000 f843 	bl	800a3e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a35a:	4b02      	ldr	r3, [pc, #8]	; (800a364 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	200000e0 	.word	0x200000e0

0800a368 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	4907      	ldr	r1, [pc, #28]	; (800a39c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a37e:	4808      	ldr	r0, [pc, #32]	; (800a3a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a380:	f7ff fdda 	bl	8009f38 <USBD_GetString>
 800a384:	e004      	b.n	800a390 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	4904      	ldr	r1, [pc, #16]	; (800a39c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a38a:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a38c:	f7ff fdd4 	bl	8009f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a390:	4b02      	ldr	r3, [pc, #8]	; (800a39c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000d7c 	.word	0x20000d7c
 800a3a0:	0800ab68 	.word	0x0800ab68

0800a3a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	6039      	str	r1, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d105      	bne.n	800a3c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	4907      	ldr	r1, [pc, #28]	; (800a3d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ba:	4808      	ldr	r0, [pc, #32]	; (800a3dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3bc:	f7ff fdbc 	bl	8009f38 <USBD_GetString>
 800a3c0:	e004      	b.n	800a3cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	4904      	ldr	r1, [pc, #16]	; (800a3d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3c6:	4805      	ldr	r0, [pc, #20]	; (800a3dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3c8:	f7ff fdb6 	bl	8009f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3cc:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000d7c 	.word	0x20000d7c
 800a3dc:	0800ab74 	.word	0x0800ab74

0800a3e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <Get_SerialNum+0x44>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <Get_SerialNum+0x48>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3f2:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <Get_SerialNum+0x4c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a406:	2208      	movs	r2, #8
 800a408:	4909      	ldr	r1, [pc, #36]	; (800a430 <Get_SerialNum+0x50>)
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 f814 	bl	800a438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a410:	2204      	movs	r2, #4
 800a412:	4908      	ldr	r1, [pc, #32]	; (800a434 <Get_SerialNum+0x54>)
 800a414:	68b8      	ldr	r0, [r7, #8]
 800a416:	f000 f80f 	bl	800a438 <IntToUnicode>
  }
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	1fff7a10 	.word	0x1fff7a10
 800a428:	1fff7a14 	.word	0x1fff7a14
 800a42c:	1fff7a18 	.word	0x1fff7a18
 800a430:	200000e2 	.word	0x200000e2
 800a434:	200000f2 	.word	0x200000f2

0800a438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	75fb      	strb	r3, [r7, #23]
 800a44e:	e027      	b.n	800a4a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	0f1b      	lsrs	r3, r3, #28
 800a454:	2b09      	cmp	r3, #9
 800a456:	d80b      	bhi.n	800a470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	0f1b      	lsrs	r3, r3, #28
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4619      	mov	r1, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	440b      	add	r3, r1
 800a468:	3230      	adds	r2, #48	; 0x30
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	701a      	strb	r2, [r3, #0]
 800a46e:	e00a      	b.n	800a486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	0f1b      	lsrs	r3, r3, #28
 800a474:	b2da      	uxtb	r2, r3
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	4619      	mov	r1, r3
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	440b      	add	r3, r1
 800a480:	3237      	adds	r2, #55	; 0x37
 800a482:	b2d2      	uxtb	r2, r2
 800a484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	3301      	adds	r3, #1
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	3301      	adds	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
 800a4a0:	7dfa      	ldrb	r2, [r7, #23]
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d3d3      	bcc.n	800a450 <IntToUnicode+0x18>
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08a      	sub	sp, #40	; 0x28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4c0:	f107 0314 	add.w	r3, r7, #20
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	60da      	str	r2, [r3, #12]
 800a4ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4d8:	d13a      	bne.n	800a550 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
 800a4de:	4b1e      	ldr	r3, [pc, #120]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	4a1d      	ldr	r2, [pc, #116]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a4fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a500:	2300      	movs	r3, #0
 800a502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a504:	2303      	movs	r3, #3
 800a506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a508:	230a      	movs	r3, #10
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	4619      	mov	r1, r3
 800a512:	4812      	ldr	r0, [pc, #72]	; (800a55c <HAL_PCD_MspInit+0xa4>)
 800a514:	f7f7 ffd4 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51c:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a522:	6353      	str	r3, [r2, #52]	; 0x34
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52c:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a52e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a532:	6453      	str	r3, [r2, #68]	; 0x44
 800a534:	4b08      	ldr	r3, [pc, #32]	; (800a558 <HAL_PCD_MspInit+0xa0>)
 800a536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	2043      	movs	r0, #67	; 0x43
 800a546:	f7f7 ff84 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a54a:	2043      	movs	r0, #67	; 0x43
 800a54c:	f7f7 ff9d 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a550:	bf00      	nop
 800a552:	3728      	adds	r7, #40	; 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	40023800 	.word	0x40023800
 800a55c:	40020000 	.word	0x40020000

0800a560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fe fb7f 	bl	8008c7a <USBD_LL_SetupStage>
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a596:	78fa      	ldrb	r2, [r7, #3]
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f7fe fbb9 	bl	8008d24 <USBD_LL_DataOutStage>
}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	334c      	adds	r3, #76	; 0x4c
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f7fe fc52 	bl	8008e8a <USBD_LL_DataInStage>
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fd86 	bl	800910e <USBD_LL_SOF>
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d001      	beq.n	800a622 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a61e:	f7f7 f86f 	bl	8001700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a628:	7bfa      	ldrb	r2, [r7, #15]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fd30 	bl	8009092 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fcd8 	bl	8008fee <USBD_LL_Reset>
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd2b 	bl	80090b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <HAL_PCD_SuspendCallback+0x48>)
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	4a03      	ldr	r2, [pc, #12]	; (800a690 <HAL_PCD_SuspendCallback+0x48>)
 800a682:	f043 0306 	orr.w	r3, r3, #6
 800a686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed00 	.word	0xe000ed00

0800a694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fd1b 	bl	80090de <USBD_LL_Resume>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fd73 	bl	80091b2 <USBD_LL_IsoOUTIncomplete>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fd2f 	bl	800914e <USBD_LL_IsoINIncomplete>
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fd85 	bl	8009216 <USBD_LL_DevConnected>
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fd82 	bl	800922c <USBD_LL_DevDisconnected>
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d13c      	bne.n	800a7ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a740:	4a20      	ldr	r2, [pc, #128]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1e      	ldr	r2, [pc, #120]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a74c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a750:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a758:	4b1a      	ldr	r3, [pc, #104]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a75a:	2204      	movs	r2, #4
 800a75c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a75e:	4b19      	ldr	r3, [pc, #100]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a760:	2202      	movs	r2, #2
 800a762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a764:	4b17      	ldr	r3, [pc, #92]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a766:	2200      	movs	r2, #0
 800a768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a76a:	4b16      	ldr	r3, [pc, #88]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a76c:	2202      	movs	r2, #2
 800a76e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a770:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a772:	2200      	movs	r2, #0
 800a774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a776:	4b13      	ldr	r3, [pc, #76]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a778:	2200      	movs	r2, #0
 800a77a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a77e:	2200      	movs	r2, #0
 800a780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a782:	4b10      	ldr	r3, [pc, #64]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a784:	2200      	movs	r2, #0
 800a786:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a788:	4b0e      	ldr	r3, [pc, #56]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a78e:	480d      	ldr	r0, [pc, #52]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a790:	f7f9 f80b 	bl	80037aa <HAL_PCD_Init>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a79a:	f7f6 ffb1 	bl	8001700 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a79e:	2180      	movs	r1, #128	; 0x80
 800a7a0:	4808      	ldr	r0, [pc, #32]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a7a2:	f7fa fa62 	bl	8004c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7a6:	2240      	movs	r2, #64	; 0x40
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4806      	ldr	r0, [pc, #24]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a7ac:	f7fa fa16 	bl	8004bdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7b0:	2280      	movs	r2, #128	; 0x80
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	4803      	ldr	r0, [pc, #12]	; (800a7c4 <USBD_LL_Init+0x94>)
 800a7b6:	f7fa fa11 	bl	8004bdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000f7c 	.word	0x20000f7c

0800a7c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7f9 f900 	bl	80039e4 <HAL_PCD_Start>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f942 	bl	800aa74 <USBD_Get_USB_Status>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	461a      	mov	r2, r3
 800a80c:	4603      	mov	r3, r0
 800a80e:	70fb      	strb	r3, [r7, #3]
 800a810:	460b      	mov	r3, r1
 800a812:	70bb      	strb	r3, [r7, #2]
 800a814:	4613      	mov	r3, r2
 800a816:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a826:	78bb      	ldrb	r3, [r7, #2]
 800a828:	883a      	ldrh	r2, [r7, #0]
 800a82a:	78f9      	ldrb	r1, [r7, #3]
 800a82c:	f7f9 fdd1 	bl	80043d2 <HAL_PCD_EP_Open>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f91c 	bl	800aa74 <USBD_Get_USB_Status>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a840:	7bbb      	ldrb	r3, [r7, #14]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fe1a 	bl	80044a2 <HAL_PCD_EP_Close>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f8fd 	bl	800aa74 <USBD_Get_USB_Status>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f9 fef2 	bl	8004690 <HAL_PCD_EP_SetStall>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f8de 	bl	800aa74 <USBD_Get_USB_Status>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8e0:	78fa      	ldrb	r2, [r7, #3]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7f9 ff37 	bl	8004758 <HAL_PCD_EP_ClrStall>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 f8bf 	bl	800aa74 <USBD_Get_USB_Status>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da0b      	bge.n	800a938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a926:	68f9      	ldr	r1, [r7, #12]
 800a928:	4613      	mov	r3, r2
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	333e      	adds	r3, #62	; 0x3e
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	e00b      	b.n	800a950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	4613      	mov	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a94e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 fd04 	bl	8004388 <HAL_PCD_SetAddress>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f874 	bl	800aa74 <USBD_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a990:	7bbb      	ldrb	r3, [r7, #14]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9b8:	7af9      	ldrb	r1, [r7, #11]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	f7f9 fe1d 	bl	80045fc <HAL_PCD_EP_Transmit>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f853 	bl	800aa74 <USBD_Get_USB_Status>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9fa:	7af9      	ldrb	r1, [r7, #11]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	f7f9 fd99 	bl	8004536 <HAL_PCD_EP_Receive>
 800aa04:	4603      	mov	r3, r0
 800aa06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f832 	bl	800aa74 <USBD_Get_USB_Status>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa14:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f9 fdc9 	bl	80045cc <HAL_PCD_EP_GetRxCount>
 800aa3a:	4603      	mov	r3, r0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa4c:	4b03      	ldr	r3, [pc, #12]	; (800aa5c <USBD_static_malloc+0x18>)
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20001488 	.word	0x20001488

0800aa60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d817      	bhi.n	800aab8 <USBD_Get_USB_Status+0x44>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBD_Get_USB_Status+0x1c>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa7 	.word	0x0800aaa7
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aab3 	.word	0x0800aab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa4:	e00b      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaaa:	e008      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
    break;
 800aab0:	e005      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	73fb      	strb	r3, [r7, #15]
    break;
 800aab6:	e002      	b.n	800aabe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	73fb      	strb	r3, [r7, #15]
    break;
 800aabc:	bf00      	nop
  }
  return usb_status;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <__libc_init_array>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	4d0d      	ldr	r5, [pc, #52]	; (800ab04 <__libc_init_array+0x38>)
 800aad0:	4c0d      	ldr	r4, [pc, #52]	; (800ab08 <__libc_init_array+0x3c>)
 800aad2:	1b64      	subs	r4, r4, r5
 800aad4:	10a4      	asrs	r4, r4, #2
 800aad6:	2600      	movs	r6, #0
 800aad8:	42a6      	cmp	r6, r4
 800aada:	d109      	bne.n	800aaf0 <__libc_init_array+0x24>
 800aadc:	4d0b      	ldr	r5, [pc, #44]	; (800ab0c <__libc_init_array+0x40>)
 800aade:	4c0c      	ldr	r4, [pc, #48]	; (800ab10 <__libc_init_array+0x44>)
 800aae0:	f000 f820 	bl	800ab24 <_init>
 800aae4:	1b64      	subs	r4, r4, r5
 800aae6:	10a4      	asrs	r4, r4, #2
 800aae8:	2600      	movs	r6, #0
 800aaea:	42a6      	cmp	r6, r4
 800aaec:	d105      	bne.n	800aafa <__libc_init_array+0x2e>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf4:	4798      	blx	r3
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7ee      	b.n	800aad8 <__libc_init_array+0xc>
 800aafa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aafe:	4798      	blx	r3
 800ab00:	3601      	adds	r6, #1
 800ab02:	e7f2      	b.n	800aaea <__libc_init_array+0x1e>
 800ab04:	0800aba4 	.word	0x0800aba4
 800ab08:	0800aba4 	.word	0x0800aba4
 800ab0c:	0800aba4 	.word	0x0800aba4
 800ab10:	0800aba8 	.word	0x0800aba8

0800ab14 <memset>:
 800ab14:	4402      	add	r2, r0
 800ab16:	4603      	mov	r3, r0
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d100      	bne.n	800ab1e <memset+0xa>
 800ab1c:	4770      	bx	lr
 800ab1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab22:	e7f9      	b.n	800ab18 <memset+0x4>

0800ab24 <_init>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	bf00      	nop
 800ab28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2a:	bc08      	pop	{r3}
 800ab2c:	469e      	mov	lr, r3
 800ab2e:	4770      	bx	lr

0800ab30 <_fini>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	bf00      	nop
 800ab34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab36:	bc08      	pop	{r3}
 800ab38:	469e      	mov	lr, r3
 800ab3a:	4770      	bx	lr
